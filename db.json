{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"aa5219921109d46cb9d2cc9115c287d8c79b71fa","modified":1477459087360},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1477459087361},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1477459087362},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1477459087362},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1477459087363},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1477459087363},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1477459087362},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1477459087363},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1477459087364},{"_id":"themes/next/_config.yml","hash":"592ed0011734885f2cdd61ab5bc486765e9ad148","modified":1477883284660},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1477459087364},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1477459087388},{"_id":"source/_posts/(译)学习如何构建自动化、跨浏览器的JavaScript单元测试.md","hash":"f00e24c8f2afab960bf4ebb4b7b9ab76bf8c9391","modified":1477459087359},{"_id":"source/_posts/2016-10-23-写于1024之前.md","hash":"52654f2997ce736a49b7e7f0896f9637f9c04ffe","modified":1477379999853},{"_id":"source/_posts/JavaScript对于cookie的读、写操作.md","hash":"ee505f6db882925067f0bdb9ea80a72010dc25ab","modified":1477561475425},{"_id":"source/_posts/Lodash学习-数组篇.md","hash":"2ff1f97745549436d1868b6549649b8b5584aee7","modified":1478587652483},{"_id":"source/images/avatar.png","hash":"0395d62157a755fe9d60572fb362a0ed01c779ec","modified":1477459087361},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1477459087365},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1477459087365},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1477459087365},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1477459087366},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1477459087366},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1477459087367},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1477459087367},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1477459087367},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1477459087368},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1477459087368},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1477459087368},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1477459087369},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1477459087386},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1477459087386},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1477459087386},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1477459087387},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1477459087387},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1477459087387},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1477459087388},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1477459087466},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1477459087466},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1477459087466},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087425},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1477459087369},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1477459087370},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1477459087371},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1477459087370},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1477459087371},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1477459087372},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1477459087371},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1477459087372},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1477459087373},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1477459087374},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1477459087374},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1477459087374},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1477459087378},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1477459087377},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1477459087378},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1477459087385},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1477459087424},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1477459087425},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1477459087426},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1477459087426},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1477459087427},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1477459087427},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1477459087427},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1477459087428},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1477459087428},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477459087428},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477459087429},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1477459087429},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1477459087429},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477459087430},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1477459087389},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1477459087389},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1477459087389},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087379},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087379},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087412},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087413},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087413},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087423},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477459087424},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1477459087373},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1477459087375},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1477459087375},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1477459087375},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1477459087376},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1477459087376},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1477459087377},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1477459087377},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1477459087379},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1477459087380},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1477459087380},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1477459087383},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1477459087384},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1477459087384},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1477459087385},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1477459087385},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1477459087413},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1477459087413},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1477459087412},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1477459087423},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1477459087423},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1477459087424},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1477459087430},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1477459087431},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1477459087431},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1477459087432},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1477459087432},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1477459087433},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1477459087434},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1477459087433},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1477459087434},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1477459087445},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1477459087445},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1477459087446},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1477459087446},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1477459087446},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1477459087442},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1477459087442},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1477459087442},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1477459087443},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1477459087455},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1477459087457},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1477459087457},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1477459087458},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1477459087458},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1477459087458},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1477459087459},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1477459087460},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1477459087461},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1477459087464},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1477459087465},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1477459087465},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1477459087456},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1477459087381},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1477459087381},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1477459087381},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1477459087382},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1477459087382},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1477459087382},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1477459087383},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1477459087384},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1477459087391},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1477459087391},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1477459087392},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1477459087391},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1477459087397},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1477459087405},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1477459087409},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1477459087410},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1477459087411},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1477459087410},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1477459087411},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1477459087412},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1477459087419},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1477459087418},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1477459087419},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1477459087419},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1477459087419},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1477459087414},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1477459087415},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1477459087415},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1477459087416},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1477459087416},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1477459087416},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1477459087417},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1477459087420},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1477459087421},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1477459087421},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1477459087422},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1477459087421},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1477459087422},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1477459087422},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1477459087433},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477459087435},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477459087435},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477459087435},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477459087436},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477459087437},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477459087437},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1477459087440},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1477459087440},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1477459087441},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1477459087447},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1477459087448},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1477459087447},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477459087455},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1477459087443},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477459087444},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1477459087459},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1477459087460},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477459087450},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477459087451},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477459087454},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1477459087463},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1477459087392},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1477459087393},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1477459087393},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1477459087394},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1477459087394},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1477459087394},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1477459087395},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1477459087395},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1477459087396},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1477459087396},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1477459087397},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1477459087396},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1477459087398},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1477459087398},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1477459087398},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1477459087399},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1477459087399},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1477459087399},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1477459087400},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1477459087400},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1477459087400},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1477459087401},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1477459087401},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1477459087401},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1477459087402},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1477459087402},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1477459087403},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1477459087403},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1477459087403},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1477459087404},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1477459087404},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1477459087404},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1477459087405},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1477459087406},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1477459087406},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1477459087406},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1477459087407},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1477459087407},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1477459087408},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1477459087408},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1477459087408},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1477459087409},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1477459087409},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1477459087420},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1477459087417},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1477459087418},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477459087438},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1477459087438},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1477459087438},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1477459087439},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1477459087439},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1477459087439},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477459087454},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1477459087452},{"_id":"public/archives/index.html","hash":"a7815fabf7168939cdb6924d840f4aeaa4bab7aa","modified":1478587660117},{"_id":"public/archives/2016/index.html","hash":"517c80592bc8531fb5074a2febb9786f1dd21e73","modified":1478587660118},{"_id":"public/archives/2016/10/index.html","hash":"cf7d8b412ec27a67acc02a1c5ea00177ca4f344c","modified":1478587660118},{"_id":"public/archives/2016/11/index.html","hash":"50129210d113b5fe4b28f1814654f3b89c61c623","modified":1478587660118},{"_id":"public/tags/翻译/index.html","hash":"12e0c9edbc1177a47dd3f34717fb1ae65814271d","modified":1478587660119},{"_id":"public/tags/随笔/index.html","hash":"39610eb671b0316365740b25f56576859dc0cedc","modified":1478587660119},{"_id":"public/tags/JavaScipt/index.html","hash":"f9d6134c80b68bd3352924c7430d185938f0c7da","modified":1478587660119},{"_id":"public/tags/cookie/index.html","hash":"a1cfeec9227966572e89c1155bca01f5a6ffa6e0","modified":1478587660119},{"_id":"public/2016/10/27/JavaScript对于cookie的读、写操作/index.html","hash":"c44f77a4271d84682d75c1ea76755f9f2bf120bd","modified":1478587660119},{"_id":"public/2016/10/23/2016-10-23-写于1024之前/index.html","hash":"759b8285012fa9273bd3eb08fcac7cfeff0467c4","modified":1478587660119},{"_id":"public/2016/10/25/(译)学习如何构建自动化、跨浏览器的JavaScript单元测试/index.html","hash":"c9f2065af09d605f744a1c2a4477708f20021a0a","modified":1478587660119},{"_id":"public/index.html","hash":"b9ca13567682febbb3d6d854a3987f2545d0443a","modified":1478587660119},{"_id":"public/tags/lodash/index.html","hash":"1342e1c459197e3b7506d56ff51063827cc04861","modified":1478587660119},{"_id":"public/2016/11/08/Lodash学习-数组篇/index.html","hash":"4a507e39f2769a2a7edad59b2d2fef76bb34d63e","modified":1478587660119},{"_id":"public/favicon.ico","hash":"aa5219921109d46cb9d2cc9115c287d8c79b71fa","modified":1478587660119},{"_id":"public/images/avatar.png","hash":"0395d62157a755fe9d60572fb362a0ed01c779ec","modified":1478587660119},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1478587660119},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1478587660119},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1478587660119},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1478587660119},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1478587660119},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1478587660119},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1478587660119},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1478587660119},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478587660119},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478587660119},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1478587660119},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1478587660119},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1478587660119},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1478587660119},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1478587660119},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478587660119},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478587660119},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478587660119},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478587660119},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478587660119},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478587660119},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1478587660119},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1478587660119},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478587660119},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1478587660936},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1478587660936},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1478587660936},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1478587660952},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1478587660952},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1478587660952},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1478587660952},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1478587660952},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1478587660952},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1478587660952},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1478587660952},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1478587660952},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1478587660952},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1478587660952},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1478587660952},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1478587660952},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1478587660952},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1478587660952},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1478587660952},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1478587660952},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1478587660952},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1478587660952},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1478587660952},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1478587660952},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1478587660952},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1478587660952},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478587660952},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478587660952},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1478587660952},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1478587660952},{"_id":"public/css/main.css","hash":"89fdf31857413b11e1d3c4c0a3b1d8ec7c8d419b","modified":1478587660952},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1478587660952},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1478587660952},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1478587660952},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1478587660952},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1478587660952},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1478587660952},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1478587660952},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1478587660952},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1478587660952},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1478587660952},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1478587660952}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"(译)学习如何构建自动化、跨浏览器的JavaScript单元测试","date":"2016-10-25T04:52:50.000Z","_content":">作者：Philip Walton\n译者：Yeaseon\n原文链接：[点此查看](https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing)\n\n\n我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。\n我们做的不够好的工作是测试代码时每一次做出的改变。\n我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。\n有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。\n对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。\n<!--more-->\n\n## 手工测试流程\n\n在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。\n\n毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。\n\n在手工过程中，你写了一个你的测试文件，它可能看起来像是：\n\n```\nvar assert = require('assert');\nvar SomeClass = require('../lib/some-class');\n\ndescribe('SomeClass', function() {\n  describe('someMethod', function() {\n    it('accept thing A and transforms it into thing B',function() {\n      var sc = new SomeClass();\n      assert.equal(sc.someMethod('A'), 'B');\n    });\n  });\n});\n```\n\n这个例子用了[Mocha](https://mochajs.org)和Node.js [资源](https://nodejs.org/api/assert.html)模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。\n\n在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：\n\n    mocha test/some-class-test.js\n\n你需要一个带有`<script>`标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识`require`声明，你需要一个像是[browserify](http://browserify.org/)或者[webpack](https://webpack.github.io/)的模块打包工具去解决这些依赖。\n\n    browserify test/*-test.js > test/index.js\n\n像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。\n\n一个用Mocha写的典型测试文件看起来像是这样的：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Tests<title>\n  <link href=\"../node_modules/mocha/mocha.css\" rel=\"stylesheet\" />\n  <script src=\"../node_modules/mocha/mocha.js\"></script>\n</head>\n<body>\n\n  <!-- A container element for the visual Mocha results -->\n  <div id=\"mocha\"></div>\n\n  <!-- Mocha setup and initiation code -->\n  <script>\n    mocha.setup('bdd');\n    window.onload = function() {\n      mocha.run();\n    };\n  </script>\n  <!-- The script under test -->\n  <script src=\"index.js></script>\n</body>\n</html>\n```\n\n如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的`<script>`标签。\n\n### 错误检测\n\n如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。\n\n大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。\n\n### 手工方式的优点\n\n在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。\n\n像是这样的一个简单例子：\n\n```\ndescribe('SomeClass', () => {\n  describe('someMethod', () => {\n    it('accepts thing A and transforms it into thing B', () => {\n      const sc = new SomeClass();\n\n      debugger:\n        assert.equal(sc.someMethod('A'), 'B');\n    )};\n  )};\n)};\n```\n\n现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。\n\n相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。\n\n在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。\n\n## 自动化流程\n\n手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。\n\n如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。\n\n无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。\n\n但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。\n\n当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。\n\n毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。\n\n### 需求\n\n+ 我需要能够使用命令行运行测试\n+ 我需要能够在本地调试失败测试\n+ 我需要所有必需的依赖通过`npm`运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过\n      npm install && npm test\n+ 我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。\n+ 我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。\n\n有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。\n\n### 如何进行云测试\n\n有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有[Sauce Labs](https://saucelabs.com/opensauce/)是唯一一个不需要我邮箱支持就能启动一个新的开源账户。\n\n更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！\n\n我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。\n\n这里是所涉及的步骤：\n1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。\n2.Sauce Labs使用[selenium webdriver](http://www.seleniumhq.org/projects/webdriver/)去加载你给它的每一个浏览器和平台的组合的测试页面。\n3.WebDriver检查网页是否测试失败，并将结果存储。\n4.Sauce Labs将有用的结果给你。\n\n这真的很简单。\n\n我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。\n\n### API方法\n\nSauce Labs有两个运行单元测试的API方法：\n\n+ [StartJS Unit Tests](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests)\n+ [Get JS Unit Test Status](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus)\n\nStartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。\n\n文档给了一个使用`curl`的例子：\n\n```\ncurl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\\n   -X POST \\\n   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\\n   -H 'Content-Type: application/json' \\\n   --data '{\"url\": \"https://example.com/tests.html\", \"framework\": \"mocha\", \"platforms\": [[\"Windows 7\", \"firefox\", \"27\"], [\"Linux\", \"chrome\", \"latest\"]]}'\n```\n\n因为这是JavaScript单元测试，我将给你一个使用node模块[request](https://www.npmjs.com/package/request)的例子，如果你正在用Node.js它可能更接近你最终要做的：\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: {\n    url: 'https://example.com/tests.html',\n    framework: 'mocha',\n    platforms: [\n      ['Windows 7', 'firefox', '27'],\n      ['Linux', 'chrome', 'latest']\n    ]\n  }\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n你注意到body中的`framework: 'mocha'`。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。\n\n如果你没有使用上面提到的测试框架，你能可以通过设置`framework: 'custom'`，Sauce Labs将会代替找到的全局变量`window.global_test_results`。格式化的结果被列在文档中的[自定义框架](https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework)一节中。\n\n#### 让Mocha测试结果对于Sauce Labs的webdriver客户端有用\n\n尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。\n\n为你的HTML页面增加Mocha支持：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    mocha.run();\n  };\n</script>\n```\n\n做一些事情，像下面这样：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    var runner = mocha.run();\n    var failedTests = [];\n\n    runner.on('end', function() {\n      window.mochaResults = runner.stats;\n      window.mochaResults.reports = failedTests;\n    });\n    runner.on('fail', logFailure);\n\n    function logFailure(test, err){\n      var flattenTitles = function(test){\n        var titles = [];\n        while (test.parent.title){         \n          titles.push(test.parent.title);\n          test = test.parent;\n        }\n        return titles.reverse();\n      };\n\n      failedTests.push({\n        name: test.title,\n        result: false,\n        message: err.message,\n        stack: err.stack,\n        titles: flattenTitles(test)\n      });\n    };\n  };\n</script>\n```\n\n在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做`window.mochaResults`。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。\n\n再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个`window.mochaResults`对象，然后记录下这个结果。\n\n#### 确定你的测试通过还是失败\n\nStartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。\n\n它返回所有工作队列中的ID，响应看起来像是这样的：\n\n```\n{\n  \"js tests\": [\n    \"9b6a2d7e6c8d4fd2afeeb0ff7e54e694\",\n    \"d38688ec7256497da6966f4523ddee76\",\n    \"14054e68ccd344c0bed77a798a9ce1e8\",\n    \"dbc54181f7d947458f52201ea5fcb901\"\n  ]\n}\n```\n\n要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。\n\n这个想法是你要定期调用这个方法，知道所有工作都完成。\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests/status`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: jsTests, // The response.body from the first API call.\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n响应的结果看起来像是这样：\n\n```\n{\n  \"completed\": false,\n   \"js tests\": [\n     {\n      \"url\": \"https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8\",\n      \"platform\": [\n        \"Windows 10\",\n        \"chrome\", \"latest\"\n       ],\n       \"result\": {\n        \"passes\": 29,\n        \"tests\": 30,\n        \"end\": {},\n        \"suites\": 7,\n        \"reports\": [],\n        \"start\": {},\n        \"duration\": 97,\n        \"failures\": 0,\n        \"pending\": 1\n      },\n      \"id\": \"1f74a237d5ba4a47b5a42570ae1e7999\",\n      \"job_id\": \"75ac4cadb85e415fae957f7811d778b8\"\n    },\n    // ... the rest of the jobs\n  ]\n}\n```\n\n一旦`response.body.complete`属性值为`true`，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。\n\n### 本地访问测试\n\n我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。\n\n有一个问题就是如果你的测试服务启动在`localhost`。\n\n有很多解决这个问题的方案，包括[Sauce Connect](https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy)（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。\n\nSauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。\n\n如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。\n\n我选择的方案是[ngrok](https://ngrok.com/)\n\n#### ngrok\n\nngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。\n\n如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。\n\n在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。\n\n`npm install ngrok`\n\n你可以用下面的代码以编程方式从Node中开始ngrok进程：\n\n```\nconst ngrok = require('ngrok');\n\nngrok.connect(port, (err, url) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`Tests now accessible at: ${url}`);\n  }\n});\n```\n\n只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。\n\n## 整合碎片化\n\n这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。\n\n我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。\n\n一旦你了解了所有的步骤，它很简单。总结：\n\n** 最初的手工流程 **\n\n1. 写一个测试然后创建一个单一的HTML页面去运行它。\n2. 在本地的一个或者两个浏览器中运行这个测试，确保它能工作。\n\n** 增加自动化流程 **\n\n1. 创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。\n2. 更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。\n3. 用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。\n4. 调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。\n5. 定时调用GetJS Unit Test Status方法知道工作完成。\n6. 报告结果。\n\n## 使测试变得更容易\n\n我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。\n\n我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。\n\n我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库[Easy Sauce](https://github.com/philipwalton/easy-sauce)。\n\n### Easy Sauce\n\n[Easy Sauce](https://github.com/philipwalton/easy-sauce)是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。\n\n`easy-sauce` 命令可以设置你的HTML测试文件的路径（默认是`/test/`）、开启本地服务的端口（默认是`1337`端口）和一系列的浏览器/平台进行测试。`easy-sauce`将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。\n\nnpm包使它变得更方便，`easy-sauce`将会默认在`package.json`文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。\n\n对于`easy sauce`完整的用法介绍，请查看Github[文档](https://github.com/philipwalton/easy-sauce)。\n\n最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。\n\n## 结语\n\n在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。\n\n如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。\n\nHappy testing!\n\n> 如果你能看到这里，很感谢你的耐心阅读。\n这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。\n","source":"_posts/(译)学习如何构建自动化、跨浏览器的JavaScript单元测试.md","raw":"---\ntitle: '(译)学习如何构建自动化、跨浏览器的JavaScript单元测试'\ndate: 2016-10-25 12:52:50\ntags: 翻译\n---\n>作者：Philip Walton\n译者：Yeaseon\n原文链接：[点此查看](https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing)\n\n\n我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。\n我们做的不够好的工作是测试代码时每一次做出的改变。\n我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。\n有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。\n对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。\n<!--more-->\n\n## 手工测试流程\n\n在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。\n\n毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。\n\n在手工过程中，你写了一个你的测试文件，它可能看起来像是：\n\n```\nvar assert = require('assert');\nvar SomeClass = require('../lib/some-class');\n\ndescribe('SomeClass', function() {\n  describe('someMethod', function() {\n    it('accept thing A and transforms it into thing B',function() {\n      var sc = new SomeClass();\n      assert.equal(sc.someMethod('A'), 'B');\n    });\n  });\n});\n```\n\n这个例子用了[Mocha](https://mochajs.org)和Node.js [资源](https://nodejs.org/api/assert.html)模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。\n\n在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：\n\n    mocha test/some-class-test.js\n\n你需要一个带有`<script>`标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识`require`声明，你需要一个像是[browserify](http://browserify.org/)或者[webpack](https://webpack.github.io/)的模块打包工具去解决这些依赖。\n\n    browserify test/*-test.js > test/index.js\n\n像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。\n\n一个用Mocha写的典型测试文件看起来像是这样的：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Tests<title>\n  <link href=\"../node_modules/mocha/mocha.css\" rel=\"stylesheet\" />\n  <script src=\"../node_modules/mocha/mocha.js\"></script>\n</head>\n<body>\n\n  <!-- A container element for the visual Mocha results -->\n  <div id=\"mocha\"></div>\n\n  <!-- Mocha setup and initiation code -->\n  <script>\n    mocha.setup('bdd');\n    window.onload = function() {\n      mocha.run();\n    };\n  </script>\n  <!-- The script under test -->\n  <script src=\"index.js></script>\n</body>\n</html>\n```\n\n如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的`<script>`标签。\n\n### 错误检测\n\n如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。\n\n大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。\n\n### 手工方式的优点\n\n在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。\n\n像是这样的一个简单例子：\n\n```\ndescribe('SomeClass', () => {\n  describe('someMethod', () => {\n    it('accepts thing A and transforms it into thing B', () => {\n      const sc = new SomeClass();\n\n      debugger:\n        assert.equal(sc.someMethod('A'), 'B');\n    )};\n  )};\n)};\n```\n\n现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。\n\n相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。\n\n在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。\n\n## 自动化流程\n\n手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。\n\n如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。\n\n无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。\n\n但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。\n\n当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。\n\n毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。\n\n### 需求\n\n+ 我需要能够使用命令行运行测试\n+ 我需要能够在本地调试失败测试\n+ 我需要所有必需的依赖通过`npm`运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过\n      npm install && npm test\n+ 我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。\n+ 我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。\n\n有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。\n\n### 如何进行云测试\n\n有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有[Sauce Labs](https://saucelabs.com/opensauce/)是唯一一个不需要我邮箱支持就能启动一个新的开源账户。\n\n更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！\n\n我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。\n\n这里是所涉及的步骤：\n1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。\n2.Sauce Labs使用[selenium webdriver](http://www.seleniumhq.org/projects/webdriver/)去加载你给它的每一个浏览器和平台的组合的测试页面。\n3.WebDriver检查网页是否测试失败，并将结果存储。\n4.Sauce Labs将有用的结果给你。\n\n这真的很简单。\n\n我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。\n\n### API方法\n\nSauce Labs有两个运行单元测试的API方法：\n\n+ [StartJS Unit Tests](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests)\n+ [Get JS Unit Test Status](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus)\n\nStartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。\n\n文档给了一个使用`curl`的例子：\n\n```\ncurl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\\n   -X POST \\\n   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\\n   -H 'Content-Type: application/json' \\\n   --data '{\"url\": \"https://example.com/tests.html\", \"framework\": \"mocha\", \"platforms\": [[\"Windows 7\", \"firefox\", \"27\"], [\"Linux\", \"chrome\", \"latest\"]]}'\n```\n\n因为这是JavaScript单元测试，我将给你一个使用node模块[request](https://www.npmjs.com/package/request)的例子，如果你正在用Node.js它可能更接近你最终要做的：\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: {\n    url: 'https://example.com/tests.html',\n    framework: 'mocha',\n    platforms: [\n      ['Windows 7', 'firefox', '27'],\n      ['Linux', 'chrome', 'latest']\n    ]\n  }\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n你注意到body中的`framework: 'mocha'`。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。\n\n如果你没有使用上面提到的测试框架，你能可以通过设置`framework: 'custom'`，Sauce Labs将会代替找到的全局变量`window.global_test_results`。格式化的结果被列在文档中的[自定义框架](https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework)一节中。\n\n#### 让Mocha测试结果对于Sauce Labs的webdriver客户端有用\n\n尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。\n\n为你的HTML页面增加Mocha支持：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    mocha.run();\n  };\n</script>\n```\n\n做一些事情，像下面这样：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    var runner = mocha.run();\n    var failedTests = [];\n\n    runner.on('end', function() {\n      window.mochaResults = runner.stats;\n      window.mochaResults.reports = failedTests;\n    });\n    runner.on('fail', logFailure);\n\n    function logFailure(test, err){\n      var flattenTitles = function(test){\n        var titles = [];\n        while (test.parent.title){         \n          titles.push(test.parent.title);\n          test = test.parent;\n        }\n        return titles.reverse();\n      };\n\n      failedTests.push({\n        name: test.title,\n        result: false,\n        message: err.message,\n        stack: err.stack,\n        titles: flattenTitles(test)\n      });\n    };\n  };\n</script>\n```\n\n在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做`window.mochaResults`。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。\n\n再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个`window.mochaResults`对象，然后记录下这个结果。\n\n#### 确定你的测试通过还是失败\n\nStartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。\n\n它返回所有工作队列中的ID，响应看起来像是这样的：\n\n```\n{\n  \"js tests\": [\n    \"9b6a2d7e6c8d4fd2afeeb0ff7e54e694\",\n    \"d38688ec7256497da6966f4523ddee76\",\n    \"14054e68ccd344c0bed77a798a9ce1e8\",\n    \"dbc54181f7d947458f52201ea5fcb901\"\n  ]\n}\n```\n\n要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。\n\n这个想法是你要定期调用这个方法，知道所有工作都完成。\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests/status`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: jsTests, // The response.body from the first API call.\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n响应的结果看起来像是这样：\n\n```\n{\n  \"completed\": false,\n   \"js tests\": [\n     {\n      \"url\": \"https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8\",\n      \"platform\": [\n        \"Windows 10\",\n        \"chrome\", \"latest\"\n       ],\n       \"result\": {\n        \"passes\": 29,\n        \"tests\": 30,\n        \"end\": {},\n        \"suites\": 7,\n        \"reports\": [],\n        \"start\": {},\n        \"duration\": 97,\n        \"failures\": 0,\n        \"pending\": 1\n      },\n      \"id\": \"1f74a237d5ba4a47b5a42570ae1e7999\",\n      \"job_id\": \"75ac4cadb85e415fae957f7811d778b8\"\n    },\n    // ... the rest of the jobs\n  ]\n}\n```\n\n一旦`response.body.complete`属性值为`true`，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。\n\n### 本地访问测试\n\n我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。\n\n有一个问题就是如果你的测试服务启动在`localhost`。\n\n有很多解决这个问题的方案，包括[Sauce Connect](https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy)（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。\n\nSauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。\n\n如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。\n\n我选择的方案是[ngrok](https://ngrok.com/)\n\n#### ngrok\n\nngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。\n\n如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。\n\n在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。\n\n`npm install ngrok`\n\n你可以用下面的代码以编程方式从Node中开始ngrok进程：\n\n```\nconst ngrok = require('ngrok');\n\nngrok.connect(port, (err, url) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`Tests now accessible at: ${url}`);\n  }\n});\n```\n\n只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。\n\n## 整合碎片化\n\n这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。\n\n我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。\n\n一旦你了解了所有的步骤，它很简单。总结：\n\n** 最初的手工流程 **\n\n1. 写一个测试然后创建一个单一的HTML页面去运行它。\n2. 在本地的一个或者两个浏览器中运行这个测试，确保它能工作。\n\n** 增加自动化流程 **\n\n1. 创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。\n2. 更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。\n3. 用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。\n4. 调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。\n5. 定时调用GetJS Unit Test Status方法知道工作完成。\n6. 报告结果。\n\n## 使测试变得更容易\n\n我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。\n\n我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。\n\n我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库[Easy Sauce](https://github.com/philipwalton/easy-sauce)。\n\n### Easy Sauce\n\n[Easy Sauce](https://github.com/philipwalton/easy-sauce)是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。\n\n`easy-sauce` 命令可以设置你的HTML测试文件的路径（默认是`/test/`）、开启本地服务的端口（默认是`1337`端口）和一系列的浏览器/平台进行测试。`easy-sauce`将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。\n\nnpm包使它变得更方便，`easy-sauce`将会默认在`package.json`文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。\n\n对于`easy sauce`完整的用法介绍，请查看Github[文档](https://github.com/philipwalton/easy-sauce)。\n\n最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。\n\n## 结语\n\n在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。\n\n如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。\n\nHappy testing!\n\n> 如果你能看到这里，很感谢你的耐心阅读。\n这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。\n","slug":"(译)学习如何构建自动化、跨浏览器的JavaScript单元测试","published":1,"updated":"2016-10-26T05:18:07.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ94wzef00000gpusnxa5be2","content":"<blockquote>\n<p>作者：Philip Walton<br>译者：Yeaseon<br>原文链接：<a href=\"https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing\" target=\"_blank\" rel=\"external\">点此查看</a></p>\n</blockquote>\n<p>我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。<br>我们做的不够好的工作是测试代码时每一次做出的改变。<br>我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。<br>有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。<br>对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。<br><a id=\"more\"></a></p>\n<h2 id=\"手工测试流程\"><a href=\"#手工测试流程\" class=\"headerlink\" title=\"手工测试流程\"></a>手工测试流程</h2><p>在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。</p>\n<p>毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。</p>\n<p>在手工过程中，你写了一个你的测试文件，它可能看起来像是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var assert = require(&apos;assert&apos;);</div><div class=\"line\">var SomeClass = require(&apos;../lib/some-class&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;SomeClass&apos;, function() &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, function() &#123;</div><div class=\"line\">    it(&apos;accept thing A and transforms it into thing B&apos;,function() &#123;</div><div class=\"line\">      var sc = new SomeClass();</div><div class=\"line\">      assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个例子用了<a href=\"https://mochajs.org\" target=\"_blank\" rel=\"external\">Mocha</a>和Node.js <a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"external\">资源</a>模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。</p>\n<p>在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：</p>\n<pre><code>mocha test/some-class-test.js\n</code></pre><p>你需要一个带有<code>&lt;script&gt;</code>标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识<code>require</code>声明，你需要一个像是<a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">browserify</a>或者<a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">webpack</a>的模块打包工具去解决这些依赖。</p>\n<pre><code>browserify test/*-test.js &gt; test/index.js\n</code></pre><p>像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。</p>\n<p>一个用Mocha写的典型测试文件看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">  &lt;title&gt;Tests&lt;title&gt;</div><div class=\"line\">  &lt;link href=&quot;../node_modules/mocha/mocha.css&quot; rel=&quot;stylesheet&quot; /&gt;</div><div class=\"line\">  &lt;script src=&quot;../node_modules/mocha/mocha.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- A container element for the visual Mocha results --&gt;</div><div class=\"line\">  &lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- Mocha setup and initiation code --&gt;</div><div class=\"line\">  &lt;script&gt;</div><div class=\"line\">    mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">    window.onload = function() &#123;</div><div class=\"line\">      mocha.run();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">  &lt;!-- The script under test --&gt;</div><div class=\"line\">  &lt;script src=&quot;index.js&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的<code>&lt;script&gt;</code>标签。</p>\n<h3 id=\"错误检测\"><a href=\"#错误检测\" class=\"headerlink\" title=\"错误检测\"></a>错误检测</h3><p>如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。</p>\n<p>大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。</p>\n<h3 id=\"手工方式的优点\"><a href=\"#手工方式的优点\" class=\"headerlink\" title=\"手工方式的优点\"></a>手工方式的优点</h3><p>在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。</p>\n<p>像是这样的一个简单例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;SomeClass&apos;, () =&gt; &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;accepts thing A and transforms it into thing B&apos;, () =&gt; &#123;</div><div class=\"line\">      const sc = new SomeClass();</div><div class=\"line\"></div><div class=\"line\">      debugger:</div><div class=\"line\">        assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    )&#125;;</div><div class=\"line\">  )&#125;;</div><div class=\"line\">)&#125;;</div></pre></td></tr></table></figure>\n<p>现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。</p>\n<p>相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。</p>\n<p>在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。</p>\n<h2 id=\"自动化流程\"><a href=\"#自动化流程\" class=\"headerlink\" title=\"自动化流程\"></a>自动化流程</h2><p>手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。</p>\n<p>如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。</p>\n<p>无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。</p>\n<p>但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。</p>\n<p>当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。</p>\n<p>毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>我需要能够使用命令行运行测试</li>\n<li>我需要能够在本地调试失败测试</li>\n<li>我需要所有必需的依赖通过<code>npm</code>运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过<pre><code>npm install &amp;&amp; npm test\n</code></pre></li>\n<li>我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。</li>\n<li>我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。</li>\n</ul>\n<p>有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。</p>\n<h3 id=\"如何进行云测试\"><a href=\"#如何进行云测试\" class=\"headerlink\" title=\"如何进行云测试\"></a>如何进行云测试</h3><p>有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有<a href=\"https://saucelabs.com/opensauce/\" target=\"_blank\" rel=\"external\">Sauce Labs</a>是唯一一个不需要我邮箱支持就能启动一个新的开源账户。</p>\n<p>更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！</p>\n<p>我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。</p>\n<p>这里是所涉及的步骤：<br>1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。<br>2.Sauce Labs使用<a href=\"http://www.seleniumhq.org/projects/webdriver/\" target=\"_blank\" rel=\"external\">selenium webdriver</a>去加载你给它的每一个浏览器和平台的组合的测试页面。<br>3.WebDriver检查网页是否测试失败，并将结果存储。<br>4.Sauce Labs将有用的结果给你。</p>\n<p>这真的很简单。</p>\n<p>我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。</p>\n<h3 id=\"API方法\"><a href=\"#API方法\" class=\"headerlink\" title=\"API方法\"></a>API方法</h3><p>Sauce Labs有两个运行单元测试的API方法：</p>\n<ul>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests\" target=\"_blank\" rel=\"external\">StartJS Unit Tests</a></li>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus\" target=\"_blank\" rel=\"external\">Get JS Unit Test Status</a></li>\n</ul>\n<p>StartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。</p>\n<p>文档给了一个使用<code>curl</code>的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\</div><div class=\"line\">   -X POST \\</div><div class=\"line\">   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\</div><div class=\"line\">   -H &apos;Content-Type: application/json&apos; \\</div><div class=\"line\">   --data &apos;&#123;&quot;url&quot;: &quot;https://example.com/tests.html&quot;, &quot;framework&quot;: &quot;mocha&quot;, &quot;platforms&quot;: [[&quot;Windows 7&quot;, &quot;firefox&quot;, &quot;27&quot;], [&quot;Linux&quot;, &quot;chrome&quot;, &quot;latest&quot;]]&#125;&apos;</div></pre></td></tr></table></figure>\n<p>因为这是JavaScript单元测试，我将给你一个使用node模块<a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">request</a>的例子，如果你正在用Node.js它可能更接近你最终要做的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: &#123;</div><div class=\"line\">    url: &apos;https://example.com/tests.html&apos;,</div><div class=\"line\">    framework: &apos;mocha&apos;,</div><div class=\"line\">    platforms: [</div><div class=\"line\">      [&apos;Windows 7&apos;, &apos;firefox&apos;, &apos;27&apos;],</div><div class=\"line\">      [&apos;Linux&apos;, &apos;chrome&apos;, &apos;latest&apos;]</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你注意到body中的<code>framework: &#39;mocha&#39;</code>。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。</p>\n<p>如果你没有使用上面提到的测试框架，你能可以通过设置<code>framework: &#39;custom&#39;</code>，Sauce Labs将会代替找到的全局变量<code>window.global_test_results</code>。格式化的结果被列在文档中的<a href=\"https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework\" target=\"_blank\" rel=\"external\">自定义框架</a>一节中。</p>\n<h4 id=\"让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\"><a href=\"#让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\" class=\"headerlink\" title=\"让Mocha测试结果对于Sauce Labs的webdriver客户端有用\"></a>让Mocha测试结果对于Sauce Labs的webdriver客户端有用</h4><p>尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。</p>\n<p>为你的HTML页面增加Mocha支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    mocha.run();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>做一些事情，像下面这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    var runner = mocha.run();</div><div class=\"line\">    var failedTests = [];</div><div class=\"line\"></div><div class=\"line\">    runner.on(&apos;end&apos;, function() &#123;</div><div class=\"line\">      window.mochaResults = runner.stats;</div><div class=\"line\">      window.mochaResults.reports = failedTests;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    runner.on(&apos;fail&apos;, logFailure);</div><div class=\"line\"></div><div class=\"line\">    function logFailure(test, err)&#123;</div><div class=\"line\">      var flattenTitles = function(test)&#123;</div><div class=\"line\">        var titles = [];</div><div class=\"line\">        while (test.parent.title)&#123;         </div><div class=\"line\">          titles.push(test.parent.title);</div><div class=\"line\">          test = test.parent;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return titles.reverse();</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">      failedTests.push(&#123;</div><div class=\"line\">        name: test.title,</div><div class=\"line\">        result: false,</div><div class=\"line\">        message: err.message,</div><div class=\"line\">        stack: err.stack,</div><div class=\"line\">        titles: flattenTitles(test)</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做<code>window.mochaResults</code>。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。</p>\n<p>再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个<code>window.mochaResults</code>对象，然后记录下这个结果。</p>\n<h4 id=\"确定你的测试通过还是失败\"><a href=\"#确定你的测试通过还是失败\" class=\"headerlink\" title=\"确定你的测试通过还是失败\"></a>确定你的测试通过还是失败</h4><p>StartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。</p>\n<p>它返回所有工作队列中的ID，响应看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;js tests&quot;: [</div><div class=\"line\">    &quot;9b6a2d7e6c8d4fd2afeeb0ff7e54e694&quot;,</div><div class=\"line\">    &quot;d38688ec7256497da6966f4523ddee76&quot;,</div><div class=\"line\">    &quot;14054e68ccd344c0bed77a798a9ce1e8&quot;,</div><div class=\"line\">    &quot;dbc54181f7d947458f52201ea5fcb901&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。</p>\n<p>这个想法是你要定期调用这个方法，知道所有工作都完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests/status`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: jsTests, // The response.body from the first API call.</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>响应的结果看起来像是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;completed&quot;: false,</div><div class=\"line\">   &quot;js tests&quot;: [</div><div class=\"line\">     &#123;</div><div class=\"line\">      &quot;url&quot;: &quot;https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8&quot;,</div><div class=\"line\">      &quot;platform&quot;: [</div><div class=\"line\">        &quot;Windows 10&quot;,</div><div class=\"line\">        &quot;chrome&quot;, &quot;latest&quot;</div><div class=\"line\">       ],</div><div class=\"line\">       &quot;result&quot;: &#123;</div><div class=\"line\">        &quot;passes&quot;: 29,</div><div class=\"line\">        &quot;tests&quot;: 30,</div><div class=\"line\">        &quot;end&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;suites&quot;: 7,</div><div class=\"line\">        &quot;reports&quot;: [],</div><div class=\"line\">        &quot;start&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;duration&quot;: 97,</div><div class=\"line\">        &quot;failures&quot;: 0,</div><div class=\"line\">        &quot;pending&quot;: 1</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;id&quot;: &quot;1f74a237d5ba4a47b5a42570ae1e7999&quot;,</div><div class=\"line\">      &quot;job_id&quot;: &quot;75ac4cadb85e415fae957f7811d778b8&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // ... the rest of the jobs</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一旦<code>response.body.complete</code>属性值为<code>true</code>，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。</p>\n<h3 id=\"本地访问测试\"><a href=\"#本地访问测试\" class=\"headerlink\" title=\"本地访问测试\"></a>本地访问测试</h3><p>我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。</p>\n<p>有一个问题就是如果你的测试服务启动在<code>localhost</code>。</p>\n<p>有很多解决这个问题的方案，包括<a href=\"https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy\" target=\"_blank\" rel=\"external\">Sauce Connect</a>（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。</p>\n<p>Sauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。</p>\n<p>如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。</p>\n<p>我选择的方案是<a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"external\">ngrok</a></p>\n<h4 id=\"ngrok\"><a href=\"#ngrok\" class=\"headerlink\" title=\"ngrok\"></a>ngrok</h4><p>ngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。</p>\n<p>如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。</p>\n<p>在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。</p>\n<p><code>npm install ngrok</code></p>\n<p>你可以用下面的代码以编程方式从Node中开始ngrok进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const ngrok = require(&apos;ngrok&apos;);</div><div class=\"line\"></div><div class=\"line\">ngrok.connect(port, (err, url) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(`Tests now accessible at: $&#123;url&#125;`);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。</p>\n<h2 id=\"整合碎片化\"><a href=\"#整合碎片化\" class=\"headerlink\" title=\"整合碎片化\"></a>整合碎片化</h2><p>这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。</p>\n<p>我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。</p>\n<p>一旦你了解了所有的步骤，它很简单。总结：</p>\n<p><strong> 最初的手工流程 </strong></p>\n<ol>\n<li>写一个测试然后创建一个单一的HTML页面去运行它。</li>\n<li>在本地的一个或者两个浏览器中运行这个测试，确保它能工作。</li>\n</ol>\n<p><strong> 增加自动化流程 </strong></p>\n<ol>\n<li>创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。</li>\n<li>更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。</li>\n<li>用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。</li>\n<li>调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。</li>\n<li>定时调用GetJS Unit Test Status方法知道工作完成。</li>\n<li>报告结果。</li>\n</ol>\n<h2 id=\"使测试变得更容易\"><a href=\"#使测试变得更容易\" class=\"headerlink\" title=\"使测试变得更容易\"></a>使测试变得更容易</h2><p>我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。</p>\n<p>我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。</p>\n<p>我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库<a href=\"https://github.com/philipwalton/easy-sauce\" target=\"_blank\" rel=\"external\">Easy Sauce</a>。</p>\n<h3 id=\"Easy-Sauce\"><a href=\"#Easy-Sauce\" class=\"headerlink\" title=\"Easy Sauce\"></a>Easy Sauce</h3><p><a href=\"https://github.com/philipwalton/easy-sauce\" target=\"_blank\" rel=\"external\">Easy Sauce</a>是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。</p>\n<p><code>easy-sauce</code> 命令可以设置你的HTML测试文件的路径（默认是<code>/test/</code>）、开启本地服务的端口（默认是<code>1337</code>端口）和一系列的浏览器/平台进行测试。<code>easy-sauce</code>将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。</p>\n<p>npm包使它变得更方便，<code>easy-sauce</code>将会默认在<code>package.json</code>文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。</p>\n<p>对于<code>easy sauce</code>完整的用法介绍，请查看Github<a href=\"https://github.com/philipwalton/easy-sauce\" target=\"_blank\" rel=\"external\">文档</a>。</p>\n<p>最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。</p>\n<p>如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。</p>\n<p>Happy testing!</p>\n<blockquote>\n<p>如果你能看到这里，很感谢你的耐心阅读。<br>这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。</p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>作者：Philip Walton<br>译者：Yeaseon<br>原文链接：<a href=\"https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing\">点此查看</a></p>\n</blockquote>\n<p>我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。<br>我们做的不够好的工作是测试代码时每一次做出的改变。<br>我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。<br>有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。<br>对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。<br>","more":"</p>\n<h2 id=\"手工测试流程\"><a href=\"#手工测试流程\" class=\"headerlink\" title=\"手工测试流程\"></a>手工测试流程</h2><p>在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。</p>\n<p>毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。</p>\n<p>在手工过程中，你写了一个你的测试文件，它可能看起来像是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var assert = require(&apos;assert&apos;);</div><div class=\"line\">var SomeClass = require(&apos;../lib/some-class&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;SomeClass&apos;, function() &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, function() &#123;</div><div class=\"line\">    it(&apos;accept thing A and transforms it into thing B&apos;,function() &#123;</div><div class=\"line\">      var sc = new SomeClass();</div><div class=\"line\">      assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个例子用了<a href=\"https://mochajs.org\">Mocha</a>和Node.js <a href=\"https://nodejs.org/api/assert.html\">资源</a>模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。</p>\n<p>在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：</p>\n<pre><code>mocha test/some-class-test.js\n</code></pre><p>你需要一个带有<code>&lt;script&gt;</code>标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识<code>require</code>声明，你需要一个像是<a href=\"http://browserify.org/\">browserify</a>或者<a href=\"https://webpack.github.io/\">webpack</a>的模块打包工具去解决这些依赖。</p>\n<pre><code>browserify test/*-test.js &gt; test/index.js\n</code></pre><p>像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。</p>\n<p>一个用Mocha写的典型测试文件看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">  &lt;title&gt;Tests&lt;title&gt;</div><div class=\"line\">  &lt;link href=&quot;../node_modules/mocha/mocha.css&quot; rel=&quot;stylesheet&quot; /&gt;</div><div class=\"line\">  &lt;script src=&quot;../node_modules/mocha/mocha.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- A container element for the visual Mocha results --&gt;</div><div class=\"line\">  &lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- Mocha setup and initiation code --&gt;</div><div class=\"line\">  &lt;script&gt;</div><div class=\"line\">    mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">    window.onload = function() &#123;</div><div class=\"line\">      mocha.run();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">  &lt;!-- The script under test --&gt;</div><div class=\"line\">  &lt;script src=&quot;index.js&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的<code>&lt;script&gt;</code>标签。</p>\n<h3 id=\"错误检测\"><a href=\"#错误检测\" class=\"headerlink\" title=\"错误检测\"></a>错误检测</h3><p>如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。</p>\n<p>大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。</p>\n<h3 id=\"手工方式的优点\"><a href=\"#手工方式的优点\" class=\"headerlink\" title=\"手工方式的优点\"></a>手工方式的优点</h3><p>在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。</p>\n<p>像是这样的一个简单例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;SomeClass&apos;, () =&gt; &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;accepts thing A and transforms it into thing B&apos;, () =&gt; &#123;</div><div class=\"line\">      const sc = new SomeClass();</div><div class=\"line\"></div><div class=\"line\">      debugger:</div><div class=\"line\">        assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    )&#125;;</div><div class=\"line\">  )&#125;;</div><div class=\"line\">)&#125;;</div></pre></td></tr></table></figure>\n<p>现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。</p>\n<p>相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。</p>\n<p>在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。</p>\n<h2 id=\"自动化流程\"><a href=\"#自动化流程\" class=\"headerlink\" title=\"自动化流程\"></a>自动化流程</h2><p>手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。</p>\n<p>如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。</p>\n<p>无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。</p>\n<p>但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。</p>\n<p>当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。</p>\n<p>毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>我需要能够使用命令行运行测试</li>\n<li>我需要能够在本地调试失败测试</li>\n<li>我需要所有必需的依赖通过<code>npm</code>运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过<pre><code>npm install &amp;&amp; npm test\n</code></pre></li>\n<li>我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。</li>\n<li>我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。</li>\n</ul>\n<p>有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。</p>\n<h3 id=\"如何进行云测试\"><a href=\"#如何进行云测试\" class=\"headerlink\" title=\"如何进行云测试\"></a>如何进行云测试</h3><p>有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有<a href=\"https://saucelabs.com/opensauce/\">Sauce Labs</a>是唯一一个不需要我邮箱支持就能启动一个新的开源账户。</p>\n<p>更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！</p>\n<p>我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。</p>\n<p>这里是所涉及的步骤：<br>1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。<br>2.Sauce Labs使用<a href=\"http://www.seleniumhq.org/projects/webdriver/\">selenium webdriver</a>去加载你给它的每一个浏览器和平台的组合的测试页面。<br>3.WebDriver检查网页是否测试失败，并将结果存储。<br>4.Sauce Labs将有用的结果给你。</p>\n<p>这真的很简单。</p>\n<p>我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。</p>\n<h3 id=\"API方法\"><a href=\"#API方法\" class=\"headerlink\" title=\"API方法\"></a>API方法</h3><p>Sauce Labs有两个运行单元测试的API方法：</p>\n<ul>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests\">StartJS Unit Tests</a></li>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus\">Get JS Unit Test Status</a></li>\n</ul>\n<p>StartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。</p>\n<p>文档给了一个使用<code>curl</code>的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\</div><div class=\"line\">   -X POST \\</div><div class=\"line\">   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\</div><div class=\"line\">   -H &apos;Content-Type: application/json&apos; \\</div><div class=\"line\">   --data &apos;&#123;&quot;url&quot;: &quot;https://example.com/tests.html&quot;, &quot;framework&quot;: &quot;mocha&quot;, &quot;platforms&quot;: [[&quot;Windows 7&quot;, &quot;firefox&quot;, &quot;27&quot;], [&quot;Linux&quot;, &quot;chrome&quot;, &quot;latest&quot;]]&#125;&apos;</div></pre></td></tr></table></figure>\n<p>因为这是JavaScript单元测试，我将给你一个使用node模块<a href=\"https://www.npmjs.com/package/request\">request</a>的例子，如果你正在用Node.js它可能更接近你最终要做的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: &#123;</div><div class=\"line\">    url: &apos;https://example.com/tests.html&apos;,</div><div class=\"line\">    framework: &apos;mocha&apos;,</div><div class=\"line\">    platforms: [</div><div class=\"line\">      [&apos;Windows 7&apos;, &apos;firefox&apos;, &apos;27&apos;],</div><div class=\"line\">      [&apos;Linux&apos;, &apos;chrome&apos;, &apos;latest&apos;]</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你注意到body中的<code>framework: &#39;mocha&#39;</code>。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。</p>\n<p>如果你没有使用上面提到的测试框架，你能可以通过设置<code>framework: &#39;custom&#39;</code>，Sauce Labs将会代替找到的全局变量<code>window.global_test_results</code>。格式化的结果被列在文档中的<a href=\"https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework\">自定义框架</a>一节中。</p>\n<h4 id=\"让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\"><a href=\"#让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\" class=\"headerlink\" title=\"让Mocha测试结果对于Sauce Labs的webdriver客户端有用\"></a>让Mocha测试结果对于Sauce Labs的webdriver客户端有用</h4><p>尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。</p>\n<p>为你的HTML页面增加Mocha支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    mocha.run();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>做一些事情，像下面这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    var runner = mocha.run();</div><div class=\"line\">    var failedTests = [];</div><div class=\"line\"></div><div class=\"line\">    runner.on(&apos;end&apos;, function() &#123;</div><div class=\"line\">      window.mochaResults = runner.stats;</div><div class=\"line\">      window.mochaResults.reports = failedTests;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    runner.on(&apos;fail&apos;, logFailure);</div><div class=\"line\"></div><div class=\"line\">    function logFailure(test, err)&#123;</div><div class=\"line\">      var flattenTitles = function(test)&#123;</div><div class=\"line\">        var titles = [];</div><div class=\"line\">        while (test.parent.title)&#123;         </div><div class=\"line\">          titles.push(test.parent.title);</div><div class=\"line\">          test = test.parent;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return titles.reverse();</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">      failedTests.push(&#123;</div><div class=\"line\">        name: test.title,</div><div class=\"line\">        result: false,</div><div class=\"line\">        message: err.message,</div><div class=\"line\">        stack: err.stack,</div><div class=\"line\">        titles: flattenTitles(test)</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做<code>window.mochaResults</code>。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。</p>\n<p>再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个<code>window.mochaResults</code>对象，然后记录下这个结果。</p>\n<h4 id=\"确定你的测试通过还是失败\"><a href=\"#确定你的测试通过还是失败\" class=\"headerlink\" title=\"确定你的测试通过还是失败\"></a>确定你的测试通过还是失败</h4><p>StartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。</p>\n<p>它返回所有工作队列中的ID，响应看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;js tests&quot;: [</div><div class=\"line\">    &quot;9b6a2d7e6c8d4fd2afeeb0ff7e54e694&quot;,</div><div class=\"line\">    &quot;d38688ec7256497da6966f4523ddee76&quot;,</div><div class=\"line\">    &quot;14054e68ccd344c0bed77a798a9ce1e8&quot;,</div><div class=\"line\">    &quot;dbc54181f7d947458f52201ea5fcb901&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。</p>\n<p>这个想法是你要定期调用这个方法，知道所有工作都完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests/status`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: jsTests, // The response.body from the first API call.</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>响应的结果看起来像是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;completed&quot;: false,</div><div class=\"line\">   &quot;js tests&quot;: [</div><div class=\"line\">     &#123;</div><div class=\"line\">      &quot;url&quot;: &quot;https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8&quot;,</div><div class=\"line\">      &quot;platform&quot;: [</div><div class=\"line\">        &quot;Windows 10&quot;,</div><div class=\"line\">        &quot;chrome&quot;, &quot;latest&quot;</div><div class=\"line\">       ],</div><div class=\"line\">       &quot;result&quot;: &#123;</div><div class=\"line\">        &quot;passes&quot;: 29,</div><div class=\"line\">        &quot;tests&quot;: 30,</div><div class=\"line\">        &quot;end&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;suites&quot;: 7,</div><div class=\"line\">        &quot;reports&quot;: [],</div><div class=\"line\">        &quot;start&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;duration&quot;: 97,</div><div class=\"line\">        &quot;failures&quot;: 0,</div><div class=\"line\">        &quot;pending&quot;: 1</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;id&quot;: &quot;1f74a237d5ba4a47b5a42570ae1e7999&quot;,</div><div class=\"line\">      &quot;job_id&quot;: &quot;75ac4cadb85e415fae957f7811d778b8&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // ... the rest of the jobs</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一旦<code>response.body.complete</code>属性值为<code>true</code>，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。</p>\n<h3 id=\"本地访问测试\"><a href=\"#本地访问测试\" class=\"headerlink\" title=\"本地访问测试\"></a>本地访问测试</h3><p>我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。</p>\n<p>有一个问题就是如果你的测试服务启动在<code>localhost</code>。</p>\n<p>有很多解决这个问题的方案，包括<a href=\"https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy\">Sauce Connect</a>（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。</p>\n<p>Sauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。</p>\n<p>如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。</p>\n<p>我选择的方案是<a href=\"https://ngrok.com/\">ngrok</a></p>\n<h4 id=\"ngrok\"><a href=\"#ngrok\" class=\"headerlink\" title=\"ngrok\"></a>ngrok</h4><p>ngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。</p>\n<p>如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。</p>\n<p>在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。</p>\n<p><code>npm install ngrok</code></p>\n<p>你可以用下面的代码以编程方式从Node中开始ngrok进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const ngrok = require(&apos;ngrok&apos;);</div><div class=\"line\"></div><div class=\"line\">ngrok.connect(port, (err, url) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(`Tests now accessible at: $&#123;url&#125;`);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。</p>\n<h2 id=\"整合碎片化\"><a href=\"#整合碎片化\" class=\"headerlink\" title=\"整合碎片化\"></a>整合碎片化</h2><p>这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。</p>\n<p>我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。</p>\n<p>一旦你了解了所有的步骤，它很简单。总结：</p>\n<p><strong> 最初的手工流程 </strong></p>\n<ol>\n<li>写一个测试然后创建一个单一的HTML页面去运行它。</li>\n<li>在本地的一个或者两个浏览器中运行这个测试，确保它能工作。</li>\n</ol>\n<p><strong> 增加自动化流程 </strong></p>\n<ol>\n<li>创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。</li>\n<li>更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。</li>\n<li>用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。</li>\n<li>调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。</li>\n<li>定时调用GetJS Unit Test Status方法知道工作完成。</li>\n<li>报告结果。</li>\n</ol>\n<h2 id=\"使测试变得更容易\"><a href=\"#使测试变得更容易\" class=\"headerlink\" title=\"使测试变得更容易\"></a>使测试变得更容易</h2><p>我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。</p>\n<p>我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。</p>\n<p>我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库<a href=\"https://github.com/philipwalton/easy-sauce\">Easy Sauce</a>。</p>\n<h3 id=\"Easy-Sauce\"><a href=\"#Easy-Sauce\" class=\"headerlink\" title=\"Easy Sauce\"></a>Easy Sauce</h3><p><a href=\"https://github.com/philipwalton/easy-sauce\">Easy Sauce</a>是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。</p>\n<p><code>easy-sauce</code> 命令可以设置你的HTML测试文件的路径（默认是<code>/test/</code>）、开启本地服务的端口（默认是<code>1337</code>端口）和一系列的浏览器/平台进行测试。<code>easy-sauce</code>将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。</p>\n<p>npm包使它变得更方便，<code>easy-sauce</code>将会默认在<code>package.json</code>文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。</p>\n<p>对于<code>easy sauce</code>完整的用法介绍，请查看Github<a href=\"https://github.com/philipwalton/easy-sauce\">文档</a>。</p>\n<p>最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。</p>\n<p>如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。</p>\n<p>Happy testing!</p>\n<blockquote>\n<p>如果你能看到这里，很感谢你的耐心阅读。<br>这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。</p>\n</blockquote>"},{"title":"2016-10-23,写于1024之前...","date":"2016-10-23T14:52:50.000Z","_content":"其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。\n最近，越来越觉得不应该这样下去啦。\n就像五月天的歌词：**我知道潮落之后一定有潮起，有什么了不起**，现在“潮落”，也应该开始“潮起”了。\n\n<!--more-->\n\n### 搭建博客的目的\n\n1. 现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客\n2. 将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用**马克飞象**同步到自己的**印象笔记**中\n3. 作为一个web前端开发人员，能够将自己日常所学新技巧，可以**“捣鼓”**到自己的博客上\n4. **Just for fun!!!**\n\n```\nHello world, again !\n```\n明天**10-24**, 祝所有的程序猿“No-Bug-Day”。\n最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。\n> Night-night，Yeaseon.\n","source":"_posts/2016-10-23-写于1024之前.md","raw":"---\ntitle: '2016-10-23,写于1024之前...'\ndate: 2016-10-23 22:52:50\ntags: 随笔\n---\n其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。\n最近，越来越觉得不应该这样下去啦。\n就像五月天的歌词：**我知道潮落之后一定有潮起，有什么了不起**，现在“潮落”，也应该开始“潮起”了。\n\n<!--more-->\n\n### 搭建博客的目的\n\n1. 现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客\n2. 将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用**马克飞象**同步到自己的**印象笔记**中\n3. 作为一个web前端开发人员，能够将自己日常所学新技巧，可以**“捣鼓”**到自己的博客上\n4. **Just for fun!!!**\n\n```\nHello world, again !\n```\n明天**10-24**, 祝所有的程序猿“No-Bug-Day”。\n最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。\n> Night-night，Yeaseon.\n","slug":"2016-10-23-写于1024之前","published":1,"updated":"2016-10-25T07:19:59.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ94wzef00010gpujnmp54w1","content":"<p>其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。<br>最近，越来越觉得不应该这样下去啦。<br>就像五月天的歌词：<strong>我知道潮落之后一定有潮起，有什么了不起</strong>，现在“潮落”，也应该开始“潮起”了。</p>\n<a id=\"more\"></a>\n<h3 id=\"搭建博客的目的\"><a href=\"#搭建博客的目的\" class=\"headerlink\" title=\"搭建博客的目的\"></a>搭建博客的目的</h3><ol>\n<li>现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客</li>\n<li>将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用<strong>马克飞象</strong>同步到自己的<strong>印象笔记</strong>中</li>\n<li>作为一个web前端开发人员，能够将自己日常所学新技巧，可以<strong>“捣鼓”</strong>到自己的博客上</li>\n<li><strong>Just for fun!!!</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world, again !</div></pre></td></tr></table></figure>\n<p>明天<strong>10-24</strong>, 祝所有的程序猿“No-Bug-Day”。<br>最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。</p>\n<blockquote>\n<p>Night-night，Yeaseon.</p>\n</blockquote>\n","excerpt":"<p>其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。<br>最近，越来越觉得不应该这样下去啦。<br>就像五月天的歌词：<strong>我知道潮落之后一定有潮起，有什么了不起</strong>，现在“潮落”，也应该开始“潮起”了。</p>","more":"<h3 id=\"搭建博客的目的\"><a href=\"#搭建博客的目的\" class=\"headerlink\" title=\"搭建博客的目的\"></a>搭建博客的目的</h3><ol>\n<li>现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客</li>\n<li>将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用<strong>马克飞象</strong>同步到自己的<strong>印象笔记</strong>中</li>\n<li>作为一个web前端开发人员，能够将自己日常所学新技巧，可以<strong>“捣鼓”</strong>到自己的博客上</li>\n<li><strong>Just for fun!!!</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world, again !</div></pre></td></tr></table></figure>\n<p>明天<strong>10-24</strong>, 祝所有的程序猿“No-Bug-Day”。<br>最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。</p>\n<blockquote>\n<p>Night-night，Yeaseon.</p>\n</blockquote>"},{"title":"JavaScript对于cookie的读、写操作","date":"2016-10-27T08:58:52.000Z","_content":"\n\n前端开发中，不可避免的总要接触`session`、`cookie`这些网络数据打交道进行一些操作。\n所以说作为一个前端er,\n如果不会操作`cookie`，怎么好意思呐。\n接下来，我们就来讲讲对于`cookie`的读写...\n\n<!--more-->\n## `cookie`的操作\n\n### 写入`cookie`\n\n```  \nfunction setCookie(cName, cValue, days) {  \n    var expires = new Date();  \n    expires.setTime(expires.getTime() + parseInt(days) * 24 * 60 * 60 * 1000);  \n    document.cookie = cName + \"=\" + escape(cValue) + \";expires=\" + expires.toGMTString()+\";path=/;domain=xxx.cn\";  \n};  \n```\n这个函数也十分简单,我们可以设置`cookie`的名字、值以及有效期。\n**注**：我们并没有重写这个`cookie`，这是添加了我们设置的`cookie`。\n+ `expires`: cookie的过期时间，注意这里要使用格林威治时间\n+ `path`: 这个参数表示cookie保存的路径，如果没有给出的话会保存为当前站点的，如果给出值\"/\"的话会保存到当前虚拟目录\n+ `domain`: 这个参数有点类似于session的保存路径，默认情况下保存在当前客户端,也可以自定义到其他位置\n\n### 读取`cookie`\n\n```       \nfunction getCookie(name){    \n    var arr = document.cookie.match(new RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\"));  \n    if(arr != null) \n\t    return decodeURI(arr[2]);\n    return null;  \n} \n```\n说一说，上面的正则表达式吧。\n```\nnew RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\")\n```\n+ `^`以什么开头，所以`(^| )\"+name+\"`就是以`\"name\"`或者`\" name\"`开头的\n+ `[^;]*`匹配除了`;`以外的任意字符\n+ `$`以什么结尾，所以`(;|$)`就是以`\";\"`或者`\"\"`结尾\n+ `decodeURI()`函数可对`encodeURI()` 函数编码过的 URI 进行解码\n\n上述例子，还使用了一个技巧就是`()`进行分组，得到的正则表达式结果就是一个`Array`类型，每个`()`包括的部分都是数组的一部分，`index`从1开始。\n+ `arr[0]`是匹配的整个结果。\n+ `arr[1]`是`\"\"`或者`\" \"`\n+ `arr[2]`是我们要获取`name`的`value`值\n+ `arr[4]`是是`\"\"`或者`\";\"`\n\n## 结语\n\n介绍JS操作`cookie`的文章网上也有很多，本文不胜详尽，只是列出了我熟悉的一部分。\n","source":"_posts/JavaScript对于cookie的读、写操作.md","raw":"---\ntitle: JavaScript对于cookie的读、写操作\ndate: 2016-10-27 16:58:52\ntags: [JavaScipt, cookie]\n---\n\n\n前端开发中，不可避免的总要接触`session`、`cookie`这些网络数据打交道进行一些操作。\n所以说作为一个前端er,\n如果不会操作`cookie`，怎么好意思呐。\n接下来，我们就来讲讲对于`cookie`的读写...\n\n<!--more-->\n## `cookie`的操作\n\n### 写入`cookie`\n\n```  \nfunction setCookie(cName, cValue, days) {  \n    var expires = new Date();  \n    expires.setTime(expires.getTime() + parseInt(days) * 24 * 60 * 60 * 1000);  \n    document.cookie = cName + \"=\" + escape(cValue) + \";expires=\" + expires.toGMTString()+\";path=/;domain=xxx.cn\";  \n};  \n```\n这个函数也十分简单,我们可以设置`cookie`的名字、值以及有效期。\n**注**：我们并没有重写这个`cookie`，这是添加了我们设置的`cookie`。\n+ `expires`: cookie的过期时间，注意这里要使用格林威治时间\n+ `path`: 这个参数表示cookie保存的路径，如果没有给出的话会保存为当前站点的，如果给出值\"/\"的话会保存到当前虚拟目录\n+ `domain`: 这个参数有点类似于session的保存路径，默认情况下保存在当前客户端,也可以自定义到其他位置\n\n### 读取`cookie`\n\n```       \nfunction getCookie(name){    \n    var arr = document.cookie.match(new RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\"));  \n    if(arr != null) \n\t    return decodeURI(arr[2]);\n    return null;  \n} \n```\n说一说，上面的正则表达式吧。\n```\nnew RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\")\n```\n+ `^`以什么开头，所以`(^| )\"+name+\"`就是以`\"name\"`或者`\" name\"`开头的\n+ `[^;]*`匹配除了`;`以外的任意字符\n+ `$`以什么结尾，所以`(;|$)`就是以`\";\"`或者`\"\"`结尾\n+ `decodeURI()`函数可对`encodeURI()` 函数编码过的 URI 进行解码\n\n上述例子，还使用了一个技巧就是`()`进行分组，得到的正则表达式结果就是一个`Array`类型，每个`()`包括的部分都是数组的一部分，`index`从1开始。\n+ `arr[0]`是匹配的整个结果。\n+ `arr[1]`是`\"\"`或者`\" \"`\n+ `arr[2]`是我们要获取`name`的`value`值\n+ `arr[4]`是是`\"\"`或者`\";\"`\n\n## 结语\n\n介绍JS操作`cookie`的文章网上也有很多，本文不胜详尽，只是列出了我熟悉的一部分。\n","slug":"JavaScript对于cookie的读、写操作","published":1,"updated":"2016-10-27T09:44:35.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ94wzef00030gpusc3m6pe6","content":"<p>前端开发中，不可避免的总要接触<code>session</code>、<code>cookie</code>这些网络数据打交道进行一些操作。<br>所以说作为一个前端er,<br>如果不会操作<code>cookie</code>，怎么好意思呐。<br>接下来，我们就来讲讲对于<code>cookie</code>的读写…</p>\n<a id=\"more\"></a>\n<h2 id=\"cookie的操作\"><a href=\"#cookie的操作\" class=\"headerlink\" title=\"cookie的操作\"></a><code>cookie</code>的操作</h2><h3 id=\"写入cookie\"><a href=\"#写入cookie\" class=\"headerlink\" title=\"写入cookie\"></a>写入<code>cookie</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function setCookie(cName, cValue, days) &#123;  </div><div class=\"line\">    var expires = new Date();  </div><div class=\"line\">    expires.setTime(expires.getTime() + parseInt(days) * 24 * 60 * 60 * 1000);  </div><div class=\"line\">    document.cookie = cName + &quot;=&quot; + escape(cValue) + &quot;;expires=&quot; + expires.toGMTString()+&quot;;path=/;domain=xxx.cn&quot;;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个函数也十分简单,我们可以设置<code>cookie</code>的名字、值以及有效期。<br><strong>注</strong>：我们并没有重写这个<code>cookie</code>，这是添加了我们设置的<code>cookie</code>。</p>\n<ul>\n<li><code>expires</code>: cookie的过期时间，注意这里要使用格林威治时间</li>\n<li><code>path</code>: 这个参数表示cookie保存的路径，如果没有给出的话会保存为当前站点的，如果给出值”/“的话会保存到当前虚拟目录</li>\n<li><code>domain</code>: 这个参数有点类似于session的保存路径，默认情况下保存在当前客户端,也可以自定义到其他位置</li>\n</ul>\n<h3 id=\"读取cookie\"><a href=\"#读取cookie\" class=\"headerlink\" title=\"读取cookie\"></a>读取<code>cookie</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getCookie(name)&#123;    </div><div class=\"line\">    var arr = document.cookie.match(new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;));  </div><div class=\"line\">    if(arr != null) </div><div class=\"line\">\t    return decodeURI(arr[2]);</div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说一说，上面的正则表达式吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;)</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>^</code>以什么开头，所以<code>(^| )&quot;+name+&quot;</code>就是以<code>&quot;name&quot;</code>或者<code>&quot; name&quot;</code>开头的</li>\n<li><code>[^;]*</code>匹配除了<code>;</code>以外的任意字符</li>\n<li><code>$</code>以什么结尾，所以<code>(;|$)</code>就是以<code>&quot;;&quot;</code>或者<code>&quot;&quot;</code>结尾</li>\n<li><code>decodeURI()</code>函数可对<code>encodeURI()</code> 函数编码过的 URI 进行解码</li>\n</ul>\n<p>上述例子，还使用了一个技巧就是<code>()</code>进行分组，得到的正则表达式结果就是一个<code>Array</code>类型，每个<code>()</code>包括的部分都是数组的一部分，<code>index</code>从1开始。</p>\n<ul>\n<li><code>arr[0]</code>是匹配的整个结果。</li>\n<li><code>arr[1]</code>是<code>&quot;&quot;</code>或者<code>&quot; &quot;</code></li>\n<li><code>arr[2]</code>是我们要获取<code>name</code>的<code>value</code>值</li>\n<li><code>arr[4]</code>是是<code>&quot;&quot;</code>或者<code>&quot;;&quot;</code></li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>介绍JS操作<code>cookie</code>的文章网上也有很多，本文不胜详尽，只是列出了我熟悉的一部分。</p>\n","excerpt":"<p>前端开发中，不可避免的总要接触<code>session</code>、<code>cookie</code>这些网络数据打交道进行一些操作。<br>所以说作为一个前端er,<br>如果不会操作<code>cookie</code>，怎么好意思呐。<br>接下来，我们就来讲讲对于<code>cookie</code>的读写…</p>","more":"<h2 id=\"cookie的操作\"><a href=\"#cookie的操作\" class=\"headerlink\" title=\"cookie的操作\"></a><code>cookie</code>的操作</h2><h3 id=\"写入cookie\"><a href=\"#写入cookie\" class=\"headerlink\" title=\"写入cookie\"></a>写入<code>cookie</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function setCookie(cName, cValue, days) &#123;  </div><div class=\"line\">    var expires = new Date();  </div><div class=\"line\">    expires.setTime(expires.getTime() + parseInt(days) * 24 * 60 * 60 * 1000);  </div><div class=\"line\">    document.cookie = cName + &quot;=&quot; + escape(cValue) + &quot;;expires=&quot; + expires.toGMTString()+&quot;;path=/;domain=xxx.cn&quot;;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个函数也十分简单,我们可以设置<code>cookie</code>的名字、值以及有效期。<br><strong>注</strong>：我们并没有重写这个<code>cookie</code>，这是添加了我们设置的<code>cookie</code>。</p>\n<ul>\n<li><code>expires</code>: cookie的过期时间，注意这里要使用格林威治时间</li>\n<li><code>path</code>: 这个参数表示cookie保存的路径，如果没有给出的话会保存为当前站点的，如果给出值”/“的话会保存到当前虚拟目录</li>\n<li><code>domain</code>: 这个参数有点类似于session的保存路径，默认情况下保存在当前客户端,也可以自定义到其他位置</li>\n</ul>\n<h3 id=\"读取cookie\"><a href=\"#读取cookie\" class=\"headerlink\" title=\"读取cookie\"></a>读取<code>cookie</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getCookie(name)&#123;    </div><div class=\"line\">    var arr = document.cookie.match(new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;));  </div><div class=\"line\">    if(arr != null) </div><div class=\"line\">\t    return decodeURI(arr[2]);</div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说一说，上面的正则表达式吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;)</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>^</code>以什么开头，所以<code>(^| )&quot;+name+&quot;</code>就是以<code>&quot;name&quot;</code>或者<code>&quot; name&quot;</code>开头的</li>\n<li><code>[^;]*</code>匹配除了<code>;</code>以外的任意字符</li>\n<li><code>$</code>以什么结尾，所以<code>(;|$)</code>就是以<code>&quot;;&quot;</code>或者<code>&quot;&quot;</code>结尾</li>\n<li><code>decodeURI()</code>函数可对<code>encodeURI()</code> 函数编码过的 URI 进行解码</li>\n</ul>\n<p>上述例子，还使用了一个技巧就是<code>()</code>进行分组，得到的正则表达式结果就是一个<code>Array</code>类型，每个<code>()</code>包括的部分都是数组的一部分，<code>index</code>从1开始。</p>\n<ul>\n<li><code>arr[0]</code>是匹配的整个结果。</li>\n<li><code>arr[1]</code>是<code>&quot;&quot;</code>或者<code>&quot; &quot;</code></li>\n<li><code>arr[2]</code>是我们要获取<code>name</code>的<code>value</code>值</li>\n<li><code>arr[4]</code>是是<code>&quot;&quot;</code>或者<code>&quot;;&quot;</code></li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>介绍JS操作<code>cookie</code>的文章网上也有很多，本文不胜详尽，只是列出了我熟悉的一部分。</p>"},{"title":"Lodash学习--数组篇","date":"2016-11-08T06:46:33.000Z","_content":"\n**Lodash**是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。还有一个类似的库是**underscore**，不过**underscore**不能按需加载。\n朋友说：这种工具库，平时都是先用先写的。\n不过我觉得，还是很有必要学习一下的，看下源码的实现。\n本文主要是对**Lodash**的API,用自己理解的方式做一下说明。可能理解有误，不过还是要记录下来，当再用的时候有据可查。\n\n<!--more-->\n\n### `_.chunk`\n+ `_.chunk(array, [size=1])`\n\n将数组进行分块，按照`size`指定的长度，默认长度`1`\n\n### `_.compact`\n+ `_.compact(array)`\n\n剔除数组中没有意义的值，比如`false, null, 0, \"\", undefined 和 NaN` \n\n### `_.concat`\n+ `_.concat(array, [values])`\n\n创建一个新的数组来保存原始数组，增加值/数组之后的结果\n\n例子：\n```\nvar array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n \nconsole.log(other);\n// => [1, 2, 3, [4]]\n \nconsole.log(array);\n// => [1]\n```\n\n###  `_.difference`\n+ `_.difference(array, [values])`\n\n这个函数就比较复杂了，就想看一下源码，发现嵌套的函数太多。就投机取巧直接测试吧。这个函数，大概的作用就是将`array`和`[values]`进行比较，将`array`中比`[values]`中多出的值，保存到一个新的数组中。\n\n例子：\n```\n//官网就比较敷衍了\n_.difference([2, 1], [2, 3]);\n// => [1]\n\n//下面是我做的一些测试\n_.difference([1, 1, \"1\", 2, 2], [1]);\n// => [\"1\", 2, 2]\n// 只要array中比[values]中多出的值，都会返回，不管个数出现了几次\n```\n\n### `_.differenceBy`\n+ `_.differenceBy(array, [values], [iteratee=_.identity])`\n\n这个方法就是在`_.difference`方法的基础上，增加了一个参数。反正是看了一会，才看明白这个第三个参数，怎么工作的。\n\n例子：\n```\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n \n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n第一个官方例子，就是看了半天没看懂。我以为是先`_.difference`在对得到的结果进行`Math.floor`运算，其实是想错了。 如果这么工作的话，就没必要设计`_.differenceBy`了，直接用`_.difference.xx()`就可以，所以我一开始的想当然是有问题的。\n正确地工作步骤是，对前两个参数，分别执行第三个参数过滤，然后再比较找出`array`中比`[values]`中多出的部分，然后返回这些多余部分的原始值的一个数组。\n就拿第一个说吧，执行过滤之后是`[2,1]`和`[2,3]`，应该是返回`[1]`的原始值`[1.2]`，就酱。\n\n### `_.differenceWith`\n+ `_.differenceWith(array, [values], [comparator])`\n\n没太看懂。。。\n\n\n### `_.drop`\n+ `_.drop(array, [n=1])`\n\n我理解的是抛弃前n个数组元素，返回剩下的数组元素，默认抛弃第一个。\n\n例子：\n```\n_.drop([1, 2, 3]);\n// => [2, 3]\n \n_.drop([1, 2, 3], 2);\n// => [3]\n \n_.drop([1, 2, 3], 5);\n// => []\n \n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n```\n\n### `_.dropRight`\n+ `_.dropRight(array, [n=1])`\n\n`_.dropRight`和`_.drop`功能是一样的，就是`_.drop`是从后往前抛弃n个数组元素，默认抛弃最后一个。\n\n例子：\n```\n_.dropRight([1, 2, 3]);\n// => [1, 2]\n \n_.dropRight([1, 2, 3], 2);\n// => [1]\n \n_.dropRight([1, 2, 3], 5);\n// => []\n \n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]\n```\n\n### `_.dropRightWhile`\n+ `_.dropRightWhile(array, [predicate=_.identity])`\n\n从尾端查询数组`array`，第一个不满足`predicate`条件的元素开始截取数组。\n参数`predicate`提供的是一个属性名称，就通过提供的参数使用`_.property`方法返回一个回调函数。\n参数`predicate`提供的是一个对象，就用`_.matches`方法匹配相同的元素，相同返回`true`，不同返回`false`。\n参数`predicate`也可以提供一个函数，该函数有三个参数`value, index, array`\n\n`_.dropRightWhile`这个函数还牵扯到另外两个函数，`_.property`和`_.matches`。\n\n例子： \n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n \n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n \n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n```\n\n### `_.dropWhile`\n+ `_.dropWhile(array, [predicate=_.identity])`\n\n这个方法与上面`_.dropRightWhile`不同之处，是从数组的首端开始查询。\n\n### `_.fill`\n+ `_.fill(array, value, [start=0], [end=array.length])`\n\n将`value`填充到`array`中，`start`默认为0，`end`默认为`array.length`。这个就比较好理解了。\n\n例子：\n```\nvar array = [1, 2, 3];\n \n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n \n_.fill(Array(3), 2);\n// => [2, 2, 2]\n \n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n```\n\n### `_.findIndex`\n+ `_.findIndex(array, [predicate=_.identity], [fromIndex=0])`\n\n返回满足`predicate`条件的一个`array`数组的`index`，也可以指定从哪里开始查询，没找到满足条件的返回`-1`\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n \n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2\n```\n\n### `_.findLastIndex`\n+ `_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length -1])`\n\n和`_.findIndex`基本相同，不过`_.findLastIndex`是从尾部往首部开始查找。\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n \n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n \n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0\n```\n\n### `_.flatten`\n+ `_.flatten(array)`\n\n这个函数的作用是将`array`减少一个维度。\n\n例子： \n```\n_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n```\n\n### `_.flattenDeep`\n+ `_.flattenDeep(array)`\n\n相当于递归执行`_.flatten`，最终将`array`变成一维数组。\n\n例子：\n```\n_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n```\n\n### `_.flattenDepth`\n+ `_.flattenDepth(array, [depth=1])`\n\n相当于指定执行`_.flattenDepth``depth`次，默认`depth`为1。\n\n例子：\n```\nvar array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n```\n\n### `_.fromPairs`\n+ `_.fromPairs(pairs)`\n\n将`pairs`键值对转换成一个对象。\n\n例子：\n```\n_.fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }\n\n_.fromPairs([['a', 1], ['b', 2], ['c', ['d', 4]]]);\n// => { 'a': 1, 'b': 2, 'c': [ 'd', 4 ] }\n```\n\n### `_.head`\n+ `_.head(array)`\n\n返回`array`的第一个元素，别名`_.first`\n\n例子：\n```\n_.head([1, 2, 3]);\n// => 1\n \n_.head([]);\n// => undefined\n\n_.head([[1, 4], 2, 3]);\n// => [1, 4]\n```\n\n### `_.last`\n+ `_.last(array)`\n\n返回`array`的最后一个元素。\n\n例子： \n```\n_.last([1, 2, 3]);\n// => 3\n```\n\n### `_.nth`\n+ `_.nth(array, [n=0])`\n\n获取指定`index`的`array`数组元素。\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'd'];\n \n_.nth(array, 1);\n// => 'b'\n \n_.nth(array, -2);\n// => 'c';\n```\n\n### `_.tail`\n+ `_.tail(array)`\n\n返回去除第一个元素的数组。\n\n例子：\n```\n_.tail([1, 2, 3]);\n// => [2, 3]\n```\n\n### `_.indexOf`\n+ `_.indexOf(array, value, [fromIndex=0])`\n\n在`array`中查找`value`，返回找到的第一个匹配的`index`，没找到则返回`-1`，第三个参数`fromIndex`指定查找的起始位置，默认为0；\n\n例子：\n```\n_.indexOf([1, 2, 1, 2], 2);\n// => 1\n\n_.indexOf([1, 2, 1, 2], 3);\n// => -1\n \n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3\n```\n\n### `_.lastIndexOf`\n+ `_.lastIndexOf(array, value, [fromIndex=array.length-1])`\n\n和`_.indexOf`方法一样，不过是从尾部开始查找。\n\n例子：\n```\n_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n \n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1\n```\n\n### `_.initial`\n+ `_.initial(array)`\n\n去除`array`最后一个元素，并返回。\n\n例子：\n```\n_.initial([1, 2, 3]);\n// => [1, 2]\n\n_.initial([1, 2, 3, [4, 5]]);\n// => [1, 2, 3]\n```\n\n### `_.intersection`\n+ `_.intersection([arrays])`\n\n取出各数组中全等的元素，使用`SameValueZero`方式平等比较。\n\n例子：\n```\n_.intersection([2, 1], [2, 3]);\n// => [2]\n\n_.intersection([1, 2], [4, 2], [2, 1]);\n// => [2]\n```\n\n### `_.intersectionBy`\n+ `_.intersectionBy([arrays], [iteratee=_.identity])`\n\n`_.intersectionBy`就是在`_.intersection`的基础上接受了一个`iteratee`迭代器，生成了一个比较的标准，类似于`_.differenceBy`。\n\n例子：\n```\n_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n \n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n```\n\n### `_.intersectionWith`\n+ `_.intersectionWith([arrays], [comparator])`\n\n这个函数和`_.differenceWith`差不多，一样没太看懂。\n先略过。\n\n### `_.join`\n+ `_.join(array, [separator=','])`\n\n将`array`转换成字符串类型并通过`separator`分隔开，默认使用`,`分隔。\n\n例子：\n```\n_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'\n\n_.join(['a', 'b', 'c', ['d', 'e']], '-');\n// => 'a-b-c-d,e'\n```\n\n### `_.pull`\n+ `_.pull(array, [values])`\n\n移除`array`中所有的指定`values`，需要注意的是这个函数会对原始`array`做修改。\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']\n```\n\n### `_.pullAll`\n+ `_.pullAll(array, values)`\n\n`_.pullAll`方法应该是`_.pull`方法的升级，这个方法是在**Lodash 4.0.0**中提出的。\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']\n```\n\n### `_.pullAllBy`\n+ `_.pullAllBy(array, values, [iteratee=_.identity])`\n\n`_.pullAllBy`方法很像`_.pullAll`方法，除了可以接受一个迭代器`iteratee`，为每一个数组元素执行迭代器并生成一个比较的标准，这个迭代器调用一个参数`value`。\n**注**：原始数组改变\n\n例子：\n```\nvar array1 = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n \n_.pullAllBy(array1, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]\n\nvar array2 = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }, { 'y': 4}];\n \n_.pullAllBy(array, [{ 'x': 1 }], 'y');\nconsole.log(array);\n// => [{ 'y': 4 }]\n```\n\n### `_.pullAllWith`\n+ `_.pullAllWith(array, values, [comoarator])`\n\n这个跳过。。。\n\n### `_.pullAt`\n+ `_.pullAt(array, [indexes])`\n\n移除相应`index`的元素，返回被移除元素的数组。\n**注**：原始数组改变\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'd'];\nvar pulled = _.pullAt(array, [1, 3]);\n \nconsole.log(array);\n// => ['a', 'c']\n \nconsole.log(pulled);\n// => ['b', 'd']\n```\n\n### `_.remove`\n+ `_.remove(array, [predicate=_.identity])`\n\n移除所有`predicate`返回**真**的数组元素，并返回被移除的数组元素。`predicate`调用三个参数`value, index, array`。\n\n例子：\n```\nvar array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n \nconsole.log(array);\n// => [1, 3]\n \nconsole.log(evens);\n// => [2, 4]\n```\n\n### `_.reverse`\n+ `_.reverse(array)`\n\n这个就比较简单了，是一个反序排列的方法，也会对原始方法进行更改\n\n例子：\n```\nvar array = [1, 2, 3];\n \n_.reverse(array);\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1]\n```\n\n### `_.slice`\n+ `_.slice(array, [start=0], [end=array.length])`\n\n对数组进行分割。\n\n例子：\n```\nvar array = [1, 2, 3];\n \n_.slice(array, 1, 2);\n// => [2]\n```\n\n### `_.sortedIndex`\n+ `_.sortedIndex(array, value)`\n向一个有序数组中插入一个`value`，将返回这个值插入之后的有序位置。（使用二分查找）\n\n例子：\n```\n_.sortedIndex([30, 50], 40);\n// => 1\n\n_.sortedIndex([30, 50], 30);\n// => 0\n```\n\n### `_.sortedIndexBy`\n+ `_.sortedIndexBy(array, value, [iteratee=_.identity])`\n\n凡是带`By`的方法方法，都是这种结构的函数。\n`_.sortIndexBy`比`_.sortIndex`方法多一个参数，接收一个迭代器`iteratee`去计算排序，这个`iteratee`调用一个参数`value`。\n\n例子：\n```\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0\n```\n\n### `_.sortedIndexOf`\n+ `_.sortedIndexOf(array, value)`\n\n这个方法很像`_.indexOf`，`_.sortedIndexOf`是对一个有序数组进行二分查找。\n\n例子：\n```\n_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1\n```\n\n### `_.sortedLastIndex`\n+ `_.sortedLastIndex(array, value)`\n\n这个方法很像`_.sortedIndex`，这个方法在保持有序的前提下会把`value`插进最大的那个位置。\n\n例子：\n```\n_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4\n```\n\n### `_.sortedLastIndexBy`\n+ `_.sortedLastIndexBy(array, value, [iteratee=_.identity])`\n\n这个方法很像`_.sortedLastIndex`，只不过多了一个参数`iteratee`,这个迭代器为每个元素值计算他们的排序，这个迭代器调用一个参数`value`。返回应该被插入后的数组下标。\n\n例子：\n```\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n \n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1\n```\n\n### `_.sortedLastIndexOf`\n+ `_.sortedLastIndexOf(array, value)`\n\n这个方法很像`_.lastIndexOf`，只不过它对一个有序数组进行二分查找。\n\n例子：\n```\n_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3\n```\n\n### `_.sortedUniq`\n+ `_.sortedUniq(array)`\n\n这个方法很像`_.uniq`，这个方法是为了有序数组设计且优化的，返回一个去重的数组。\n\n例子：\n```\n_.sortedUniq([1, 1, 2]);\n// => [1, 2]\n```\n\n### `_.sortedUniqBy`\n+ `_.sortedUniqBy(array, [iteratee])`\n\n这个方法很像`_.uniqBy`，它返回经过`iteratee`计算之后，去除重复值，只返回重复值的第一个原值和不重复值组成的有序数组。\n\n例子：\n```\n_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]\n```\n\n### `_.take`\n+ `_.take(array, [n=1])`\n\n创建一个分割后的数组，从`array`数组的开始到第`n`个元素。\n\n例子：\n```\n_.take([1, 2, 3]);\n// => [1]\n \n_.take([1, 2, 3], 2);\n// => [1, 2]\n \n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.take([1, 2, 3], 0);\n// => []\n```\n\n### `_.takeRight`\n+ `_.takeRight(array, [n=1])`\n\n创建一个分割后的数组，从`array`数组的结尾开始，分割`n`个元素出来。\n\n例子：\n```\n_.takeRight([1, 2, 3]);\n// => [3]\n \n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n \n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.takeRight([1, 2, 3], 0);\n// => []\n```\n\n### `_.takeRightWhile`\n+ `_.takeRightWhile(array, [predicate=_.identity])`\n\n同样是从`array`结尾开始分割数组，不过是通过`predicate`控制，直到返回**falsey**停止。`predicate`调用三个参数`value, index, array`\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n \n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n \n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []\n```\n\n### `_.takeWhile`\n+ `_.takeWhile(array, [predivate=_.identity])`\n\n是从`array`开头开始分割数组，不过是通过`predicate`控制，直到返回**falsey**停止。`predicate`调用三个参数`value, index, array`\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false},\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n \n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n \n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []\n```\n\n### `_.union`\n+ `_.union([arrays])`\n\n创建一个没有重复值的数组，组合所有被传入的数组元素。\n\n例子：\n```\n_.union([2], [1, 2]);\n// => [2, 1]\n```\n\n### `_.unionBy`\n+ `_.unionBy([arrays], [iteratee=_.identity])`\n\n通过`iteratee`对每个元素值进行执行，生成一个唯一性的标准，并选择第一个出现的值，作为要返回的值，去除重复的元素。`iteratee`调用一个参数`value`。\n\n例子：\n```\n_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n\n### `_.unionWith`\n+ `_.unionWith([arrays], [comparator])`\n\n这个没太看懂。。。\n\n例子：\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n### `_.uniq`\n+ `_.uniq(array)`\n\n数组去重。\n\n例子：\n```\n_.uniq([2, 1, 2]);\n// => [2, 1]\n```\n\n### `_.uniqBy`\n+ `_.uniqBy(array, [iteratee=_.identity])`\n\n这个方法是有条件的数组去重，通过`iteratee`迭代器生成一个唯一性的标准。`iteratee`调用一个参数`value`.\n\n例子：\n```\n_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n\n### `_.uniqWith`\n+ `_.uniqWith(array, [comparator])`\n\n没太分清`_.uniqWith`和`_.uniqBy`之间有什么区别。`_.uniqWith`传入的是一个比较器。`comparator`调用两个参数`arrVal, othVal`。\n\n例子：\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n```\n\n### `_.without`\n+ `_.without(array, [values])`\n\n创建一个新的数组，去除所有传入的`values`。\n\n例子：\n```\n_.without([2, 1, 2, 3], 1, 2);\n// => [3]\n```\n\n### `_.xor`\n+ `_.xor([arrays])`\n\n**xor**就是异或，相同为0，不同为1，1为`true`，应该被返回。\n创建一个唯一值的数组，返回被给数组之间对称差（没有交集的部分）的元素。结果值的顺序由它们在数组中出现的顺序确定。\n\n例子：\n```\n_.xor([2, 1, 4], [2, 3, 5]);\n// => [1, 4, 3, 5]\n\n_.xor([2, 2, 3], [4, 4, 5, 6]);\n// => [2, 3, 4, 5, 6]\n```\n\n### `_.xorBy`\n+ `_.xorBy([arrays], [iteratee=_.identity])`\n\n有条件的`_.xor`方法，和所有`_.xxBy`方法一样，接收一个`iteratee`方法生成一个标准，`iteratee`接受一个参数`value`。\n\n例子：\n```\n_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n \n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n\n### `_.xorWith`\n+ `_.xorWith([arrays], [comparator])`\n\n这个方法类似于`_.xor`，除了它接受比较器`comparator`，它被调用来比较数组的元素。结果值的顺序由它们在数组中出现的顺序确定。`comparator`调用两个参数`arrVal，othVal`。\n\n例子：\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n### `_.zip`\n+ `_.zip([arrays])`\n\n创建一个元素组数组，把每个传入数组，第一个元素组合到一起，第二个元素组合在一起，以此类推。\n\n例子：\n```\n_.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\n_.zip(['a', 'b'], [1], [true, false]);\n// => [['a', 1, true], ['b', undefined, false]]\n```\n### `_.unzip`\n+ `_.unzip(array)`\n\n就是把`_.zip`函数打包好的，或是元素组数组，对其进行解包。\n\n例子：\n```\nvar zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n \n_.unzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]\n```\n\n### `_.zipObject`\n+ `_.zipObject([props=[]], [values=[]])`\n\n这个方法很像`_.fromPairs`，`_.zipObject`接受两个数组，一个属性数组和一个相应的对应值数组。\n\n例子：\n```\n_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n\n_.zipObject(['a', 'b'], [1]);\n// => { 'a': 1, 'b': undefined }\n```\n\n### `_.zipObjectDeep`\n+ `_.zipObjectDeep([props=[]], [values=[]])\n\n这个方法像`_.zipObject`方法一样，不过它支持属性路径`property paths`\n\n例子：\n```\n_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n```\n\n### `_.zipWith`\n+ `_.zipWith([arrays], [iteratee=_.identity])`\n\n这个方法像类似`_.zip`，接受一个迭代器`iteratee`去指定怎么如何组合分组值。这个迭代器为每个组的元素调用`...group`，还是看例子比较直观。\n\n例子：\n```\n_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [111, 222]\n```\n\n### `_.unzipWith`\n+ `_.unzipWith(array, [iteratee=_.identity])`\n\n这个方法很像`_.unzip`，它接受一个迭代器`iteratee`去指定怎样重组组合值。`iteratee`调用一个参数`...group`。\n\n例子：\n```\nvar zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n \n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]\n```\n","source":"_posts/Lodash学习-数组篇.md","raw":"---\ntitle: Lodash学习--数组篇\ndate: 2016-11-08 14:46:33\ntags: lodash\n---\n\n**Lodash**是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。还有一个类似的库是**underscore**，不过**underscore**不能按需加载。\n朋友说：这种工具库，平时都是先用先写的。\n不过我觉得，还是很有必要学习一下的，看下源码的实现。\n本文主要是对**Lodash**的API,用自己理解的方式做一下说明。可能理解有误，不过还是要记录下来，当再用的时候有据可查。\n\n<!--more-->\n\n### `_.chunk`\n+ `_.chunk(array, [size=1])`\n\n将数组进行分块，按照`size`指定的长度，默认长度`1`\n\n### `_.compact`\n+ `_.compact(array)`\n\n剔除数组中没有意义的值，比如`false, null, 0, \"\", undefined 和 NaN` \n\n### `_.concat`\n+ `_.concat(array, [values])`\n\n创建一个新的数组来保存原始数组，增加值/数组之后的结果\n\n例子：\n```\nvar array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n \nconsole.log(other);\n// => [1, 2, 3, [4]]\n \nconsole.log(array);\n// => [1]\n```\n\n###  `_.difference`\n+ `_.difference(array, [values])`\n\n这个函数就比较复杂了，就想看一下源码，发现嵌套的函数太多。就投机取巧直接测试吧。这个函数，大概的作用就是将`array`和`[values]`进行比较，将`array`中比`[values]`中多出的值，保存到一个新的数组中。\n\n例子：\n```\n//官网就比较敷衍了\n_.difference([2, 1], [2, 3]);\n// => [1]\n\n//下面是我做的一些测试\n_.difference([1, 1, \"1\", 2, 2], [1]);\n// => [\"1\", 2, 2]\n// 只要array中比[values]中多出的值，都会返回，不管个数出现了几次\n```\n\n### `_.differenceBy`\n+ `_.differenceBy(array, [values], [iteratee=_.identity])`\n\n这个方法就是在`_.difference`方法的基础上，增加了一个参数。反正是看了一会，才看明白这个第三个参数，怎么工作的。\n\n例子：\n```\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n \n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n第一个官方例子，就是看了半天没看懂。我以为是先`_.difference`在对得到的结果进行`Math.floor`运算，其实是想错了。 如果这么工作的话，就没必要设计`_.differenceBy`了，直接用`_.difference.xx()`就可以，所以我一开始的想当然是有问题的。\n正确地工作步骤是，对前两个参数，分别执行第三个参数过滤，然后再比较找出`array`中比`[values]`中多出的部分，然后返回这些多余部分的原始值的一个数组。\n就拿第一个说吧，执行过滤之后是`[2,1]`和`[2,3]`，应该是返回`[1]`的原始值`[1.2]`，就酱。\n\n### `_.differenceWith`\n+ `_.differenceWith(array, [values], [comparator])`\n\n没太看懂。。。\n\n\n### `_.drop`\n+ `_.drop(array, [n=1])`\n\n我理解的是抛弃前n个数组元素，返回剩下的数组元素，默认抛弃第一个。\n\n例子：\n```\n_.drop([1, 2, 3]);\n// => [2, 3]\n \n_.drop([1, 2, 3], 2);\n// => [3]\n \n_.drop([1, 2, 3], 5);\n// => []\n \n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n```\n\n### `_.dropRight`\n+ `_.dropRight(array, [n=1])`\n\n`_.dropRight`和`_.drop`功能是一样的，就是`_.drop`是从后往前抛弃n个数组元素，默认抛弃最后一个。\n\n例子：\n```\n_.dropRight([1, 2, 3]);\n// => [1, 2]\n \n_.dropRight([1, 2, 3], 2);\n// => [1]\n \n_.dropRight([1, 2, 3], 5);\n// => []\n \n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]\n```\n\n### `_.dropRightWhile`\n+ `_.dropRightWhile(array, [predicate=_.identity])`\n\n从尾端查询数组`array`，第一个不满足`predicate`条件的元素开始截取数组。\n参数`predicate`提供的是一个属性名称，就通过提供的参数使用`_.property`方法返回一个回调函数。\n参数`predicate`提供的是一个对象，就用`_.matches`方法匹配相同的元素，相同返回`true`，不同返回`false`。\n参数`predicate`也可以提供一个函数，该函数有三个参数`value, index, array`\n\n`_.dropRightWhile`这个函数还牵扯到另外两个函数，`_.property`和`_.matches`。\n\n例子： \n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n \n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n \n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n```\n\n### `_.dropWhile`\n+ `_.dropWhile(array, [predicate=_.identity])`\n\n这个方法与上面`_.dropRightWhile`不同之处，是从数组的首端开始查询。\n\n### `_.fill`\n+ `_.fill(array, value, [start=0], [end=array.length])`\n\n将`value`填充到`array`中，`start`默认为0，`end`默认为`array.length`。这个就比较好理解了。\n\n例子：\n```\nvar array = [1, 2, 3];\n \n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n \n_.fill(Array(3), 2);\n// => [2, 2, 2]\n \n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n```\n\n### `_.findIndex`\n+ `_.findIndex(array, [predicate=_.identity], [fromIndex=0])`\n\n返回满足`predicate`条件的一个`array`数组的`index`，也可以指定从哪里开始查询，没找到满足条件的返回`-1`\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n \n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2\n```\n\n### `_.findLastIndex`\n+ `_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length -1])`\n\n和`_.findIndex`基本相同，不过`_.findLastIndex`是从尾部往首部开始查找。\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n \n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n \n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0\n```\n\n### `_.flatten`\n+ `_.flatten(array)`\n\n这个函数的作用是将`array`减少一个维度。\n\n例子： \n```\n_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n```\n\n### `_.flattenDeep`\n+ `_.flattenDeep(array)`\n\n相当于递归执行`_.flatten`，最终将`array`变成一维数组。\n\n例子：\n```\n_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n```\n\n### `_.flattenDepth`\n+ `_.flattenDepth(array, [depth=1])`\n\n相当于指定执行`_.flattenDepth``depth`次，默认`depth`为1。\n\n例子：\n```\nvar array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n```\n\n### `_.fromPairs`\n+ `_.fromPairs(pairs)`\n\n将`pairs`键值对转换成一个对象。\n\n例子：\n```\n_.fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }\n\n_.fromPairs([['a', 1], ['b', 2], ['c', ['d', 4]]]);\n// => { 'a': 1, 'b': 2, 'c': [ 'd', 4 ] }\n```\n\n### `_.head`\n+ `_.head(array)`\n\n返回`array`的第一个元素，别名`_.first`\n\n例子：\n```\n_.head([1, 2, 3]);\n// => 1\n \n_.head([]);\n// => undefined\n\n_.head([[1, 4], 2, 3]);\n// => [1, 4]\n```\n\n### `_.last`\n+ `_.last(array)`\n\n返回`array`的最后一个元素。\n\n例子： \n```\n_.last([1, 2, 3]);\n// => 3\n```\n\n### `_.nth`\n+ `_.nth(array, [n=0])`\n\n获取指定`index`的`array`数组元素。\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'd'];\n \n_.nth(array, 1);\n// => 'b'\n \n_.nth(array, -2);\n// => 'c';\n```\n\n### `_.tail`\n+ `_.tail(array)`\n\n返回去除第一个元素的数组。\n\n例子：\n```\n_.tail([1, 2, 3]);\n// => [2, 3]\n```\n\n### `_.indexOf`\n+ `_.indexOf(array, value, [fromIndex=0])`\n\n在`array`中查找`value`，返回找到的第一个匹配的`index`，没找到则返回`-1`，第三个参数`fromIndex`指定查找的起始位置，默认为0；\n\n例子：\n```\n_.indexOf([1, 2, 1, 2], 2);\n// => 1\n\n_.indexOf([1, 2, 1, 2], 3);\n// => -1\n \n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3\n```\n\n### `_.lastIndexOf`\n+ `_.lastIndexOf(array, value, [fromIndex=array.length-1])`\n\n和`_.indexOf`方法一样，不过是从尾部开始查找。\n\n例子：\n```\n_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n \n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1\n```\n\n### `_.initial`\n+ `_.initial(array)`\n\n去除`array`最后一个元素，并返回。\n\n例子：\n```\n_.initial([1, 2, 3]);\n// => [1, 2]\n\n_.initial([1, 2, 3, [4, 5]]);\n// => [1, 2, 3]\n```\n\n### `_.intersection`\n+ `_.intersection([arrays])`\n\n取出各数组中全等的元素，使用`SameValueZero`方式平等比较。\n\n例子：\n```\n_.intersection([2, 1], [2, 3]);\n// => [2]\n\n_.intersection([1, 2], [4, 2], [2, 1]);\n// => [2]\n```\n\n### `_.intersectionBy`\n+ `_.intersectionBy([arrays], [iteratee=_.identity])`\n\n`_.intersectionBy`就是在`_.intersection`的基础上接受了一个`iteratee`迭代器，生成了一个比较的标准，类似于`_.differenceBy`。\n\n例子：\n```\n_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n \n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n```\n\n### `_.intersectionWith`\n+ `_.intersectionWith([arrays], [comparator])`\n\n这个函数和`_.differenceWith`差不多，一样没太看懂。\n先略过。\n\n### `_.join`\n+ `_.join(array, [separator=','])`\n\n将`array`转换成字符串类型并通过`separator`分隔开，默认使用`,`分隔。\n\n例子：\n```\n_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'\n\n_.join(['a', 'b', 'c', ['d', 'e']], '-');\n// => 'a-b-c-d,e'\n```\n\n### `_.pull`\n+ `_.pull(array, [values])`\n\n移除`array`中所有的指定`values`，需要注意的是这个函数会对原始`array`做修改。\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']\n```\n\n### `_.pullAll`\n+ `_.pullAll(array, values)`\n\n`_.pullAll`方法应该是`_.pull`方法的升级，这个方法是在**Lodash 4.0.0**中提出的。\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']\n```\n\n### `_.pullAllBy`\n+ `_.pullAllBy(array, values, [iteratee=_.identity])`\n\n`_.pullAllBy`方法很像`_.pullAll`方法，除了可以接受一个迭代器`iteratee`，为每一个数组元素执行迭代器并生成一个比较的标准，这个迭代器调用一个参数`value`。\n**注**：原始数组改变\n\n例子：\n```\nvar array1 = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n \n_.pullAllBy(array1, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]\n\nvar array2 = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }, { 'y': 4}];\n \n_.pullAllBy(array, [{ 'x': 1 }], 'y');\nconsole.log(array);\n// => [{ 'y': 4 }]\n```\n\n### `_.pullAllWith`\n+ `_.pullAllWith(array, values, [comoarator])`\n\n这个跳过。。。\n\n### `_.pullAt`\n+ `_.pullAt(array, [indexes])`\n\n移除相应`index`的元素，返回被移除元素的数组。\n**注**：原始数组改变\n\n例子：\n```\nvar array = ['a', 'b', 'c', 'd'];\nvar pulled = _.pullAt(array, [1, 3]);\n \nconsole.log(array);\n// => ['a', 'c']\n \nconsole.log(pulled);\n// => ['b', 'd']\n```\n\n### `_.remove`\n+ `_.remove(array, [predicate=_.identity])`\n\n移除所有`predicate`返回**真**的数组元素，并返回被移除的数组元素。`predicate`调用三个参数`value, index, array`。\n\n例子：\n```\nvar array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n \nconsole.log(array);\n// => [1, 3]\n \nconsole.log(evens);\n// => [2, 4]\n```\n\n### `_.reverse`\n+ `_.reverse(array)`\n\n这个就比较简单了，是一个反序排列的方法，也会对原始方法进行更改\n\n例子：\n```\nvar array = [1, 2, 3];\n \n_.reverse(array);\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1]\n```\n\n### `_.slice`\n+ `_.slice(array, [start=0], [end=array.length])`\n\n对数组进行分割。\n\n例子：\n```\nvar array = [1, 2, 3];\n \n_.slice(array, 1, 2);\n// => [2]\n```\n\n### `_.sortedIndex`\n+ `_.sortedIndex(array, value)`\n向一个有序数组中插入一个`value`，将返回这个值插入之后的有序位置。（使用二分查找）\n\n例子：\n```\n_.sortedIndex([30, 50], 40);\n// => 1\n\n_.sortedIndex([30, 50], 30);\n// => 0\n```\n\n### `_.sortedIndexBy`\n+ `_.sortedIndexBy(array, value, [iteratee=_.identity])`\n\n凡是带`By`的方法方法，都是这种结构的函数。\n`_.sortIndexBy`比`_.sortIndex`方法多一个参数，接收一个迭代器`iteratee`去计算排序，这个`iteratee`调用一个参数`value`。\n\n例子：\n```\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0\n```\n\n### `_.sortedIndexOf`\n+ `_.sortedIndexOf(array, value)`\n\n这个方法很像`_.indexOf`，`_.sortedIndexOf`是对一个有序数组进行二分查找。\n\n例子：\n```\n_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1\n```\n\n### `_.sortedLastIndex`\n+ `_.sortedLastIndex(array, value)`\n\n这个方法很像`_.sortedIndex`，这个方法在保持有序的前提下会把`value`插进最大的那个位置。\n\n例子：\n```\n_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4\n```\n\n### `_.sortedLastIndexBy`\n+ `_.sortedLastIndexBy(array, value, [iteratee=_.identity])`\n\n这个方法很像`_.sortedLastIndex`，只不过多了一个参数`iteratee`,这个迭代器为每个元素值计算他们的排序，这个迭代器调用一个参数`value`。返回应该被插入后的数组下标。\n\n例子：\n```\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n \n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1\n```\n\n### `_.sortedLastIndexOf`\n+ `_.sortedLastIndexOf(array, value)`\n\n这个方法很像`_.lastIndexOf`，只不过它对一个有序数组进行二分查找。\n\n例子：\n```\n_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3\n```\n\n### `_.sortedUniq`\n+ `_.sortedUniq(array)`\n\n这个方法很像`_.uniq`，这个方法是为了有序数组设计且优化的，返回一个去重的数组。\n\n例子：\n```\n_.sortedUniq([1, 1, 2]);\n// => [1, 2]\n```\n\n### `_.sortedUniqBy`\n+ `_.sortedUniqBy(array, [iteratee])`\n\n这个方法很像`_.uniqBy`，它返回经过`iteratee`计算之后，去除重复值，只返回重复值的第一个原值和不重复值组成的有序数组。\n\n例子：\n```\n_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]\n```\n\n### `_.take`\n+ `_.take(array, [n=1])`\n\n创建一个分割后的数组，从`array`数组的开始到第`n`个元素。\n\n例子：\n```\n_.take([1, 2, 3]);\n// => [1]\n \n_.take([1, 2, 3], 2);\n// => [1, 2]\n \n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.take([1, 2, 3], 0);\n// => []\n```\n\n### `_.takeRight`\n+ `_.takeRight(array, [n=1])`\n\n创建一个分割后的数组，从`array`数组的结尾开始，分割`n`个元素出来。\n\n例子：\n```\n_.takeRight([1, 2, 3]);\n// => [3]\n \n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n \n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.takeRight([1, 2, 3], 0);\n// => []\n```\n\n### `_.takeRightWhile`\n+ `_.takeRightWhile(array, [predicate=_.identity])`\n\n同样是从`array`结尾开始分割数组，不过是通过`predicate`控制，直到返回**falsey**停止。`predicate`调用三个参数`value, index, array`\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n \n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n \n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []\n```\n\n### `_.takeWhile`\n+ `_.takeWhile(array, [predivate=_.identity])`\n\n是从`array`开头开始分割数组，不过是通过`predicate`控制，直到返回**falsey**停止。`predicate`调用三个参数`value, index, array`\n\n例子：\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false},\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n \n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n \n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []\n```\n\n### `_.union`\n+ `_.union([arrays])`\n\n创建一个没有重复值的数组，组合所有被传入的数组元素。\n\n例子：\n```\n_.union([2], [1, 2]);\n// => [2, 1]\n```\n\n### `_.unionBy`\n+ `_.unionBy([arrays], [iteratee=_.identity])`\n\n通过`iteratee`对每个元素值进行执行，生成一个唯一性的标准，并选择第一个出现的值，作为要返回的值，去除重复的元素。`iteratee`调用一个参数`value`。\n\n例子：\n```\n_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n\n### `_.unionWith`\n+ `_.unionWith([arrays], [comparator])`\n\n这个没太看懂。。。\n\n例子：\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n### `_.uniq`\n+ `_.uniq(array)`\n\n数组去重。\n\n例子：\n```\n_.uniq([2, 1, 2]);\n// => [2, 1]\n```\n\n### `_.uniqBy`\n+ `_.uniqBy(array, [iteratee=_.identity])`\n\n这个方法是有条件的数组去重，通过`iteratee`迭代器生成一个唯一性的标准。`iteratee`调用一个参数`value`.\n\n例子：\n```\n_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n\n### `_.uniqWith`\n+ `_.uniqWith(array, [comparator])`\n\n没太分清`_.uniqWith`和`_.uniqBy`之间有什么区别。`_.uniqWith`传入的是一个比较器。`comparator`调用两个参数`arrVal, othVal`。\n\n例子：\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n```\n\n### `_.without`\n+ `_.without(array, [values])`\n\n创建一个新的数组，去除所有传入的`values`。\n\n例子：\n```\n_.without([2, 1, 2, 3], 1, 2);\n// => [3]\n```\n\n### `_.xor`\n+ `_.xor([arrays])`\n\n**xor**就是异或，相同为0，不同为1，1为`true`，应该被返回。\n创建一个唯一值的数组，返回被给数组之间对称差（没有交集的部分）的元素。结果值的顺序由它们在数组中出现的顺序确定。\n\n例子：\n```\n_.xor([2, 1, 4], [2, 3, 5]);\n// => [1, 4, 3, 5]\n\n_.xor([2, 2, 3], [4, 4, 5, 6]);\n// => [2, 3, 4, 5, 6]\n```\n\n### `_.xorBy`\n+ `_.xorBy([arrays], [iteratee=_.identity])`\n\n有条件的`_.xor`方法，和所有`_.xxBy`方法一样，接收一个`iteratee`方法生成一个标准，`iteratee`接受一个参数`value`。\n\n例子：\n```\n_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n \n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n\n### `_.xorWith`\n+ `_.xorWith([arrays], [comparator])`\n\n这个方法类似于`_.xor`，除了它接受比较器`comparator`，它被调用来比较数组的元素。结果值的顺序由它们在数组中出现的顺序确定。`comparator`调用两个参数`arrVal，othVal`。\n\n例子：\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n### `_.zip`\n+ `_.zip([arrays])`\n\n创建一个元素组数组，把每个传入数组，第一个元素组合到一起，第二个元素组合在一起，以此类推。\n\n例子：\n```\n_.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\n_.zip(['a', 'b'], [1], [true, false]);\n// => [['a', 1, true], ['b', undefined, false]]\n```\n### `_.unzip`\n+ `_.unzip(array)`\n\n就是把`_.zip`函数打包好的，或是元素组数组，对其进行解包。\n\n例子：\n```\nvar zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n \n_.unzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]\n```\n\n### `_.zipObject`\n+ `_.zipObject([props=[]], [values=[]])`\n\n这个方法很像`_.fromPairs`，`_.zipObject`接受两个数组，一个属性数组和一个相应的对应值数组。\n\n例子：\n```\n_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n\n_.zipObject(['a', 'b'], [1]);\n// => { 'a': 1, 'b': undefined }\n```\n\n### `_.zipObjectDeep`\n+ `_.zipObjectDeep([props=[]], [values=[]])\n\n这个方法像`_.zipObject`方法一样，不过它支持属性路径`property paths`\n\n例子：\n```\n_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n```\n\n### `_.zipWith`\n+ `_.zipWith([arrays], [iteratee=_.identity])`\n\n这个方法像类似`_.zip`，接受一个迭代器`iteratee`去指定怎么如何组合分组值。这个迭代器为每个组的元素调用`...group`，还是看例子比较直观。\n\n例子：\n```\n_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [111, 222]\n```\n\n### `_.unzipWith`\n+ `_.unzipWith(array, [iteratee=_.identity])`\n\n这个方法很像`_.unzip`，它接受一个迭代器`iteratee`去指定怎样重组组合值。`iteratee`调用一个参数`...group`。\n\n例子：\n```\nvar zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n \n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]\n```\n","slug":"Lodash学习-数组篇","published":1,"updated":"2016-11-08T06:47:32.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ94wzev00040gpuuakz6mxc","content":"<p><strong>Lodash</strong>是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。还有一个类似的库是<strong>underscore</strong>，不过<strong>underscore</strong>不能按需加载。<br>朋友说：这种工具库，平时都是先用先写的。<br>不过我觉得，还是很有必要学习一下的，看下源码的实现。<br>本文主要是对<strong>Lodash</strong>的API,用自己理解的方式做一下说明。可能理解有误，不过还是要记录下来，当再用的时候有据可查。</p>\n<a id=\"more\"></a>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"_.chunk\"></a><code>_.chunk</code></h3><ul>\n<li><code>_.chunk(array, [size=1])</code></li>\n</ul>\n<p>将数组进行分块，按照<code>size</code>指定的长度，默认长度<code>1</code></p>\n<h3 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"_.compact\"></a><code>_.compact</code></h3><ul>\n<li><code>_.compact(array)</code></li>\n</ul>\n<p>剔除数组中没有意义的值，比如<code>false, null, 0, &quot;&quot;, undefined 和 NaN</code> </p>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"_.concat\"></a><code>_.concat</code></h3><ul>\n<li><code>_.concat(array, [values])</code></li>\n</ul>\n<p>创建一个新的数组来保存原始数组，增加值/数组之后的结果</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1];</div><div class=\"line\">var other = _.concat(array, 2, [3], [[4]]);</div><div class=\"line\"> </div><div class=\"line\">console.log(other);</div><div class=\"line\">// =&gt; [1, 2, 3, [4]]</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"_.difference\"></a><code>_.difference</code></h3><ul>\n<li><code>_.difference(array, [values])</code></li>\n</ul>\n<p>这个函数就比较复杂了，就想看一下源码，发现嵌套的函数太多。就投机取巧直接测试吧。这个函数，大概的作用就是将<code>array</code>和<code>[values]</code>进行比较，将<code>array</code>中比<code>[values]</code>中多出的值，保存到一个新的数组中。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//官网就比较敷衍了</div><div class=\"line\">_.difference([2, 1], [2, 3]);</div><div class=\"line\">// =&gt; [1]</div><div class=\"line\"></div><div class=\"line\">//下面是我做的一些测试</div><div class=\"line\">_.difference([1, 1, &quot;1&quot;, 2, 2], [1]);</div><div class=\"line\">// =&gt; [&quot;1&quot;, 2, 2]</div><div class=\"line\">// 只要array中比[values]中多出的值，都会返回，不管个数出现了几次</div></pre></td></tr></table></figure></p>\n<h3 id=\"differenceBy\"><a href=\"#differenceBy\" class=\"headerlink\" title=\"_.differenceBy\"></a><code>_.differenceBy</code></h3><ul>\n<li><code>_.differenceBy(array, [values], [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法就是在<code>_.difference</code>方法的基础上，增加了一个参数。反正是看了一会，才看明白这个第三个参数，怎么工作的。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);</div><div class=\"line\">// =&gt; [1.2]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.differenceBy([&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<p>第一个官方例子，就是看了半天没看懂。我以为是先<code>_.difference</code>在对得到的结果进行<code>Math.floor</code>运算，其实是想错了。 如果这么工作的话，就没必要设计<code>_.differenceBy</code>了，直接用<code>_.difference.xx()</code>就可以，所以我一开始的想当然是有问题的。<br>正确地工作步骤是，对前两个参数，分别执行第三个参数过滤，然后再比较找出<code>array</code>中比<code>[values]</code>中多出的部分，然后返回这些多余部分的原始值的一个数组。<br>就拿第一个说吧，执行过滤之后是<code>[2,1]</code>和<code>[2,3]</code>，应该是返回<code>[1]</code>的原始值<code>[1.2]</code>，就酱。</p>\n<h3 id=\"differenceWith\"><a href=\"#differenceWith\" class=\"headerlink\" title=\"_.differenceWith\"></a><code>_.differenceWith</code></h3><ul>\n<li><code>_.differenceWith(array, [values], [comparator])</code></li>\n</ul>\n<p>没太看懂。。。</p>\n<h3 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"_.drop\"></a><code>_.drop</code></h3><ul>\n<li><code>_.drop(array, [n=1])</code></li>\n</ul>\n<p>我理解的是抛弃前n个数组元素，返回剩下的数组元素，默认抛弃第一个。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.drop([1, 2, 3]);</div><div class=\"line\">// =&gt; [2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.drop([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [3]</div><div class=\"line\"> </div><div class=\"line\">_.drop([1, 2, 3], 5);</div><div class=\"line\">// =&gt; []</div><div class=\"line\"> </div><div class=\"line\">_.drop([1, 2, 3], 0);</div><div class=\"line\">// =&gt; [1, 2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"dropRight\"><a href=\"#dropRight\" class=\"headerlink\" title=\"_.dropRight\"></a><code>_.dropRight</code></h3><ul>\n<li><code>_.dropRight(array, [n=1])</code></li>\n</ul>\n<p><code>_.dropRight</code>和<code>_.drop</code>功能是一样的，就是<code>_.drop</code>是从后往前抛弃n个数组元素，默认抛弃最后一个。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.dropRight([1, 2, 3]);</div><div class=\"line\">// =&gt; [1, 2]</div><div class=\"line\"> </div><div class=\"line\">_.dropRight([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [1]</div><div class=\"line\"> </div><div class=\"line\">_.dropRight([1, 2, 3], 5);</div><div class=\"line\">// =&gt; []</div><div class=\"line\"> </div><div class=\"line\">_.dropRight([1, 2, 3], 0);</div><div class=\"line\">// =&gt; [1, 2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"dropRightWhile\"><a href=\"#dropRightWhile\" class=\"headerlink\" title=\"_.dropRightWhile\"></a><code>_.dropRightWhile</code></h3><ul>\n<li><code>_.dropRightWhile(array, [predicate=_.identity])</code></li>\n</ul>\n<p>从尾端查询数组<code>array</code>，第一个不满足<code>predicate</code>条件的元素开始截取数组。<br>参数<code>predicate</code>提供的是一个属性名称，就通过提供的参数使用<code>_.property</code>方法返回一个回调函数。<br>参数<code>predicate</code>提供的是一个对象，就用<code>_.matches</code>方法匹配相同的元素，相同返回<code>true</code>，不同返回<code>false</code>。<br>参数<code>predicate</code>也可以提供一个函数，该函数有三个参数<code>value, index, array</code></p>\n<p><code>_.dropRightWhile</code>这个函数还牵扯到另外两个函数，<code>_.property</code>和<code>_.matches</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.dropRightWhile(users, function(o) &#123; return !o.active; &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.dropRightWhile(users, &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.dropRightWhile(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.dropRightWhile(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;, &apos;pebbles&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"dropWhile\"><a href=\"#dropWhile\" class=\"headerlink\" title=\"_.dropWhile\"></a><code>_.dropWhile</code></h3><ul>\n<li><code>_.dropWhile(array, [predicate=_.identity])</code></li>\n</ul>\n<p>这个方法与上面<code>_.dropRightWhile</code>不同之处，是从数组的首端开始查询。</p>\n<h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"_.fill\"></a><code>_.fill</code></h3><ul>\n<li><code>_.fill(array, value, [start=0], [end=array.length])</code></li>\n</ul>\n<p>将<code>value</code>填充到<code>array</code>中，<code>start</code>默认为0，<code>end</code>默认为<code>array.length</code>。这个就比较好理解了。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3];</div><div class=\"line\"> </div><div class=\"line\">_.fill(array, &apos;a&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;a&apos;, &apos;a&apos;, &apos;a&apos;]</div><div class=\"line\"> </div><div class=\"line\">_.fill(Array(3), 2);</div><div class=\"line\">// =&gt; [2, 2, 2]</div><div class=\"line\"> </div><div class=\"line\">_.fill([4, 6, 8, 10], &apos;*&apos;, 1, 3);</div><div class=\"line\">// =&gt; [4, &apos;*&apos;, &apos;*&apos;, 10]</div></pre></td></tr></table></figure></p>\n<h3 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"_.findIndex\"></a><code>_.findIndex</code></h3><ul>\n<li><code>_.findIndex(array, [predicate=_.identity], [fromIndex=0])</code></li>\n</ul>\n<p>返回满足<code>predicate</code>条件的一个<code>array</code>数组的<code>index</code>，也可以指定从哪里开始查询，没找到满足条件的返回<code>-1</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: true &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.findIndex(users, function(o) &#123; return o.user == &apos;barney&apos;; &#125;);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.findIndex(users, &#123; &apos;user&apos;: &apos;fred&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.findIndex(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.findIndex(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; 2</div></pre></td></tr></table></figure></p>\n<h3 id=\"findLastIndex\"><a href=\"#findLastIndex\" class=\"headerlink\" title=\"_.findLastIndex\"></a><code>_.findLastIndex</code></h3><ul>\n<li><code>_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length -1])</code></li>\n</ul>\n<p>和<code>_.findIndex</code>基本相同，不过<code>_.findLastIndex</code>是从尾部往首部开始查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.findLastIndex(users, function(o) &#123; return o.user == &apos;pebbles&apos;; &#125;);</div><div class=\"line\">// =&gt; 2</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.findLastIndex(users, &#123; &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: true &#125;);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.findLastIndex(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; 2</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.findLastIndex(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; 0</div></pre></td></tr></table></figure></p>\n<h3 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"_.flatten\"></a><code>_.flatten</code></h3><ul>\n<li><code>_.flatten(array)</code></li>\n</ul>\n<p>这个函数的作用是将<code>array</code>减少一个维度。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.flatten([1, [2, [3, [4]], 5]]);</div><div class=\"line\">// =&gt; [1, 2, [3, [4]], 5]</div></pre></td></tr></table></figure></p>\n<h3 id=\"flattenDeep\"><a href=\"#flattenDeep\" class=\"headerlink\" title=\"_.flattenDeep\"></a><code>_.flattenDeep</code></h3><ul>\n<li><code>_.flattenDeep(array)</code></li>\n</ul>\n<p>相当于递归执行<code>_.flatten</code>，最终将<code>array</code>变成一维数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.flattenDeep([1, [2, [3, [4]], 5]]);</div><div class=\"line\">// =&gt; [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure></p>\n<h3 id=\"flattenDepth\"><a href=\"#flattenDepth\" class=\"headerlink\" title=\"_.flattenDepth\"></a><code>_.flattenDepth</code></h3><ul>\n<li><code>_.flattenDepth(array, [depth=1])</code></li>\n</ul>\n<p>相当于指定执行<code>_.flattenDepth``depth</code>次，默认<code>depth</code>为1。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, [2, [3, [4]], 5]];</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, 1);</div><div class=\"line\">// =&gt; [1, 2, [3, [4]], 5]</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, 2);</div><div class=\"line\">// =&gt; [1, 2, 3, [4], 5]</div></pre></td></tr></table></figure></p>\n<h3 id=\"fromPairs\"><a href=\"#fromPairs\" class=\"headerlink\" title=\"_.fromPairs\"></a><code>_.fromPairs</code></h3><ul>\n<li><code>_.fromPairs(pairs)</code></li>\n</ul>\n<p>将<code>pairs</code>键值对转换成一个对象。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.fromPairs([[&apos;a&apos;, 1], [&apos;b&apos;, 2]]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;</div><div class=\"line\"></div><div class=\"line\">_.fromPairs([[&apos;a&apos;, 1], [&apos;b&apos;, 2], [&apos;c&apos;, [&apos;d&apos;, 4]]]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: [ &apos;d&apos;, 4 ] &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"_.head\"></a><code>_.head</code></h3><ul>\n<li><code>_.head(array)</code></li>\n</ul>\n<p>返回<code>array</code>的第一个元素，别名<code>_.first</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.head([1, 2, 3]);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"> </div><div class=\"line\">_.head([]);</div><div class=\"line\">// =&gt; undefined</div><div class=\"line\"></div><div class=\"line\">_.head([[1, 4], 2, 3]);</div><div class=\"line\">// =&gt; [1, 4]</div></pre></td></tr></table></figure></p>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a><code>_.last</code></h3><ul>\n<li><code>_.last(array)</code></li>\n</ul>\n<p>返回<code>array</code>的最后一个元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.last([1, 2, 3]);</div><div class=\"line\">// =&gt; 3</div></pre></td></tr></table></figure></p>\n<h3 id=\"nth\"><a href=\"#nth\" class=\"headerlink\" title=\"_.nth\"></a><code>_.nth</code></h3><ul>\n<li><code>_.nth(array, [n=0])</code></li>\n</ul>\n<p>获取指定<code>index</code>的<code>array</code>数组元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\"> </div><div class=\"line\">_.nth(array, 1);</div><div class=\"line\">// =&gt; &apos;b&apos;</div><div class=\"line\"> </div><div class=\"line\">_.nth(array, -2);</div><div class=\"line\">// =&gt; &apos;c&apos;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"_.tail\"></a><code>_.tail</code></h3><ul>\n<li><code>_.tail(array)</code></li>\n</ul>\n<p>返回去除第一个元素的数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.tail([1, 2, 3]);</div><div class=\"line\">// =&gt; [2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"_.indexOf\"></a><code>_.indexOf</code></h3><ul>\n<li><code>_.indexOf(array, value, [fromIndex=0])</code></li>\n</ul>\n<p>在<code>array</code>中查找<code>value</code>，返回找到的第一个匹配的<code>index</code>，没找到则返回<code>-1</code>，第三个参数<code>fromIndex</code>指定查找的起始位置，默认为0；</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.indexOf([1, 2, 1, 2], 2);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"></div><div class=\"line\">_.indexOf([1, 2, 1, 2], 3);</div><div class=\"line\">// =&gt; -1</div><div class=\"line\"> </div><div class=\"line\">// Search from the `fromIndex`.</div><div class=\"line\">_.indexOf([1, 2, 1, 2], 2, 2);</div><div class=\"line\">// =&gt; 3</div></pre></td></tr></table></figure></p>\n<h3 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"_.lastIndexOf\"></a><code>_.lastIndexOf</code></h3><ul>\n<li><code>_.lastIndexOf(array, value, [fromIndex=array.length-1])</code></li>\n</ul>\n<p>和<code>_.indexOf</code>方法一样，不过是从尾部开始查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.lastIndexOf([1, 2, 1, 2], 2);</div><div class=\"line\">// =&gt; 3</div><div class=\"line\"> </div><div class=\"line\">// Search from the `fromIndex`.</div><div class=\"line\">_.lastIndexOf([1, 2, 1, 2], 2, 2);</div><div class=\"line\">// =&gt; 1</div></pre></td></tr></table></figure></p>\n<h3 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"_.initial\"></a><code>_.initial</code></h3><ul>\n<li><code>_.initial(array)</code></li>\n</ul>\n<p>去除<code>array</code>最后一个元素，并返回。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.initial([1, 2, 3]);</div><div class=\"line\">// =&gt; [1, 2]</div><div class=\"line\"></div><div class=\"line\">_.initial([1, 2, 3, [4, 5]]);</div><div class=\"line\">// =&gt; [1, 2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"_.intersection\"></a><code>_.intersection</code></h3><ul>\n<li><code>_.intersection([arrays])</code></li>\n</ul>\n<p>取出各数组中全等的元素，使用<code>SameValueZero</code>方式平等比较。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.intersection([2, 1], [2, 3]);</div><div class=\"line\">// =&gt; [2]</div><div class=\"line\"></div><div class=\"line\">_.intersection([1, 2], [4, 2], [2, 1]);</div><div class=\"line\">// =&gt; [2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"intersectionBy\"><a href=\"#intersectionBy\" class=\"headerlink\" title=\"_.intersectionBy\"></a><code>_.intersectionBy</code></h3><ul>\n<li><code>_.intersectionBy([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p><code>_.intersectionBy</code>就是在<code>_.intersection</code>的基础上接受了一个<code>iteratee</code>迭代器，生成了一个比较的标准，类似于<code>_.differenceBy</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);</div><div class=\"line\">// =&gt; [2.1]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.intersectionBy([&#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"intersectionWith\"><a href=\"#intersectionWith\" class=\"headerlink\" title=\"_.intersectionWith\"></a><code>_.intersectionWith</code></h3><ul>\n<li><code>_.intersectionWith([arrays], [comparator])</code></li>\n</ul>\n<p>这个函数和<code>_.differenceWith</code>差不多，一样没太看懂。<br>先略过。</p>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"_.join\"></a><code>_.join</code></h3><ul>\n<li><code>_.join(array, [separator=&#39;,&#39;])</code></li>\n</ul>\n<p>将<code>array</code>转换成字符串类型并通过<code>separator</code>分隔开，默认使用<code>,</code>分隔。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.join([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], &apos;~&apos;);</div><div class=\"line\">// =&gt; &apos;a~b~c&apos;</div><div class=\"line\"></div><div class=\"line\">_.join([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [&apos;d&apos;, &apos;e&apos;]], &apos;-&apos;);</div><div class=\"line\">// =&gt; &apos;a-b-c-d,e&apos;</div></pre></td></tr></table></figure></p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"_.pull\"></a><code>_.pull</code></h3><ul>\n<li><code>_.pull(array, [values])</code></li>\n</ul>\n<p>移除<code>array</code>中所有的指定<code>values</code>，需要注意的是这个函数会对原始<code>array</code>做修改。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\"> </div><div class=\"line\">_.pull(array, &apos;a&apos;, &apos;c&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;b&apos;, &apos;b&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"pullAll\"><a href=\"#pullAll\" class=\"headerlink\" title=\"_.pullAll\"></a><code>_.pullAll</code></h3><ul>\n<li><code>_.pullAll(array, values)</code></li>\n</ul>\n<p><code>_.pullAll</code>方法应该是<code>_.pull</code>方法的升级，这个方法是在<strong>Lodash 4.0.0</strong>中提出的。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\"> </div><div class=\"line\">_.pullAll(array, [&apos;a&apos;, &apos;c&apos;]);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;b&apos;, &apos;b&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"pullAllBy\"><a href=\"#pullAllBy\" class=\"headerlink\" title=\"_.pullAllBy\"></a><code>_.pullAllBy</code></h3><ul>\n<li><code>_.pullAllBy(array, values, [iteratee=_.identity])</code></li>\n</ul>\n<p><code>_.pullAllBy</code>方法很像<code>_.pullAll</code>方法，除了可以接受一个迭代器<code>iteratee</code>，为每一个数组元素执行迭代器并生成一个比较的标准，这个迭代器调用一个参数<code>value</code>。<br><strong>注</strong>：原始数组改变</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array1 = [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 3 &#125;, &#123; &apos;x&apos;: 1 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.pullAllBy(array1, [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 3 &#125;], &apos;x&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2 &#125;]</div><div class=\"line\"></div><div class=\"line\">var array2 = [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 3 &#125;, &#123; &apos;x&apos;: 1 &#125;, &#123; &apos;y&apos;: 4&#125;];</div><div class=\"line\"> </div><div class=\"line\">_.pullAllBy(array, [&#123; &apos;x&apos;: 1 &#125;], &apos;y&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&#123; &apos;y&apos;: 4 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"pullAllWith\"><a href=\"#pullAllWith\" class=\"headerlink\" title=\"_.pullAllWith\"></a><code>_.pullAllWith</code></h3><ul>\n<li><code>_.pullAllWith(array, values, [comoarator])</code></li>\n</ul>\n<p>这个跳过。。。</p>\n<h3 id=\"pullAt\"><a href=\"#pullAt\" class=\"headerlink\" title=\"_.pullAt\"></a><code>_.pullAt</code></h3><ul>\n<li><code>_.pullAt(array, [indexes])</code></li>\n</ul>\n<p>移除相应<code>index</code>的元素，返回被移除元素的数组。<br><strong>注</strong>：原始数组改变</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\">var pulled = _.pullAt(array, [1, 3]);</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;a&apos;, &apos;c&apos;]</div><div class=\"line\"> </div><div class=\"line\">console.log(pulled);</div><div class=\"line\">// =&gt; [&apos;b&apos;, &apos;d&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"_.remove\"></a><code>_.remove</code></h3><ul>\n<li><code>_.remove(array, [predicate=_.identity])</code></li>\n</ul>\n<p>移除所有<code>predicate</code>返回<strong>真</strong>的数组元素，并返回被移除的数组元素。<code>predicate</code>调用三个参数<code>value, index, array</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3, 4];</div><div class=\"line\">var evens = _.remove(array, function(n) &#123;</div><div class=\"line\">  return n % 2 == 0;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [1, 3]</div><div class=\"line\"> </div><div class=\"line\">console.log(evens);</div><div class=\"line\">// =&gt; [2, 4]</div></pre></td></tr></table></figure></p>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"_.reverse\"></a><code>_.reverse</code></h3><ul>\n<li><code>_.reverse(array)</code></li>\n</ul>\n<p>这个就比较简单了，是一个反序排列的方法，也会对原始方法进行更改</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3];</div><div class=\"line\"> </div><div class=\"line\">_.reverse(array);</div><div class=\"line\">// =&gt; [3, 2, 1]</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [3, 2, 1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"_.slice\"></a><code>_.slice</code></h3><ul>\n<li><code>_.slice(array, [start=0], [end=array.length])</code></li>\n</ul>\n<p>对数组进行分割。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3];</div><div class=\"line\"> </div><div class=\"line\">_.slice(array, 1, 2);</div><div class=\"line\">// =&gt; [2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"_.sortedIndex\"></a><code>_.sortedIndex</code></h3><ul>\n<li><code>_.sortedIndex(array, value)</code><br>向一个有序数组中插入一个<code>value</code>，将返回这个值插入之后的有序位置。（使用二分查找）</li>\n</ul>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedIndex([30, 50], 40);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"></div><div class=\"line\">_.sortedIndex([30, 50], 30);</div><div class=\"line\">// =&gt; 0</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedIndexBy\"><a href=\"#sortedIndexBy\" class=\"headerlink\" title=\"_.sortedIndexBy\"></a><code>_.sortedIndexBy</code></h3><ul>\n<li><code>_.sortedIndexBy(array, value, [iteratee=_.identity])</code></li>\n</ul>\n<p>凡是带<code>By</code>的方法方法，都是这种结构的函数。<br><code>_.sortIndexBy</code>比<code>_.sortIndex</code>方法多一个参数，接收一个迭代器<code>iteratee</code>去计算排序，这个<code>iteratee</code>调用一个参数<code>value</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 4 &#125;, &#123; &apos;x&apos;: 5 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.sortedIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, function(o) &#123; return o.x; &#125;);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.sortedIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, &apos;x&apos;);</div><div class=\"line\">// =&gt; 0</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedIndexOf\"><a href=\"#sortedIndexOf\" class=\"headerlink\" title=\"_.sortedIndexOf\"></a><code>_.sortedIndexOf</code></h3><ul>\n<li><code>_.sortedIndexOf(array, value)</code></li>\n</ul>\n<p>这个方法很像<code>_.indexOf</code>，<code>_.sortedIndexOf</code>是对一个有序数组进行二分查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedIndexOf([4, 5, 5, 5, 6], 5);</div><div class=\"line\">// =&gt; 1</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedLastIndex\"><a href=\"#sortedLastIndex\" class=\"headerlink\" title=\"_.sortedLastIndex\"></a><code>_.sortedLastIndex</code></h3><ul>\n<li><code>_.sortedLastIndex(array, value)</code></li>\n</ul>\n<p>这个方法很像<code>_.sortedIndex</code>，这个方法在保持有序的前提下会把<code>value</code>插进最大的那个位置。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedLastIndex([4, 5, 5, 5, 6], 5);</div><div class=\"line\">// =&gt; 4</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedLastIndexBy\"><a href=\"#sortedLastIndexBy\" class=\"headerlink\" title=\"_.sortedLastIndexBy\"></a><code>_.sortedLastIndexBy</code></h3><ul>\n<li><code>_.sortedLastIndexBy(array, value, [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法很像<code>_.sortedLastIndex</code>，只不过多了一个参数<code>iteratee</code>,这个迭代器为每个元素值计算他们的排序，这个迭代器调用一个参数<code>value</code>。返回应该被插入后的数组下标。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 4 &#125;, &#123; &apos;x&apos;: 5 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.sortedLastIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, function(o) &#123; return o.x; &#125;);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.sortedLastIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, &apos;x&apos;);</div><div class=\"line\">// =&gt; 1</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedLastIndexOf\"><a href=\"#sortedLastIndexOf\" class=\"headerlink\" title=\"_.sortedLastIndexOf\"></a><code>_.sortedLastIndexOf</code></h3><ul>\n<li><code>_.sortedLastIndexOf(array, value)</code></li>\n</ul>\n<p>这个方法很像<code>_.lastIndexOf</code>，只不过它对一个有序数组进行二分查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);</div><div class=\"line\">// =&gt; 3</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedUniq\"><a href=\"#sortedUniq\" class=\"headerlink\" title=\"_.sortedUniq\"></a><code>_.sortedUniq</code></h3><ul>\n<li><code>_.sortedUniq(array)</code></li>\n</ul>\n<p>这个方法很像<code>_.uniq</code>，这个方法是为了有序数组设计且优化的，返回一个去重的数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedUniq([1, 1, 2]);</div><div class=\"line\">// =&gt; [1, 2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedUniqBy\"><a href=\"#sortedUniqBy\" class=\"headerlink\" title=\"_.sortedUniqBy\"></a><code>_.sortedUniqBy</code></h3><ul>\n<li><code>_.sortedUniqBy(array, [iteratee])</code></li>\n</ul>\n<p>这个方法很像<code>_.uniqBy</code>，它返回经过<code>iteratee</code>计算之后，去除重复值，只返回重复值的第一个原值和不重复值组成的有序数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);</div><div class=\"line\">// =&gt; [1.1, 2.3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"take\"><a href=\"#take\" class=\"headerlink\" title=\"_.take\"></a><code>_.take</code></h3><ul>\n<li><code>_.take(array, [n=1])</code></li>\n</ul>\n<p>创建一个分割后的数组，从<code>array</code>数组的开始到第<code>n</code>个元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.take([1, 2, 3]);</div><div class=\"line\">// =&gt; [1]</div><div class=\"line\"> </div><div class=\"line\">_.take([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [1, 2]</div><div class=\"line\"> </div><div class=\"line\">_.take([1, 2, 3], 5);</div><div class=\"line\">// =&gt; [1, 2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.take([1, 2, 3], 0);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"takeRight\"><a href=\"#takeRight\" class=\"headerlink\" title=\"_.takeRight\"></a><code>_.takeRight</code></h3><ul>\n<li><code>_.takeRight(array, [n=1])</code></li>\n</ul>\n<p>创建一个分割后的数组，从<code>array</code>数组的结尾开始，分割<code>n</code>个元素出来。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.takeRight([1, 2, 3]);</div><div class=\"line\">// =&gt; [3]</div><div class=\"line\"> </div><div class=\"line\">_.takeRight([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.takeRight([1, 2, 3], 5);</div><div class=\"line\">// =&gt; [1, 2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.takeRight([1, 2, 3], 0);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"takeRightWhile\"><a href=\"#takeRightWhile\" class=\"headerlink\" title=\"_.takeRightWhile\"></a><code>_.takeRightWhile</code></h3><ul>\n<li><code>_.takeRightWhile(array, [predicate=_.identity])</code></li>\n</ul>\n<p>同样是从<code>array</code>结尾开始分割数组，不过是通过<code>predicate</code>控制，直到返回<strong>falsey</strong>停止。<code>predicate</code>调用三个参数<code>value, index, array</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.takeRightWhile(users, function(o) &#123; return !o.active; &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;fred&apos;, &apos;pebbles&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.takeRightWhile(users, &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;pebbles&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.takeRightWhile(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; objects for [&apos;fred&apos;, &apos;pebbles&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.takeRightWhile(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"_.takeWhile\"></a><code>_.takeWhile</code></h3><ul>\n<li><code>_.takeWhile(array, [predivate=_.identity])</code></li>\n</ul>\n<p>是从<code>array</code>开头开始分割数组，不过是通过<code>predicate</code>控制，直到返回<strong>falsey</strong>停止。<code>predicate</code>调用三个参数<code>value, index, array</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false&#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: true &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.takeWhile(users, function(o) &#123; return !o.active; &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.takeWhile(users, &#123; &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.takeWhile(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.takeWhile(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"union\"><a href=\"#union\" class=\"headerlink\" title=\"_.union\"></a><code>_.union</code></h3><ul>\n<li><code>_.union([arrays])</code></li>\n</ul>\n<p>创建一个没有重复值的数组，组合所有被传入的数组元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.union([2], [1, 2]);</div><div class=\"line\">// =&gt; [2, 1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unionBy\"><a href=\"#unionBy\" class=\"headerlink\" title=\"_.unionBy\"></a><code>_.unionBy</code></h3><ul>\n<li><code>_.unionBy([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p>通过<code>iteratee</code>对每个元素值进行执行，生成一个唯一性的标准，并选择第一个出现的值，作为要返回的值，去除重复的元素。<code>iteratee</code>调用一个参数<code>value</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.unionBy([2.1], [1.2, 2.3], Math.floor);</div><div class=\"line\">// =&gt; [2.1, 1.2]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.unionBy([&#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unionWith\"><a href=\"#unionWith\" class=\"headerlink\" title=\"_.unionWith\"></a><code>_.unionWith</code></h3><ul>\n<li><code>_.unionWith([arrays], [comparator])</code></li>\n</ul>\n<p>这个没太看懂。。。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;];</div><div class=\"line\">var others = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.unionWith(objects, others, _.isEqual);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"uniq\"><a href=\"#uniq\" class=\"headerlink\" title=\"_.uniq\"></a><code>_.uniq</code></h3><ul>\n<li><code>_.uniq(array)</code></li>\n</ul>\n<p>数组去重。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.uniq([2, 1, 2]);</div><div class=\"line\">// =&gt; [2, 1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"uniqBy\"><a href=\"#uniqBy\" class=\"headerlink\" title=\"_.uniqBy\"></a><code>_.uniqBy</code></h3><ul>\n<li><code>_.uniqBy(array, [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法是有条件的数组去重，通过<code>iteratee</code>迭代器生成一个唯一性的标准。<code>iteratee</code>调用一个参数<code>value</code>.</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.uniqBy([2.1, 1.2, 2.3], Math.floor);</div><div class=\"line\">// =&gt; [2.1, 1.2]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.uniqBy([&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"uniqWith\"><a href=\"#uniqWith\" class=\"headerlink\" title=\"_.uniqWith\"></a><code>_.uniqWith</code></h3><ul>\n<li><code>_.uniqWith(array, [comparator])</code></li>\n</ul>\n<p>没太分清<code>_.uniqWith</code>和<code>_.uniqBy</code>之间有什么区别。<code>_.uniqWith</code>传入的是一个比较器。<code>comparator</code>调用两个参数<code>arrVal, othVal</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.uniqWith(objects, _.isEqual);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"_.without\"></a><code>_.without</code></h3><ul>\n<li><code>_.without(array, [values])</code></li>\n</ul>\n<p>创建一个新的数组，去除所有传入的<code>values</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.without([2, 1, 2, 3], 1, 2);</div><div class=\"line\">// =&gt; [3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"xor\"><a href=\"#xor\" class=\"headerlink\" title=\"_.xor\"></a><code>_.xor</code></h3><ul>\n<li><code>_.xor([arrays])</code></li>\n</ul>\n<p><strong>xor</strong>就是异或，相同为0，不同为1，1为<code>true</code>，应该被返回。<br>创建一个唯一值的数组，返回被给数组之间对称差（没有交集的部分）的元素。结果值的顺序由它们在数组中出现的顺序确定。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.xor([2, 1, 4], [2, 3, 5]);</div><div class=\"line\">// =&gt; [1, 4, 3, 5]</div><div class=\"line\"></div><div class=\"line\">_.xor([2, 2, 3], [4, 4, 5, 6]);</div><div class=\"line\">// =&gt; [2, 3, 4, 5, 6]</div></pre></td></tr></table></figure></p>\n<h3 id=\"xorBy\"><a href=\"#xorBy\" class=\"headerlink\" title=\"_.xorBy\"></a><code>_.xorBy</code></h3><ul>\n<li><code>_.xorBy([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p>有条件的<code>_.xor</code>方法，和所有<code>_.xxBy</code>方法一样，接收一个<code>iteratee</code>方法生成一个标准，<code>iteratee</code>接受一个参数<code>value</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);</div><div class=\"line\">// =&gt; [1.2, 3.4]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.xorBy([&#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"xorWith\"><a href=\"#xorWith\" class=\"headerlink\" title=\"_.xorWith\"></a><code>_.xorWith</code></h3><ul>\n<li><code>_.xorWith([arrays], [comparator])</code></li>\n</ul>\n<p>这个方法类似于<code>_.xor</code>，除了它接受比较器<code>comparator</code>，它被调用来比较数组的元素。结果值的顺序由它们在数组中出现的顺序确定。<code>comparator</code>调用两个参数<code>arrVal，othVal</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;];</div><div class=\"line\">var others = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.xorWith(objects, others, _.isEqual);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"_.zip\"></a><code>_.zip</code></h3><ul>\n<li><code>_.zip([arrays])</code></li>\n</ul>\n<p>创建一个元素组数组，把每个传入数组，第一个元素组合到一起，第二个元素组合在一起，以此类推。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zip([&apos;a&apos;, &apos;b&apos;], [1, 2], [true, false]);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, 1, true], [&apos;b&apos;, 2, false]]</div><div class=\"line\"></div><div class=\"line\">_.zip([&apos;a&apos;, &apos;b&apos;], [1], [true, false]);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, 1, true], [&apos;b&apos;, undefined, false]]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"_.unzip\"></a><code>_.unzip</code></h3><ul>\n<li><code>_.unzip(array)</code></li>\n</ul>\n<p>就是把<code>_.zip</code>函数打包好的，或是元素组数组，对其进行解包。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var zipped = _.zip([&apos;a&apos;, &apos;b&apos;], [1, 2], [true, false]);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, 1, true], [&apos;b&apos;, 2, false]]</div><div class=\"line\"> </div><div class=\"line\">_.unzip(zipped);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, &apos;b&apos;], [1, 2], [true, false]]</div></pre></td></tr></table></figure></p>\n<h3 id=\"zipObject\"><a href=\"#zipObject\" class=\"headerlink\" title=\"_.zipObject\"></a><code>_.zipObject</code></h3><ul>\n<li><code>_.zipObject([props=[]], [values=[]])</code></li>\n</ul>\n<p>这个方法很像<code>_.fromPairs</code>，<code>_.zipObject</code>接受两个数组，一个属性数组和一个相应的对应值数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zipObject([&apos;a&apos;, &apos;b&apos;], [1, 2]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;</div><div class=\"line\"></div><div class=\"line\">_.zipObject([&apos;a&apos;, &apos;b&apos;], [1]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: undefined &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"zipObjectDeep\"><a href=\"#zipObjectDeep\" class=\"headerlink\" title=\"_.zipObjectDeep\"></a><code>_.zipObjectDeep</code></h3><ul>\n<li>`_.zipObjectDeep([props=[]], [values=[]])</li>\n</ul>\n<p>这个方法像<code>_.zipObject</code>方法一样，不过它支持属性路径<code>property paths</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zipObjectDeep([&apos;a.b[0].c&apos;, &apos;a.b[1].d&apos;], [1, 2]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: &#123; &apos;b&apos;: [&#123; &apos;c&apos;: 1 &#125;, &#123; &apos;d&apos;: 2 &#125;] &#125; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"zipWith\"><a href=\"#zipWith\" class=\"headerlink\" title=\"_.zipWith\"></a><code>_.zipWith</code></h3><ul>\n<li><code>_.zipWith([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法像类似<code>_.zip</code>，接受一个迭代器<code>iteratee</code>去指定怎么如何组合分组值。这个迭代器为每个组的元素调用<code>...group</code>，还是看例子比较直观。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) &#123;</div><div class=\"line\">  return a + b + c;</div><div class=\"line\">&#125;);</div><div class=\"line\">// =&gt; [111, 222]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unzipWith\"><a href=\"#unzipWith\" class=\"headerlink\" title=\"_.unzipWith\"></a><code>_.unzipWith</code></h3><ul>\n<li><code>_.unzipWith(array, [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法很像<code>_.unzip</code>，它接受一个迭代器<code>iteratee</code>去指定怎样重组组合值。<code>iteratee</code>调用一个参数<code>...group</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var zipped = _.zip([1, 2], [10, 20], [100, 200]);</div><div class=\"line\">// =&gt; [[1, 10, 100], [2, 20, 200]]</div><div class=\"line\"> </div><div class=\"line\">_.unzipWith(zipped, _.add);</div><div class=\"line\">// =&gt; [3, 30, 300]</div></pre></td></tr></table></figure></p>\n","excerpt":"<p><strong>Lodash</strong>是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。还有一个类似的库是<strong>underscore</strong>，不过<strong>underscore</strong>不能按需加载。<br>朋友说：这种工具库，平时都是先用先写的。<br>不过我觉得，还是很有必要学习一下的，看下源码的实现。<br>本文主要是对<strong>Lodash</strong>的API,用自己理解的方式做一下说明。可能理解有误，不过还是要记录下来，当再用的时候有据可查。</p>","more":"<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"_.chunk\"></a><code>_.chunk</code></h3><ul>\n<li><code>_.chunk(array, [size=1])</code></li>\n</ul>\n<p>将数组进行分块，按照<code>size</code>指定的长度，默认长度<code>1</code></p>\n<h3 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"_.compact\"></a><code>_.compact</code></h3><ul>\n<li><code>_.compact(array)</code></li>\n</ul>\n<p>剔除数组中没有意义的值，比如<code>false, null, 0, &quot;&quot;, undefined 和 NaN</code> </p>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"_.concat\"></a><code>_.concat</code></h3><ul>\n<li><code>_.concat(array, [values])</code></li>\n</ul>\n<p>创建一个新的数组来保存原始数组，增加值/数组之后的结果</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1];</div><div class=\"line\">var other = _.concat(array, 2, [3], [[4]]);</div><div class=\"line\"> </div><div class=\"line\">console.log(other);</div><div class=\"line\">// =&gt; [1, 2, 3, [4]]</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"_.difference\"></a><code>_.difference</code></h3><ul>\n<li><code>_.difference(array, [values])</code></li>\n</ul>\n<p>这个函数就比较复杂了，就想看一下源码，发现嵌套的函数太多。就投机取巧直接测试吧。这个函数，大概的作用就是将<code>array</code>和<code>[values]</code>进行比较，将<code>array</code>中比<code>[values]</code>中多出的值，保存到一个新的数组中。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//官网就比较敷衍了</div><div class=\"line\">_.difference([2, 1], [2, 3]);</div><div class=\"line\">// =&gt; [1]</div><div class=\"line\"></div><div class=\"line\">//下面是我做的一些测试</div><div class=\"line\">_.difference([1, 1, &quot;1&quot;, 2, 2], [1]);</div><div class=\"line\">// =&gt; [&quot;1&quot;, 2, 2]</div><div class=\"line\">// 只要array中比[values]中多出的值，都会返回，不管个数出现了几次</div></pre></td></tr></table></figure></p>\n<h3 id=\"differenceBy\"><a href=\"#differenceBy\" class=\"headerlink\" title=\"_.differenceBy\"></a><code>_.differenceBy</code></h3><ul>\n<li><code>_.differenceBy(array, [values], [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法就是在<code>_.difference</code>方法的基础上，增加了一个参数。反正是看了一会，才看明白这个第三个参数，怎么工作的。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);</div><div class=\"line\">// =&gt; [1.2]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.differenceBy([&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<p>第一个官方例子，就是看了半天没看懂。我以为是先<code>_.difference</code>在对得到的结果进行<code>Math.floor</code>运算，其实是想错了。 如果这么工作的话，就没必要设计<code>_.differenceBy</code>了，直接用<code>_.difference.xx()</code>就可以，所以我一开始的想当然是有问题的。<br>正确地工作步骤是，对前两个参数，分别执行第三个参数过滤，然后再比较找出<code>array</code>中比<code>[values]</code>中多出的部分，然后返回这些多余部分的原始值的一个数组。<br>就拿第一个说吧，执行过滤之后是<code>[2,1]</code>和<code>[2,3]</code>，应该是返回<code>[1]</code>的原始值<code>[1.2]</code>，就酱。</p>\n<h3 id=\"differenceWith\"><a href=\"#differenceWith\" class=\"headerlink\" title=\"_.differenceWith\"></a><code>_.differenceWith</code></h3><ul>\n<li><code>_.differenceWith(array, [values], [comparator])</code></li>\n</ul>\n<p>没太看懂。。。</p>\n<h3 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"_.drop\"></a><code>_.drop</code></h3><ul>\n<li><code>_.drop(array, [n=1])</code></li>\n</ul>\n<p>我理解的是抛弃前n个数组元素，返回剩下的数组元素，默认抛弃第一个。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.drop([1, 2, 3]);</div><div class=\"line\">// =&gt; [2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.drop([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [3]</div><div class=\"line\"> </div><div class=\"line\">_.drop([1, 2, 3], 5);</div><div class=\"line\">// =&gt; []</div><div class=\"line\"> </div><div class=\"line\">_.drop([1, 2, 3], 0);</div><div class=\"line\">// =&gt; [1, 2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"dropRight\"><a href=\"#dropRight\" class=\"headerlink\" title=\"_.dropRight\"></a><code>_.dropRight</code></h3><ul>\n<li><code>_.dropRight(array, [n=1])</code></li>\n</ul>\n<p><code>_.dropRight</code>和<code>_.drop</code>功能是一样的，就是<code>_.drop</code>是从后往前抛弃n个数组元素，默认抛弃最后一个。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.dropRight([1, 2, 3]);</div><div class=\"line\">// =&gt; [1, 2]</div><div class=\"line\"> </div><div class=\"line\">_.dropRight([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [1]</div><div class=\"line\"> </div><div class=\"line\">_.dropRight([1, 2, 3], 5);</div><div class=\"line\">// =&gt; []</div><div class=\"line\"> </div><div class=\"line\">_.dropRight([1, 2, 3], 0);</div><div class=\"line\">// =&gt; [1, 2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"dropRightWhile\"><a href=\"#dropRightWhile\" class=\"headerlink\" title=\"_.dropRightWhile\"></a><code>_.dropRightWhile</code></h3><ul>\n<li><code>_.dropRightWhile(array, [predicate=_.identity])</code></li>\n</ul>\n<p>从尾端查询数组<code>array</code>，第一个不满足<code>predicate</code>条件的元素开始截取数组。<br>参数<code>predicate</code>提供的是一个属性名称，就通过提供的参数使用<code>_.property</code>方法返回一个回调函数。<br>参数<code>predicate</code>提供的是一个对象，就用<code>_.matches</code>方法匹配相同的元素，相同返回<code>true</code>，不同返回<code>false</code>。<br>参数<code>predicate</code>也可以提供一个函数，该函数有三个参数<code>value, index, array</code></p>\n<p><code>_.dropRightWhile</code>这个函数还牵扯到另外两个函数，<code>_.property</code>和<code>_.matches</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.dropRightWhile(users, function(o) &#123; return !o.active; &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.dropRightWhile(users, &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.dropRightWhile(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.dropRightWhile(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;, &apos;pebbles&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"dropWhile\"><a href=\"#dropWhile\" class=\"headerlink\" title=\"_.dropWhile\"></a><code>_.dropWhile</code></h3><ul>\n<li><code>_.dropWhile(array, [predicate=_.identity])</code></li>\n</ul>\n<p>这个方法与上面<code>_.dropRightWhile</code>不同之处，是从数组的首端开始查询。</p>\n<h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"_.fill\"></a><code>_.fill</code></h3><ul>\n<li><code>_.fill(array, value, [start=0], [end=array.length])</code></li>\n</ul>\n<p>将<code>value</code>填充到<code>array</code>中，<code>start</code>默认为0，<code>end</code>默认为<code>array.length</code>。这个就比较好理解了。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3];</div><div class=\"line\"> </div><div class=\"line\">_.fill(array, &apos;a&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;a&apos;, &apos;a&apos;, &apos;a&apos;]</div><div class=\"line\"> </div><div class=\"line\">_.fill(Array(3), 2);</div><div class=\"line\">// =&gt; [2, 2, 2]</div><div class=\"line\"> </div><div class=\"line\">_.fill([4, 6, 8, 10], &apos;*&apos;, 1, 3);</div><div class=\"line\">// =&gt; [4, &apos;*&apos;, &apos;*&apos;, 10]</div></pre></td></tr></table></figure></p>\n<h3 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"_.findIndex\"></a><code>_.findIndex</code></h3><ul>\n<li><code>_.findIndex(array, [predicate=_.identity], [fromIndex=0])</code></li>\n</ul>\n<p>返回满足<code>predicate</code>条件的一个<code>array</code>数组的<code>index</code>，也可以指定从哪里开始查询，没找到满足条件的返回<code>-1</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: true &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.findIndex(users, function(o) &#123; return o.user == &apos;barney&apos;; &#125;);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.findIndex(users, &#123; &apos;user&apos;: &apos;fred&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.findIndex(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.findIndex(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; 2</div></pre></td></tr></table></figure></p>\n<h3 id=\"findLastIndex\"><a href=\"#findLastIndex\" class=\"headerlink\" title=\"_.findLastIndex\"></a><code>_.findLastIndex</code></h3><ul>\n<li><code>_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length -1])</code></li>\n</ul>\n<p>和<code>_.findIndex</code>基本相同，不过<code>_.findLastIndex</code>是从尾部往首部开始查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.findLastIndex(users, function(o) &#123; return o.user == &apos;pebbles&apos;; &#125;);</div><div class=\"line\">// =&gt; 2</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.findLastIndex(users, &#123; &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: true &#125;);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.findLastIndex(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; 2</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.findLastIndex(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; 0</div></pre></td></tr></table></figure></p>\n<h3 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"_.flatten\"></a><code>_.flatten</code></h3><ul>\n<li><code>_.flatten(array)</code></li>\n</ul>\n<p>这个函数的作用是将<code>array</code>减少一个维度。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.flatten([1, [2, [3, [4]], 5]]);</div><div class=\"line\">// =&gt; [1, 2, [3, [4]], 5]</div></pre></td></tr></table></figure></p>\n<h3 id=\"flattenDeep\"><a href=\"#flattenDeep\" class=\"headerlink\" title=\"_.flattenDeep\"></a><code>_.flattenDeep</code></h3><ul>\n<li><code>_.flattenDeep(array)</code></li>\n</ul>\n<p>相当于递归执行<code>_.flatten</code>，最终将<code>array</code>变成一维数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.flattenDeep([1, [2, [3, [4]], 5]]);</div><div class=\"line\">// =&gt; [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure></p>\n<h3 id=\"flattenDepth\"><a href=\"#flattenDepth\" class=\"headerlink\" title=\"_.flattenDepth\"></a><code>_.flattenDepth</code></h3><ul>\n<li><code>_.flattenDepth(array, [depth=1])</code></li>\n</ul>\n<p>相当于指定执行<code>_.flattenDepth``depth</code>次，默认<code>depth</code>为1。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, [2, [3, [4]], 5]];</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, 1);</div><div class=\"line\">// =&gt; [1, 2, [3, [4]], 5]</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, 2);</div><div class=\"line\">// =&gt; [1, 2, 3, [4], 5]</div></pre></td></tr></table></figure></p>\n<h3 id=\"fromPairs\"><a href=\"#fromPairs\" class=\"headerlink\" title=\"_.fromPairs\"></a><code>_.fromPairs</code></h3><ul>\n<li><code>_.fromPairs(pairs)</code></li>\n</ul>\n<p>将<code>pairs</code>键值对转换成一个对象。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.fromPairs([[&apos;a&apos;, 1], [&apos;b&apos;, 2]]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;</div><div class=\"line\"></div><div class=\"line\">_.fromPairs([[&apos;a&apos;, 1], [&apos;b&apos;, 2], [&apos;c&apos;, [&apos;d&apos;, 4]]]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: [ &apos;d&apos;, 4 ] &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"_.head\"></a><code>_.head</code></h3><ul>\n<li><code>_.head(array)</code></li>\n</ul>\n<p>返回<code>array</code>的第一个元素，别名<code>_.first</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.head([1, 2, 3]);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"> </div><div class=\"line\">_.head([]);</div><div class=\"line\">// =&gt; undefined</div><div class=\"line\"></div><div class=\"line\">_.head([[1, 4], 2, 3]);</div><div class=\"line\">// =&gt; [1, 4]</div></pre></td></tr></table></figure></p>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a><code>_.last</code></h3><ul>\n<li><code>_.last(array)</code></li>\n</ul>\n<p>返回<code>array</code>的最后一个元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.last([1, 2, 3]);</div><div class=\"line\">// =&gt; 3</div></pre></td></tr></table></figure></p>\n<h3 id=\"nth\"><a href=\"#nth\" class=\"headerlink\" title=\"_.nth\"></a><code>_.nth</code></h3><ul>\n<li><code>_.nth(array, [n=0])</code></li>\n</ul>\n<p>获取指定<code>index</code>的<code>array</code>数组元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\"> </div><div class=\"line\">_.nth(array, 1);</div><div class=\"line\">// =&gt; &apos;b&apos;</div><div class=\"line\"> </div><div class=\"line\">_.nth(array, -2);</div><div class=\"line\">// =&gt; &apos;c&apos;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"_.tail\"></a><code>_.tail</code></h3><ul>\n<li><code>_.tail(array)</code></li>\n</ul>\n<p>返回去除第一个元素的数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.tail([1, 2, 3]);</div><div class=\"line\">// =&gt; [2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"_.indexOf\"></a><code>_.indexOf</code></h3><ul>\n<li><code>_.indexOf(array, value, [fromIndex=0])</code></li>\n</ul>\n<p>在<code>array</code>中查找<code>value</code>，返回找到的第一个匹配的<code>index</code>，没找到则返回<code>-1</code>，第三个参数<code>fromIndex</code>指定查找的起始位置，默认为0；</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.indexOf([1, 2, 1, 2], 2);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"></div><div class=\"line\">_.indexOf([1, 2, 1, 2], 3);</div><div class=\"line\">// =&gt; -1</div><div class=\"line\"> </div><div class=\"line\">// Search from the `fromIndex`.</div><div class=\"line\">_.indexOf([1, 2, 1, 2], 2, 2);</div><div class=\"line\">// =&gt; 3</div></pre></td></tr></table></figure></p>\n<h3 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"_.lastIndexOf\"></a><code>_.lastIndexOf</code></h3><ul>\n<li><code>_.lastIndexOf(array, value, [fromIndex=array.length-1])</code></li>\n</ul>\n<p>和<code>_.indexOf</code>方法一样，不过是从尾部开始查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.lastIndexOf([1, 2, 1, 2], 2);</div><div class=\"line\">// =&gt; 3</div><div class=\"line\"> </div><div class=\"line\">// Search from the `fromIndex`.</div><div class=\"line\">_.lastIndexOf([1, 2, 1, 2], 2, 2);</div><div class=\"line\">// =&gt; 1</div></pre></td></tr></table></figure></p>\n<h3 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"_.initial\"></a><code>_.initial</code></h3><ul>\n<li><code>_.initial(array)</code></li>\n</ul>\n<p>去除<code>array</code>最后一个元素，并返回。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.initial([1, 2, 3]);</div><div class=\"line\">// =&gt; [1, 2]</div><div class=\"line\"></div><div class=\"line\">_.initial([1, 2, 3, [4, 5]]);</div><div class=\"line\">// =&gt; [1, 2, 3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"_.intersection\"></a><code>_.intersection</code></h3><ul>\n<li><code>_.intersection([arrays])</code></li>\n</ul>\n<p>取出各数组中全等的元素，使用<code>SameValueZero</code>方式平等比较。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.intersection([2, 1], [2, 3]);</div><div class=\"line\">// =&gt; [2]</div><div class=\"line\"></div><div class=\"line\">_.intersection([1, 2], [4, 2], [2, 1]);</div><div class=\"line\">// =&gt; [2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"intersectionBy\"><a href=\"#intersectionBy\" class=\"headerlink\" title=\"_.intersectionBy\"></a><code>_.intersectionBy</code></h3><ul>\n<li><code>_.intersectionBy([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p><code>_.intersectionBy</code>就是在<code>_.intersection</code>的基础上接受了一个<code>iteratee</code>迭代器，生成了一个比较的标准，类似于<code>_.differenceBy</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);</div><div class=\"line\">// =&gt; [2.1]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.intersectionBy([&#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"intersectionWith\"><a href=\"#intersectionWith\" class=\"headerlink\" title=\"_.intersectionWith\"></a><code>_.intersectionWith</code></h3><ul>\n<li><code>_.intersectionWith([arrays], [comparator])</code></li>\n</ul>\n<p>这个函数和<code>_.differenceWith</code>差不多，一样没太看懂。<br>先略过。</p>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"_.join\"></a><code>_.join</code></h3><ul>\n<li><code>_.join(array, [separator=&#39;,&#39;])</code></li>\n</ul>\n<p>将<code>array</code>转换成字符串类型并通过<code>separator</code>分隔开，默认使用<code>,</code>分隔。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.join([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], &apos;~&apos;);</div><div class=\"line\">// =&gt; &apos;a~b~c&apos;</div><div class=\"line\"></div><div class=\"line\">_.join([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [&apos;d&apos;, &apos;e&apos;]], &apos;-&apos;);</div><div class=\"line\">// =&gt; &apos;a-b-c-d,e&apos;</div></pre></td></tr></table></figure></p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"_.pull\"></a><code>_.pull</code></h3><ul>\n<li><code>_.pull(array, [values])</code></li>\n</ul>\n<p>移除<code>array</code>中所有的指定<code>values</code>，需要注意的是这个函数会对原始<code>array</code>做修改。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\"> </div><div class=\"line\">_.pull(array, &apos;a&apos;, &apos;c&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;b&apos;, &apos;b&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"pullAll\"><a href=\"#pullAll\" class=\"headerlink\" title=\"_.pullAll\"></a><code>_.pullAll</code></h3><ul>\n<li><code>_.pullAll(array, values)</code></li>\n</ul>\n<p><code>_.pullAll</code>方法应该是<code>_.pull</code>方法的升级，这个方法是在<strong>Lodash 4.0.0</strong>中提出的。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\"> </div><div class=\"line\">_.pullAll(array, [&apos;a&apos;, &apos;c&apos;]);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;b&apos;, &apos;b&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"pullAllBy\"><a href=\"#pullAllBy\" class=\"headerlink\" title=\"_.pullAllBy\"></a><code>_.pullAllBy</code></h3><ul>\n<li><code>_.pullAllBy(array, values, [iteratee=_.identity])</code></li>\n</ul>\n<p><code>_.pullAllBy</code>方法很像<code>_.pullAll</code>方法，除了可以接受一个迭代器<code>iteratee</code>，为每一个数组元素执行迭代器并生成一个比较的标准，这个迭代器调用一个参数<code>value</code>。<br><strong>注</strong>：原始数组改变</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array1 = [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 3 &#125;, &#123; &apos;x&apos;: 1 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.pullAllBy(array1, [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 3 &#125;], &apos;x&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2 &#125;]</div><div class=\"line\"></div><div class=\"line\">var array2 = [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 3 &#125;, &#123; &apos;x&apos;: 1 &#125;, &#123; &apos;y&apos;: 4&#125;];</div><div class=\"line\"> </div><div class=\"line\">_.pullAllBy(array, [&#123; &apos;x&apos;: 1 &#125;], &apos;y&apos;);</div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&#123; &apos;y&apos;: 4 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"pullAllWith\"><a href=\"#pullAllWith\" class=\"headerlink\" title=\"_.pullAllWith\"></a><code>_.pullAllWith</code></h3><ul>\n<li><code>_.pullAllWith(array, values, [comoarator])</code></li>\n</ul>\n<p>这个跳过。。。</p>\n<h3 id=\"pullAt\"><a href=\"#pullAt\" class=\"headerlink\" title=\"_.pullAt\"></a><code>_.pullAt</code></h3><ul>\n<li><code>_.pullAt(array, [indexes])</code></li>\n</ul>\n<p>移除相应<code>index</code>的元素，返回被移除元素的数组。<br><strong>注</strong>：原始数组改变</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\">var pulled = _.pullAt(array, [1, 3]);</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [&apos;a&apos;, &apos;c&apos;]</div><div class=\"line\"> </div><div class=\"line\">console.log(pulled);</div><div class=\"line\">// =&gt; [&apos;b&apos;, &apos;d&apos;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"_.remove\"></a><code>_.remove</code></h3><ul>\n<li><code>_.remove(array, [predicate=_.identity])</code></li>\n</ul>\n<p>移除所有<code>predicate</code>返回<strong>真</strong>的数组元素，并返回被移除的数组元素。<code>predicate</code>调用三个参数<code>value, index, array</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3, 4];</div><div class=\"line\">var evens = _.remove(array, function(n) &#123;</div><div class=\"line\">  return n % 2 == 0;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [1, 3]</div><div class=\"line\"> </div><div class=\"line\">console.log(evens);</div><div class=\"line\">// =&gt; [2, 4]</div></pre></td></tr></table></figure></p>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"_.reverse\"></a><code>_.reverse</code></h3><ul>\n<li><code>_.reverse(array)</code></li>\n</ul>\n<p>这个就比较简单了，是一个反序排列的方法，也会对原始方法进行更改</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3];</div><div class=\"line\"> </div><div class=\"line\">_.reverse(array);</div><div class=\"line\">// =&gt; [3, 2, 1]</div><div class=\"line\"> </div><div class=\"line\">console.log(array);</div><div class=\"line\">// =&gt; [3, 2, 1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"_.slice\"></a><code>_.slice</code></h3><ul>\n<li><code>_.slice(array, [start=0], [end=array.length])</code></li>\n</ul>\n<p>对数组进行分割。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [1, 2, 3];</div><div class=\"line\"> </div><div class=\"line\">_.slice(array, 1, 2);</div><div class=\"line\">// =&gt; [2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"_.sortedIndex\"></a><code>_.sortedIndex</code></h3><ul>\n<li><code>_.sortedIndex(array, value)</code><br>向一个有序数组中插入一个<code>value</code>，将返回这个值插入之后的有序位置。（使用二分查找）</li>\n</ul>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedIndex([30, 50], 40);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"></div><div class=\"line\">_.sortedIndex([30, 50], 30);</div><div class=\"line\">// =&gt; 0</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedIndexBy\"><a href=\"#sortedIndexBy\" class=\"headerlink\" title=\"_.sortedIndexBy\"></a><code>_.sortedIndexBy</code></h3><ul>\n<li><code>_.sortedIndexBy(array, value, [iteratee=_.identity])</code></li>\n</ul>\n<p>凡是带<code>By</code>的方法方法，都是这种结构的函数。<br><code>_.sortIndexBy</code>比<code>_.sortIndex</code>方法多一个参数，接收一个迭代器<code>iteratee</code>去计算排序，这个<code>iteratee</code>调用一个参数<code>value</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 4 &#125;, &#123; &apos;x&apos;: 5 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.sortedIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, function(o) &#123; return o.x; &#125;);</div><div class=\"line\">// =&gt; 0</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.sortedIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, &apos;x&apos;);</div><div class=\"line\">// =&gt; 0</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedIndexOf\"><a href=\"#sortedIndexOf\" class=\"headerlink\" title=\"_.sortedIndexOf\"></a><code>_.sortedIndexOf</code></h3><ul>\n<li><code>_.sortedIndexOf(array, value)</code></li>\n</ul>\n<p>这个方法很像<code>_.indexOf</code>，<code>_.sortedIndexOf</code>是对一个有序数组进行二分查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedIndexOf([4, 5, 5, 5, 6], 5);</div><div class=\"line\">// =&gt; 1</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedLastIndex\"><a href=\"#sortedLastIndex\" class=\"headerlink\" title=\"_.sortedLastIndex\"></a><code>_.sortedLastIndex</code></h3><ul>\n<li><code>_.sortedLastIndex(array, value)</code></li>\n</ul>\n<p>这个方法很像<code>_.sortedIndex</code>，这个方法在保持有序的前提下会把<code>value</code>插进最大的那个位置。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedLastIndex([4, 5, 5, 5, 6], 5);</div><div class=\"line\">// =&gt; 4</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedLastIndexBy\"><a href=\"#sortedLastIndexBy\" class=\"headerlink\" title=\"_.sortedLastIndexBy\"></a><code>_.sortedLastIndexBy</code></h3><ul>\n<li><code>_.sortedLastIndexBy(array, value, [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法很像<code>_.sortedLastIndex</code>，只不过多了一个参数<code>iteratee</code>,这个迭代器为每个元素值计算他们的排序，这个迭代器调用一个参数<code>value</code>。返回应该被插入后的数组下标。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 4 &#125;, &#123; &apos;x&apos;: 5 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.sortedLastIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, function(o) &#123; return o.x; &#125;);</div><div class=\"line\">// =&gt; 1</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.sortedLastIndexBy(objects, &#123; &apos;x&apos;: 4 &#125;, &apos;x&apos;);</div><div class=\"line\">// =&gt; 1</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedLastIndexOf\"><a href=\"#sortedLastIndexOf\" class=\"headerlink\" title=\"_.sortedLastIndexOf\"></a><code>_.sortedLastIndexOf</code></h3><ul>\n<li><code>_.sortedLastIndexOf(array, value)</code></li>\n</ul>\n<p>这个方法很像<code>_.lastIndexOf</code>，只不过它对一个有序数组进行二分查找。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);</div><div class=\"line\">// =&gt; 3</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedUniq\"><a href=\"#sortedUniq\" class=\"headerlink\" title=\"_.sortedUniq\"></a><code>_.sortedUniq</code></h3><ul>\n<li><code>_.sortedUniq(array)</code></li>\n</ul>\n<p>这个方法很像<code>_.uniq</code>，这个方法是为了有序数组设计且优化的，返回一个去重的数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedUniq([1, 1, 2]);</div><div class=\"line\">// =&gt; [1, 2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"sortedUniqBy\"><a href=\"#sortedUniqBy\" class=\"headerlink\" title=\"_.sortedUniqBy\"></a><code>_.sortedUniqBy</code></h3><ul>\n<li><code>_.sortedUniqBy(array, [iteratee])</code></li>\n</ul>\n<p>这个方法很像<code>_.uniqBy</code>，它返回经过<code>iteratee</code>计算之后，去除重复值，只返回重复值的第一个原值和不重复值组成的有序数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);</div><div class=\"line\">// =&gt; [1.1, 2.3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"take\"><a href=\"#take\" class=\"headerlink\" title=\"_.take\"></a><code>_.take</code></h3><ul>\n<li><code>_.take(array, [n=1])</code></li>\n</ul>\n<p>创建一个分割后的数组，从<code>array</code>数组的开始到第<code>n</code>个元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.take([1, 2, 3]);</div><div class=\"line\">// =&gt; [1]</div><div class=\"line\"> </div><div class=\"line\">_.take([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [1, 2]</div><div class=\"line\"> </div><div class=\"line\">_.take([1, 2, 3], 5);</div><div class=\"line\">// =&gt; [1, 2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.take([1, 2, 3], 0);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"takeRight\"><a href=\"#takeRight\" class=\"headerlink\" title=\"_.takeRight\"></a><code>_.takeRight</code></h3><ul>\n<li><code>_.takeRight(array, [n=1])</code></li>\n</ul>\n<p>创建一个分割后的数组，从<code>array</code>数组的结尾开始，分割<code>n</code>个元素出来。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.takeRight([1, 2, 3]);</div><div class=\"line\">// =&gt; [3]</div><div class=\"line\"> </div><div class=\"line\">_.takeRight([1, 2, 3], 2);</div><div class=\"line\">// =&gt; [2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.takeRight([1, 2, 3], 5);</div><div class=\"line\">// =&gt; [1, 2, 3]</div><div class=\"line\"> </div><div class=\"line\">_.takeRight([1, 2, 3], 0);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"takeRightWhile\"><a href=\"#takeRightWhile\" class=\"headerlink\" title=\"_.takeRightWhile\"></a><code>_.takeRightWhile</code></h3><ul>\n<li><code>_.takeRightWhile(array, [predicate=_.identity])</code></li>\n</ul>\n<p>同样是从<code>array</code>结尾开始分割数组，不过是通过<code>predicate</code>控制，直到返回<strong>falsey</strong>停止。<code>predicate</code>调用三个参数<code>value, index, array</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.takeRightWhile(users, function(o) &#123; return !o.active; &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;fred&apos;, &apos;pebbles&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.takeRightWhile(users, &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;pebbles&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.takeRightWhile(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; objects for [&apos;fred&apos;, &apos;pebbles&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.takeRightWhile(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"_.takeWhile\"></a><code>_.takeWhile</code></h3><ul>\n<li><code>_.takeWhile(array, [predivate=_.identity])</code></li>\n</ul>\n<p>是从<code>array</code>开头开始分割数组，不过是通过<code>predicate</code>控制，直到返回<strong>falsey</strong>停止。<code>predicate</code>调用三个参数<code>value, index, array</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users = [</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: false &#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false&#125;,</div><div class=\"line\">  &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: true &#125;</div><div class=\"line\">];</div><div class=\"line\"> </div><div class=\"line\">_.takeWhile(users, function(o) &#123; return !o.active; &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matches` iteratee shorthand.</div><div class=\"line\">_.takeWhile(users, &#123; &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: false &#125;);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.matchesProperty` iteratee shorthand.</div><div class=\"line\">_.takeWhile(users, [&apos;active&apos;, false]);</div><div class=\"line\">// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.takeWhile(users, &apos;active&apos;);</div><div class=\"line\">// =&gt; []</div></pre></td></tr></table></figure></p>\n<h3 id=\"union\"><a href=\"#union\" class=\"headerlink\" title=\"_.union\"></a><code>_.union</code></h3><ul>\n<li><code>_.union([arrays])</code></li>\n</ul>\n<p>创建一个没有重复值的数组，组合所有被传入的数组元素。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.union([2], [1, 2]);</div><div class=\"line\">// =&gt; [2, 1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unionBy\"><a href=\"#unionBy\" class=\"headerlink\" title=\"_.unionBy\"></a><code>_.unionBy</code></h3><ul>\n<li><code>_.unionBy([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p>通过<code>iteratee</code>对每个元素值进行执行，生成一个唯一性的标准，并选择第一个出现的值，作为要返回的值，去除重复的元素。<code>iteratee</code>调用一个参数<code>value</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.unionBy([2.1], [1.2, 2.3], Math.floor);</div><div class=\"line\">// =&gt; [2.1, 1.2]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.unionBy([&#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unionWith\"><a href=\"#unionWith\" class=\"headerlink\" title=\"_.unionWith\"></a><code>_.unionWith</code></h3><ul>\n<li><code>_.unionWith([arrays], [comparator])</code></li>\n</ul>\n<p>这个没太看懂。。。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;];</div><div class=\"line\">var others = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.unionWith(objects, others, _.isEqual);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"uniq\"><a href=\"#uniq\" class=\"headerlink\" title=\"_.uniq\"></a><code>_.uniq</code></h3><ul>\n<li><code>_.uniq(array)</code></li>\n</ul>\n<p>数组去重。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.uniq([2, 1, 2]);</div><div class=\"line\">// =&gt; [2, 1]</div></pre></td></tr></table></figure></p>\n<h3 id=\"uniqBy\"><a href=\"#uniqBy\" class=\"headerlink\" title=\"_.uniqBy\"></a><code>_.uniqBy</code></h3><ul>\n<li><code>_.uniqBy(array, [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法是有条件的数组去重，通过<code>iteratee</code>迭代器生成一个唯一性的标准。<code>iteratee</code>调用一个参数<code>value</code>.</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.uniqBy([2.1, 1.2, 2.3], Math.floor);</div><div class=\"line\">// =&gt; [2.1, 1.2]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.uniqBy([&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1 &#125;, &#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"uniqWith\"><a href=\"#uniqWith\" class=\"headerlink\" title=\"_.uniqWith\"></a><code>_.uniqWith</code></h3><ul>\n<li><code>_.uniqWith(array, [comparator])</code></li>\n</ul>\n<p>没太分清<code>_.uniqWith</code>和<code>_.uniqBy</code>之间有什么区别。<code>_.uniqWith</code>传入的是一个比较器。<code>comparator</code>调用两个参数<code>arrVal, othVal</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.uniqWith(objects, _.isEqual);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"_.without\"></a><code>_.without</code></h3><ul>\n<li><code>_.without(array, [values])</code></li>\n</ul>\n<p>创建一个新的数组，去除所有传入的<code>values</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.without([2, 1, 2, 3], 1, 2);</div><div class=\"line\">// =&gt; [3]</div></pre></td></tr></table></figure></p>\n<h3 id=\"xor\"><a href=\"#xor\" class=\"headerlink\" title=\"_.xor\"></a><code>_.xor</code></h3><ul>\n<li><code>_.xor([arrays])</code></li>\n</ul>\n<p><strong>xor</strong>就是异或，相同为0，不同为1，1为<code>true</code>，应该被返回。<br>创建一个唯一值的数组，返回被给数组之间对称差（没有交集的部分）的元素。结果值的顺序由它们在数组中出现的顺序确定。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.xor([2, 1, 4], [2, 3, 5]);</div><div class=\"line\">// =&gt; [1, 4, 3, 5]</div><div class=\"line\"></div><div class=\"line\">_.xor([2, 2, 3], [4, 4, 5, 6]);</div><div class=\"line\">// =&gt; [2, 3, 4, 5, 6]</div></pre></td></tr></table></figure></p>\n<h3 id=\"xorBy\"><a href=\"#xorBy\" class=\"headerlink\" title=\"_.xorBy\"></a><code>_.xorBy</code></h3><ul>\n<li><code>_.xorBy([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p>有条件的<code>_.xor</code>方法，和所有<code>_.xxBy</code>方法一样，接收一个<code>iteratee</code>方法生成一个标准，<code>iteratee</code>接受一个参数<code>value</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);</div><div class=\"line\">// =&gt; [1.2, 3.4]</div><div class=\"line\"> </div><div class=\"line\">// The `_.property` iteratee shorthand.</div><div class=\"line\">_.xorBy([&#123; &apos;x&apos;: 1 &#125;], [&#123; &apos;x&apos;: 2 &#125;, &#123; &apos;x&apos;: 1 &#125;], &apos;x&apos;);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"xorWith\"><a href=\"#xorWith\" class=\"headerlink\" title=\"_.xorWith\"></a><code>_.xorWith</code></h3><ul>\n<li><code>_.xorWith([arrays], [comparator])</code></li>\n</ul>\n<p>这个方法类似于<code>_.xor</code>，除了它接受比较器<code>comparator</code>，它被调用来比较数组的元素。结果值的顺序由它们在数组中出现的顺序确定。<code>comparator</code>调用两个参数<code>arrVal，othVal</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var objects = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;, &#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;];</div><div class=\"line\">var others = [&#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 2 &#125;];</div><div class=\"line\"> </div><div class=\"line\">_.xorWith(objects, others, _.isEqual);</div><div class=\"line\">// =&gt; [&#123; &apos;x&apos;: 2, &apos;y&apos;: 1 &#125;, &#123; &apos;x&apos;: 1, &apos;y&apos;: 1 &#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"_.zip\"></a><code>_.zip</code></h3><ul>\n<li><code>_.zip([arrays])</code></li>\n</ul>\n<p>创建一个元素组数组，把每个传入数组，第一个元素组合到一起，第二个元素组合在一起，以此类推。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zip([&apos;a&apos;, &apos;b&apos;], [1, 2], [true, false]);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, 1, true], [&apos;b&apos;, 2, false]]</div><div class=\"line\"></div><div class=\"line\">_.zip([&apos;a&apos;, &apos;b&apos;], [1], [true, false]);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, 1, true], [&apos;b&apos;, undefined, false]]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"_.unzip\"></a><code>_.unzip</code></h3><ul>\n<li><code>_.unzip(array)</code></li>\n</ul>\n<p>就是把<code>_.zip</code>函数打包好的，或是元素组数组，对其进行解包。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var zipped = _.zip([&apos;a&apos;, &apos;b&apos;], [1, 2], [true, false]);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, 1, true], [&apos;b&apos;, 2, false]]</div><div class=\"line\"> </div><div class=\"line\">_.unzip(zipped);</div><div class=\"line\">// =&gt; [[&apos;a&apos;, &apos;b&apos;], [1, 2], [true, false]]</div></pre></td></tr></table></figure></p>\n<h3 id=\"zipObject\"><a href=\"#zipObject\" class=\"headerlink\" title=\"_.zipObject\"></a><code>_.zipObject</code></h3><ul>\n<li><code>_.zipObject([props=[]], [values=[]])</code></li>\n</ul>\n<p>这个方法很像<code>_.fromPairs</code>，<code>_.zipObject</code>接受两个数组，一个属性数组和一个相应的对应值数组。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zipObject([&apos;a&apos;, &apos;b&apos;], [1, 2]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;</div><div class=\"line\"></div><div class=\"line\">_.zipObject([&apos;a&apos;, &apos;b&apos;], [1]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: 1, &apos;b&apos;: undefined &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"zipObjectDeep\"><a href=\"#zipObjectDeep\" class=\"headerlink\" title=\"_.zipObjectDeep\"></a><code>_.zipObjectDeep</code></h3><ul>\n<li>`_.zipObjectDeep([props=[]], [values=[]])</li>\n</ul>\n<p>这个方法像<code>_.zipObject</code>方法一样，不过它支持属性路径<code>property paths</code></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zipObjectDeep([&apos;a.b[0].c&apos;, &apos;a.b[1].d&apos;], [1, 2]);</div><div class=\"line\">// =&gt; &#123; &apos;a&apos;: &#123; &apos;b&apos;: [&#123; &apos;c&apos;: 1 &#125;, &#123; &apos;d&apos;: 2 &#125;] &#125; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"zipWith\"><a href=\"#zipWith\" class=\"headerlink\" title=\"_.zipWith\"></a><code>_.zipWith</code></h3><ul>\n<li><code>_.zipWith([arrays], [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法像类似<code>_.zip</code>，接受一个迭代器<code>iteratee</code>去指定怎么如何组合分组值。这个迭代器为每个组的元素调用<code>...group</code>，还是看例子比较直观。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) &#123;</div><div class=\"line\">  return a + b + c;</div><div class=\"line\">&#125;);</div><div class=\"line\">// =&gt; [111, 222]</div></pre></td></tr></table></figure></p>\n<h3 id=\"unzipWith\"><a href=\"#unzipWith\" class=\"headerlink\" title=\"_.unzipWith\"></a><code>_.unzipWith</code></h3><ul>\n<li><code>_.unzipWith(array, [iteratee=_.identity])</code></li>\n</ul>\n<p>这个方法很像<code>_.unzip</code>，它接受一个迭代器<code>iteratee</code>去指定怎样重组组合值。<code>iteratee</code>调用一个参数<code>...group</code>。</p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var zipped = _.zip([1, 2], [10, 20], [100, 200]);</div><div class=\"line\">// =&gt; [[1, 10, 100], [2, 20, 200]]</div><div class=\"line\"> </div><div class=\"line\">_.unzipWith(zipped, _.add);</div><div class=\"line\">// =&gt; [3, 30, 300]</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civ94wzef00000gpusnxa5be2","tag_id":"civ94wzef00020gpu2fbks6wt","_id":"civ94wzev00060gpu2vxezykn"},{"post_id":"civ94wzef00010gpujnmp54w1","tag_id":"civ94wzev00050gpuhi2loc8d","_id":"civ94wzev00080gpui3obek3k"},{"post_id":"civ94wzef00030gpusc3m6pe6","tag_id":"civ94wzev00070gpuo2dwg3wl","_id":"civ94wzev000b0gpu051w9zg6"},{"post_id":"civ94wzef00030gpusc3m6pe6","tag_id":"civ94wzev00090gpuhlhuz9oa","_id":"civ94wzev000c0gpufkfpr0fs"},{"post_id":"civ94wzev00040gpuuakz6mxc","tag_id":"civ94wzev000a0gpulxgcoubb","_id":"civ94wzev000d0gpuysdfyzbl"}],"Tag":[{"name":"翻译","_id":"civ94wzef00020gpu2fbks6wt"},{"name":"随笔","_id":"civ94wzev00050gpuhi2loc8d"},{"name":"JavaScipt","_id":"civ94wzev00070gpuo2dwg3wl"},{"name":"cookie","_id":"civ94wzev00090gpuhlhuz9oa"},{"name":"lodash","_id":"civ94wzev000a0gpulxgcoubb"}]}}