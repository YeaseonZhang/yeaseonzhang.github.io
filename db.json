{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1477411052148},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1477411052148},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1477411052148},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1477411052148},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1477411052148},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1477411052148},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1477411052148},{"_id":"themes/next/_config.yml","hash":"e69384ea4ef506a061fc745ac68c6463c48c3587","modified":1477411052148},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1477411052148},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1477411052148},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1477411052152},{"_id":"source/_posts/(译)学习如何构建自动化、跨浏览器的JavaScript单元测试.md","hash":"e2d4db4cc4e96985d7abf9116b84932aecc8098b","modified":1477411052148},{"_id":"source/_posts/2016-10-23-写于1024之前.md","hash":"52654f2997ce736a49b7e7f0896f9637f9c04ffe","modified":1477411052148},{"_id":"source/images/avatar.png","hash":"0395d62157a755fe9d60572fb362a0ed01c779ec","modified":1477411052148},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1477411052148},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1477411052148},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1477411052148},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1477411052148},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1477411052148},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1477411052148},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1477411052148},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1477411052148},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1477411052148},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1477411052148},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1477411052148},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1477411052148},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1477411052152},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1477411052152},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1477411052152},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1477411052152},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1477411052152},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1477411052152},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1477411052152},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1477411052168},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1477411052168},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1477411052168},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052156},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1477411052148},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1477411052148},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1477411052148},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1477411052148},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1477411052148},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1477411052148},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1477411052148},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1477411052148},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1477411052148},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1477411052148},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1477411052148},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1477411052148},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1477411052148},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1477411052148},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1477411052148},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1477411052152},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1477411052152},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1477411052152},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1477411052152},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1477411052156},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1477411052156},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1477411052156},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1477411052156},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1477411052156},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1477411052156},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1477411052156},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1477411052156},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1477411052156},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477411052156},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477411052156},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1477411052156},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1477411052156},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477411052156},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052148},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052148},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052156},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052156},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052156},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052156},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477411052156},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1477411052148},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1477411052148},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1477411052148},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1477411052148},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1477411052148},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1477411052148},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1477411052148},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1477411052148},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1477411052148},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1477411052152},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1477411052156},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1477411052156},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1477411052156},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1477411052156},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1477411052156},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1477411052156},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1477411052156},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1477411052156},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1477411052156},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1477411052156},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1477411052156},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1477411052156},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1477411052156},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1477411052156},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1477411052156},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1477411052160},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1477411052160},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1477411052160},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1477411052160},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1477411052164},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1477411052164},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1477411052164},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1477411052164},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1477411052164},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1477411052164},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1477411052164},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1477411052168},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1477411052168},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1477411052168},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1477411052168},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1477411052168},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1477411052164},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1477411052152},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1477411052152},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1477411052152},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1477411052156},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1477411052156},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1477411052156},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1477411052156},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1477411052156},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1477411052156},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477411052156},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1477411052160},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1477411052160},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477411052164},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1477411052164},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1477411052168},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477411052164},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1477411052168},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1477411052152},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1477411052152},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477411052156},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477411052156},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1477411052160},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1477411052160},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477411052164},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1477411052164},{"_id":"public/archives/index.html","hash":"f058275602e4daa17eb613dcc27e574a637cfdd9","modified":1477411906078},{"_id":"public/archives/2016/index.html","hash":"f08d873b880f1f999b1dcb77d0b76c222c497a2a","modified":1477411906078},{"_id":"public/archives/2016/10/index.html","hash":"3aae6e02ccf4bdf49a40b98e933b9496e7445317","modified":1477411906079},{"_id":"public/tags/翻译/index.html","hash":"b6c6aeb6ee02845cea3bb4107d20337760474155","modified":1477411906079},{"_id":"public/tags/随笔/index.html","hash":"a9230c08a48318ee089f3d4518ecad5136b2e7a1","modified":1477411906079},{"_id":"public/2016/10/25/(译)学习如何构建自动化、跨浏览器的JavaScript单元测试/index.html","hash":"6d8401e3ffc78a30703da7ca48e9b67435614a21","modified":1477411906079},{"_id":"public/2016/10/23/2016-10-23-写于1024之前/index.html","hash":"b9d276c2fd6c5848d8a9545c10a942089568a86b","modified":1477411906079},{"_id":"public/index.html","hash":"8b18772dc6c4b2148fd4308d178ccac7cf6263c9","modified":1477411906079},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1477411906093},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1477411906093},{"_id":"public/images/avatar.png","hash":"0395d62157a755fe9d60572fb362a0ed01c779ec","modified":1477411906093},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1477411906093},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1477411906093},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1477411906094},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1477411906094},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1477411906094},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477411906094},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1477411906094},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477411906094},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1477411906094},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477411906094},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1477411906094},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1477411906094},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1477411906094},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477411906094},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477411906094},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477411906094},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477411906094},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477411906094},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477411906095},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1477411906095},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477411906095},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477411906095},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477411907093},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477411907106},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477411907108},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1477411907116},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1477411907116},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1477411907116},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1477411907117},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1477411907117},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1477411907117},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1477411907117},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1477411907117},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1477411907117},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1477411907117},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1477411907117},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1477411907117},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1477411907117},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1477411907117},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1477411907117},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1477411907117},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1477411907117},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1477411907118},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1477411907118},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477411907118},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1477411907118},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1477411907118},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1477411907118},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1477411907118},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1477411907118},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1477411907118},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1477411907118},{"_id":"public/css/main.css","hash":"3a73c12806a404e063ab2d55d53293d43a8f98ac","modified":1477411907118},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1477411907118},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1477411907118},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1477411907118},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1477411907118},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1477411907119},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1477411907119},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1477411907119},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1477411907119},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1477411907119},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477411907119},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1477411907123}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"(译)学习如何构建自动化、跨浏览器的JavaScript单元测试","date":"2016-10-25T04:52:50.000Z","_content":">作者：Philip Walton\n译者：Yeaseon\n原文链接：[点此查看](https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing)\n\n\n我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。\n我们做的不够好的工作是测试代码时每一次做出的改变。\n我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。\n有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。\n对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。\n<!--more-->\n\n## 手工测试流程\n\n在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。\n\n毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。\n\n在手工过程中，你写了一个你的测试文件，它可能看起来像是：\n\n```\nvar assert = require('assert');\nvar SomeClass = require('../lib/some-class');\n\ndescribe('SomeClass', function() {\n  describe('someMethod', function() {\n    it('accept thing A and transforms it into thing B',function() {\n      var sc = new SomeClass();\n      assert.equal(sc.someMethod('A'), 'B');\n    });\n  });\n});\n```\n\n这个例子用了[Mocha](https://mochajs.org)和Node.js [资源](https://nodejs.org/api/assert.html)模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。\n\n在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：\n\n    mocha test/some-class-test.js\n\n你需要一个带有`<script>`标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识`require`声明，你需要一个像是[browserify](http://browserify.org/)或者[webpack](https://webpack.github.io/)的模块打包工具去解决这些依赖。\n\n    browserify test/*-test.js > test/index.js\n\n像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。\n\n一个用Mocha写的典型测试文件看起来像是这样的：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Tests<title>\n  <link href=\"../node_modules/mocha/mocha.css\" rel=\"stylesheet\" />\n  <script src=\"../node_modules/mocha/mocha.js\"></script>\n</head>\n<body>\n\n  <!-- A container element for the visual Mocha results -->\n  <div id=\"mocha\"></div>\n\n  <!-- Mocha setup and initiation code -->\n  <script>\n    mocha.setup('bdd');\n    window.onload = function() {\n      mocha.run();\n    };\n  </script>\n  <!-- The script under test -->\n  <script src=\"index.js></script>\n</body>\n</html>\n```\n\n如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的`<script>`标签。\n\n### 错误检测\n\n如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。\n\n大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。\n\n### 手工方式的优点\n\n在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。\n\n像是这样的一个简单例子：\n\n```\ndescribe('SomeClass', () => {\n  describe('someMethod', () => {\n    it('accepts thing A and transforms it into thing B', () => {\n      const sc = new SomeClass();\n\n      debugger:\n        assert.equal(sc.someMethod('A'), 'B');\n    )};\n  )};\n)};\n```\n\n现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。\n\n相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。\n\n在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。\n\n## 自动化流程\n\n手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。\n\n如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。\n\n无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。\n\n但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。\n\n当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。\n\n毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。\n\n### 需求\n\n+ 我需要能够使用命令行运行测试\n+ 我需要能够在本地调试失败测试\n+ 我需要所有必需的依赖通过`npm`运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过\n      npm install && npm test\n+ 我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。\n+ 我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。\n\n有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。\n\n### 如何进行云测试\n\n有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有[Sauce Labs](https://saucelabs.com/opensauce/)是唯一一个不需要我邮箱支持就能启动一个新的开源账户。\n\n更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！\n\n我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。\n\n这里是所涉及的步骤：\n1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。\n2.Sauce Labs使用[selenium webdriver](http://www.seleniumhq.org/projects/webdriver/)去加载你给它的每一个浏览器和平台的组合的测试页面。\n3.WebDriver检查网页是否测试失败，并将结果存储。\n4.Sauce Labs将有用的结果给你。\n\n这真的很简单。\n\n我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。\n\n### API方法\n\nSauce Labs有两个运行单元测试的API方法：\n\n+ [StartJS Unit Tests](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests)\n+ [Get JS Unit Test Status](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus)\n\nStartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。\n\n文档给了一个使用`curl`的例子：\n\n```\ncurl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\\n   -X POST \\\n   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\\n   -H 'Content-Type: application/json' \\\n   --data '{\"url\": \"https://example.com/tests.html\", \"framework\": \"mocha\", \"platforms\": [[\"Windows 7\", \"firefox\", \"27\"], [\"Linux\", \"chrome\", \"latest\"]]}'\n```\n\n因为这是JavaScript单元测试，我将给你一个使用node模块[request](https://www.npmjs.com/package/request)的例子，如果你正在用Node.js它可能更接近你最终要做的：\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: {\n    url: 'https://example.com/tests.html',\n    framework: 'mocha',\n    platforms: [\n      ['Windows 7', 'firefox', '27'],\n      ['Linux', 'chrome', 'latest']\n    ]\n  }\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n你注意到body中的`framework: 'mocha'`。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。\n\n如果你没有使用上面提到的测试框架，你能可以通过设置`framework: 'custom'`，Sauce Labs将会代替找到的全局变量`window.global_test_results`。格式化的结果被列在文档中的[自定义框架](https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework)一节中。\n\n#### 让Mocha测试结果对于Sauce Labs的webdriver客户端有用\n\n尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。\n\n为你的HTML页面增加Mocha支持：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    mocha.run();\n  };\n</script>\n```\n\n做一些事情，像下面这样：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    var runner = mocha.run();\n    var failedTests = [];\n\n    runner.on('end', function() {\n      window.mochaResults = runner.stats;\n      window.mochaResults.reports = failedTests;\n    });\n    runner.on('fail', logFailure);\n\n    function logFailure(test, err){\n      var flattenTitles = function(test){\n        var titles = [];\n        while (test.parent.title){         \n          titles.push(test.parent.title);\n          test = test.parent;\n        }\n        return titles.reverse();\n      };\n\n      failedTests.push({\n        name: test.title,\n        result: false,\n        message: err.message,\n        stack: err.stack,\n        titles: flattenTitles(test)\n      });\n    };\n  };\n</script>\n```\n\n在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做`window.mochaResults`。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。\n\n再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个`window.mochaResults`对象，然后记录下这个结果。\n\n#### 确定你的测试通过还是失败\n\nStartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。\n\n它返回所有工作队列中的ID，响应看起来像是这样的：\n\n```\n{\n  \"js tests\": [\n    \"9b6a2d7e6c8d4fd2afeeb0ff7e54e694\",\n    \"d38688ec7256497da6966f4523ddee76\",\n    \"14054e68ccd344c0bed77a798a9ce1e8\",\n    \"dbc54181f7d947458f52201ea5fcb901\"\n  ]\n}\n```\n\n要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。\n\n这个想法是你要定期调用这个方法，知道所有工作都完成。\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests/status`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: jsTests, // The response.body from the first API call.\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n响应的结果看起来像是这样：\n\n```\n{\n  \"completed\": false,\n   \"js tests\": [\n     {\n      \"url\": \"https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8\",\n      \"platform\": [\n        \"Windows 10\",\n        \"chrome\", \"latest\"\n       ],\n       \"result\": {\n        \"passes\": 29,\n        \"tests\": 30,\n        \"end\": {},\n        \"suites\": 7,\n        \"reports\": [],\n        \"start\": {},\n        \"duration\": 97,\n        \"failures\": 0,\n        \"pending\": 1\n      },\n      \"id\": \"1f74a237d5ba4a47b5a42570ae1e7999\",\n      \"job_id\": \"75ac4cadb85e415fae957f7811d778b8\"\n    },\n    // ... the rest of the jobs\n  ]\n}\n```\n\n一旦`response.body.complete`属性值为`true`，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。\n\n### 本地访问测试\n\n我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。\n\n有一个问题就是如果你的测试服务启动在`localhost`。\n\n有很多解决这个问题的方案，包括[Sauce Connect](https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy)（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。\n\nSauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。\n\n如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。\n\n我选择的方案是[ngrok](https://ngrok.com/)\n\n#### ngrok\n\nngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。\n\n如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。\n\n在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。\n\n`npm install ngrok`\n\n你可以用下面的代码以编程方式从Node中开始ngrok进程：\n\n```\nconst ngrok = require('ngrok');\n\nngrok.connect(port, (err, url) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`Tests now accessible at: ${url}`);\n  }\n});\n```\n\n只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。\n\n## 整合碎片化\n\n这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。\n\n我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。\n\n一旦你了解了所有的步骤，它很简单。总结：\n\n** 最初的手工流程 **\n\n1. 写一个测试然后创建一个单一的HTML页面去运行它。\n2. 在本地的一个或者两个浏览器中运行这个测试，确保它能工作。\n\n** 增加自动化流程 **\n\n1. 创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。\n2. 更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。\n3. 用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。\n4. 调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。\n5. 定时调用GetJS Unit Test Status方法知道工作完成。\n6. 报告结果。\n\n## 使测试变得更容易\n\n我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。\n\n我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。\n\n我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库[Easy Sauce](https://github.com/philipwalton/easy-sauce)。\n\n### Easy Sauce\n\n[Easy Sauce](https://github.com/philipwalton/easy-sauce)是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。\n\n`easy-sauce` 命令可以设置你的HTML测试文件的路径（默认是`/test/`）、开启本地服务的端口（默认是`1337`端口）和一系列的浏览器/平台进行测试。`easy-sauce`将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。\n\nnpm包使它变得更方便，`easy-sauce`将会默认在`package.json`文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。\n\n对于`easy sauce`完整的用法介绍，请查看Github[文档](https://github.com/philipwalton/easy-sauce)。\n\n最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。\n\n## 结语\n\n在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。\n\n如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。\n\nHappy testing!\n\n> 如果你能看到这里，很感谢你的耐心阅读。\n这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。\n","source":"_posts/(译)学习如何构建自动化、跨浏览器的JavaScript单元测试.md","raw":"---\ntitle: '(译)学习如何构建自动化、跨浏览器的JavaScript单元测试'\ndate: 2016-10-25 12:52:50\ntags: 翻译\n---\n>作者：Philip Walton\n译者：Yeaseon\n原文链接：[点此查看](https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing)\n\n\n我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。\n我们做的不够好的工作是测试代码时每一次做出的改变。\n我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。\n有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。\n对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。\n<!--more-->\n\n## 手工测试流程\n\n在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。\n\n毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。\n\n在手工过程中，你写了一个你的测试文件，它可能看起来像是：\n\n```\nvar assert = require('assert');\nvar SomeClass = require('../lib/some-class');\n\ndescribe('SomeClass', function() {\n  describe('someMethod', function() {\n    it('accept thing A and transforms it into thing B',function() {\n      var sc = new SomeClass();\n      assert.equal(sc.someMethod('A'), 'B');\n    });\n  });\n});\n```\n\n这个例子用了[Mocha](https://mochajs.org)和Node.js [资源](https://nodejs.org/api/assert.html)模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。\n\n在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：\n\n    mocha test/some-class-test.js\n\n你需要一个带有`<script>`标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识`require`声明，你需要一个像是[browserify](http://browserify.org/)或者[webpack](https://webpack.github.io/)的模块打包工具去解决这些依赖。\n\n    browserify test/*-test.js > test/index.js\n\n像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。\n\n一个用Mocha写的典型测试文件看起来像是这样的：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Tests<title>\n  <link href=\"../node_modules/mocha/mocha.css\" rel=\"stylesheet\" />\n  <script src=\"../node_modules/mocha/mocha.js\"></script>\n</head>\n<body>\n\n  <!-- A container element for the visual Mocha results -->\n  <div id=\"mocha\"></div>\n\n  <!-- Mocha setup and initiation code -->\n  <script>\n    mocha.setup('bdd');\n    window.onload = function() {\n      mocha.run();\n    };\n  </script>\n  <!-- The script under test -->\n  <script src=\"index.js></script>\n</body>\n</html>\n```\n\n如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的`<script>`标签。\n\n### 错误检测\n\n如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。\n\n大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。\n\n### 手工方式的优点\n\n在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。\n\n像是这样的一个简单例子：\n\n```\ndescribe('SomeClass', () => {\n  describe('someMethod', () => {\n    it('accepts thing A and transforms it into thing B', () => {\n      const sc = new SomeClass();\n\n      debugger:\n        assert.equal(sc.someMethod('A'), 'B');\n    )};\n  )};\n)};\n```\n\n现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。\n\n相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。\n\n在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。\n\n## 自动化流程\n\n手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。\n\n如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。\n\n无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。\n\n但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。\n\n当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。\n\n毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。\n\n### 需求\n\n+ 我需要能够使用命令行运行测试\n+ 我需要能够在本地调试失败测试\n+ 我需要所有必需的依赖通过`npm`运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过\n      npm install && npm test\n+ 我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。\n+ 我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。\n\n有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。\n\n### 如何进行云测试\n\n有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有[Sauce Labs](https://saucelabs.com/opensauce/)是唯一一个不需要我邮箱支持就能启动一个新的开源账户。\n\n更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！\n\n我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。\n\n这里是所涉及的步骤：\n1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。\n2.Sauce Labs使用[selenium webdriver](http://www.seleniumhq.org/projects/webdriver/)去加载你给它的每一个浏览器和平台的组合的测试页面。\n3.WebDriver检查网页是否测试失败，并将结果存储。\n4.Sauce Labs将有用的结果给你。\n\n这真的很简单。\n\n我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。\n\n### API方法\n\nSauce Labs有两个运行单元测试的API方法：\n\n+ [StartJS Unit Tests](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests)\n+ [Get JS Unit Test Status](https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus)\n\nStartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。\n\n文档给了一个使用`curl`的例子：\n\n```\ncurl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\\n   -X POST \\\n   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\\n   -H 'Content-Type: application/json' \\\n   --data '{\"url\": \"https://example.com/tests.html\", \"framework\": \"mocha\", \"platforms\": [[\"Windows 7\", \"firefox\", \"27\"], [\"Linux\", \"chrome\", \"latest\"]]}'\n```\n\n因为这是JavaScript单元测试，我将给你一个使用node模块[request](https://www.npmjs.com/package/request)的例子，如果你正在用Node.js它可能更接近你最终要做的：\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: {\n    url: 'https://example.com/tests.html',\n    framework: 'mocha',\n    platforms: [\n      ['Windows 7', 'firefox', '27'],\n      ['Linux', 'chrome', 'latest']\n    ]\n  }\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n你注意到body中的`framework: 'mocha'`。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。\n\n如果你没有使用上面提到的测试框架，你能可以通过设置`framework: 'custom'`，Sauce Labs将会代替找到的全局变量`window.global_test_results`。格式化的结果被列在文档中的[自定义框架](https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework)一节中。\n\n#### 让Mocha测试结果对于Sauce Labs的webdriver客户端有用\n\n尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。\n\n为你的HTML页面增加Mocha支持：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    mocha.run();\n  };\n</script>\n```\n\n做一些事情，像下面这样：\n\n```\n<script>\n  mocha.setup('bdd');\n  window.onload = function() {\n    var runner = mocha.run();\n    var failedTests = [];\n\n    runner.on('end', function() {\n      window.mochaResults = runner.stats;\n      window.mochaResults.reports = failedTests;\n    });\n    runner.on('fail', logFailure);\n\n    function logFailure(test, err){\n      var flattenTitles = function(test){\n        var titles = [];\n        while (test.parent.title){         \n          titles.push(test.parent.title);\n          test = test.parent;\n        }\n        return titles.reverse();\n      };\n\n      failedTests.push({\n        name: test.title,\n        result: false,\n        message: err.message,\n        stack: err.stack,\n        titles: flattenTitles(test)\n      });\n    };\n  };\n</script>\n```\n\n在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做`window.mochaResults`。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。\n\n再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个`window.mochaResults`对象，然后记录下这个结果。\n\n#### 确定你的测试通过还是失败\n\nStartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。\n\n它返回所有工作队列中的ID，响应看起来像是这样的：\n\n```\n{\n  \"js tests\": [\n    \"9b6a2d7e6c8d4fd2afeeb0ff7e54e694\",\n    \"d38688ec7256497da6966f4523ddee76\",\n    \"14054e68ccd344c0bed77a798a9ce1e8\",\n    \"dbc54181f7d947458f52201ea5fcb901\"\n  ]\n}\n```\n\n要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。\n\n这个想法是你要定期调用这个方法，知道所有工作都完成。\n\n```\nrequest({\n  url: `https://saucelabs.com/rest/v1/${username}/js-tests/status`,\n  method: 'POST',\n  auth: {\n    username: process.env.SAUCE_USERNAME,\n    password: process.env.SAUCE_ACCESS_KEY\n  },\n  json: true,\n  body: jsTests, // The response.body from the first API call.\n}, (err, response) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(response.body);\n  }\n});\n```\n\n响应的结果看起来像是这样：\n\n```\n{\n  \"completed\": false,\n   \"js tests\": [\n     {\n      \"url\": \"https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8\",\n      \"platform\": [\n        \"Windows 10\",\n        \"chrome\", \"latest\"\n       ],\n       \"result\": {\n        \"passes\": 29,\n        \"tests\": 30,\n        \"end\": {},\n        \"suites\": 7,\n        \"reports\": [],\n        \"start\": {},\n        \"duration\": 97,\n        \"failures\": 0,\n        \"pending\": 1\n      },\n      \"id\": \"1f74a237d5ba4a47b5a42570ae1e7999\",\n      \"job_id\": \"75ac4cadb85e415fae957f7811d778b8\"\n    },\n    // ... the rest of the jobs\n  ]\n}\n```\n\n一旦`response.body.complete`属性值为`true`，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。\n\n### 本地访问测试\n\n我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。\n\n有一个问题就是如果你的测试服务启动在`localhost`。\n\n有很多解决这个问题的方案，包括[Sauce Connect](https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy)（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。\n\nSauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。\n\n如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。\n\n我选择的方案是[ngrok](https://ngrok.com/)\n\n#### ngrok\n\nngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。\n\n如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。\n\n在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。\n\n`npm install ngrok`\n\n你可以用下面的代码以编程方式从Node中开始ngrok进程：\n\n```\nconst ngrok = require('ngrok');\n\nngrok.connect(port, (err, url) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`Tests now accessible at: ${url}`);\n  }\n});\n```\n\n只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。\n\n## 整合碎片化\n\n这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。\n\n我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。\n\n一旦你了解了所有的步骤，它很简单。总结：\n\n** 最初的手工流程 **\n\n1. 写一个测试然后创建一个单一的HTML页面去运行它。\n2. 在本地的一个或者两个浏览器中运行这个测试，确保它能工作。\n\n** 增加自动化流程 **\n\n1. 创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。\n2. 更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。\n3. 用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。\n4. 调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。\n5. 定时调用GetJS Unit Test Status方法知道工作完成。\n6. 报告结果。\n\n## 使测试变得更容易\n\n我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。\n\n我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。\n\n我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库[Easy Sauce](https://github.com/philipwalton/easy-sauce)。\n\n### Easy Sauce\n\n[Easy Sauce](https://github.com/philipwalton/easy-sauce)是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。\n\n`easy-sauce` 命令可以设置你的HTML测试文件的路径（默认是`/test/`）、开启本地服务的端口（默认是`1337`端口）和一系列的浏览器/平台进行测试。`easy-sauce`将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。\n\nnpm包使它变得更方便，`easy-sauce`将会默认在`package.json`文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。\n\n对于`easy sauce`完整的用法介绍，请查看Github[文档](https://github.com/philipwalton/easy-sauce)。\n\n最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。\n\n## 结语\n\n在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。\n\n如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。\n\nHappy testing!\n\n> 如果你能看到这里，很感谢你的耐心阅读。\n这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。\n","slug":"(译)学习如何构建自动化、跨浏览器的JavaScript单元测试","published":1,"updated":"2016-10-25T15:57:32.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupowhx800001y82jm4hgsik","content":"<blockquote>\n<p>作者：Philip Walton<br>译者：Yeaseon<br>原文链接：<a href=\"https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing\" target=\"_blank\" rel=\"external\">点此查看</a></p>\n</blockquote>\n<p>我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。<br>我们做的不够好的工作是测试代码时每一次做出的改变。<br>我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。<br>有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。<br>对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。<br><a id=\"more\"></a></p>\n<h2 id=\"手工测试流程\"><a href=\"#手工测试流程\" class=\"headerlink\" title=\"手工测试流程\"></a>手工测试流程</h2><p>在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。</p>\n<p>毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。</p>\n<p>在手工过程中，你写了一个你的测试文件，它可能看起来像是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var assert = require(&apos;assert&apos;);</div><div class=\"line\">var SomeClass = require(&apos;../lib/some-class&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;SomeClass&apos;, function() &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, function() &#123;</div><div class=\"line\">    it(&apos;accept thing A and transforms it into thing B&apos;,function() &#123;</div><div class=\"line\">      var sc = new SomeClass();</div><div class=\"line\">      assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个例子用了<a href=\"https://mochajs.org\" target=\"_blank\" rel=\"external\">Mocha</a>和Node.js <a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"external\">资源</a>模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。</p>\n<p>在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：</p>\n<pre><code>mocha test/some-class-test.js\n</code></pre><p>你需要一个带有<code>&lt;script&gt;</code>标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识<code>require</code>声明，你需要一个像是<a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">browserify</a>或者<a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">webpack</a>的模块打包工具去解决这些依赖。</p>\n<pre><code>browserify test/*-test.js &gt; test/index.js\n</code></pre><p>像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。</p>\n<p>一个用Mocha写的典型测试文件看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">  &lt;title&gt;Tests&lt;title&gt;</div><div class=\"line\">  &lt;link href=&quot;../node_modules/mocha/mocha.css&quot; rel=&quot;stylesheet&quot; /&gt;</div><div class=\"line\">  &lt;script src=&quot;../node_modules/mocha/mocha.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- A container element for the visual Mocha results --&gt;</div><div class=\"line\">  &lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- Mocha setup and initiation code --&gt;</div><div class=\"line\">  &lt;script&gt;</div><div class=\"line\">    mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">    window.onload = function() &#123;</div><div class=\"line\">      mocha.run();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">  &lt;!-- The script under test --&gt;</div><div class=\"line\">  &lt;script src=&quot;index.js&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的<code>&lt;script&gt;</code>标签。</p>\n<h3 id=\"错误检测\"><a href=\"#错误检测\" class=\"headerlink\" title=\"错误检测\"></a>错误检测</h3><p>如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。</p>\n<p>大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。</p>\n<h3 id=\"手工方式的优点\"><a href=\"#手工方式的优点\" class=\"headerlink\" title=\"手工方式的优点\"></a>手工方式的优点</h3><p>在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。</p>\n<p>像是这样的一个简单例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;SomeClass&apos;, () =&gt; &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;accepts thing A and transforms it into thing B&apos;, () =&gt; &#123;</div><div class=\"line\">      const sc = new SomeClass();</div><div class=\"line\"></div><div class=\"line\">      debugger:</div><div class=\"line\">        assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    )&#125;;</div><div class=\"line\">  )&#125;;</div><div class=\"line\">)&#125;;</div></pre></td></tr></table></figure>\n<p>现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。</p>\n<p>相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。</p>\n<p>在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。</p>\n<h2 id=\"自动化流程\"><a href=\"#自动化流程\" class=\"headerlink\" title=\"自动化流程\"></a>自动化流程</h2><p>手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。</p>\n<p>如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。</p>\n<p>无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。</p>\n<p>但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。</p>\n<p>当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。</p>\n<p>毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>我需要能够使用命令行运行测试</li>\n<li>我需要能够在本地调试失败测试</li>\n<li>我需要所有必需的依赖通过<code>npm</code>运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过<pre><code>npm install &amp;&amp; npm test\n</code></pre></li>\n<li>我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。</li>\n<li>我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。</li>\n</ul>\n<p>有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。</p>\n<h3 id=\"如何进行云测试\"><a href=\"#如何进行云测试\" class=\"headerlink\" title=\"如何进行云测试\"></a>如何进行云测试</h3><p>有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有<a href=\"https://saucelabs.com/opensauce/\" target=\"_blank\" rel=\"external\">Sauce Labs</a>是唯一一个不需要我邮箱支持就能启动一个新的开源账户。</p>\n<p>更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！</p>\n<p>我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。</p>\n<p>这里是所涉及的步骤：<br>1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。<br>2.Sauce Labs使用<a href=\"http://www.seleniumhq.org/projects/webdriver/\" target=\"_blank\" rel=\"external\">selenium webdriver</a>去加载你给它的每一个浏览器和平台的组合的测试页面。<br>3.WebDriver检查网页是否测试失败，并将结果存储。<br>4.Sauce Labs将有用的结果给你。</p>\n<p>这真的很简单。</p>\n<p>我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。</p>\n<h3 id=\"API方法\"><a href=\"#API方法\" class=\"headerlink\" title=\"API方法\"></a>API方法</h3><p>Sauce Labs有两个运行单元测试的API方法：</p>\n<ul>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests\" target=\"_blank\" rel=\"external\">StartJS Unit Tests</a></li>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus\" target=\"_blank\" rel=\"external\">Get JS Unit Test Status</a></li>\n</ul>\n<p>StartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。</p>\n<p>文档给了一个使用<code>curl</code>的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\</div><div class=\"line\">   -X POST \\</div><div class=\"line\">   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\</div><div class=\"line\">   -H &apos;Content-Type: application/json&apos; \\</div><div class=\"line\">   --data &apos;&#123;&quot;url&quot;: &quot;https://example.com/tests.html&quot;, &quot;framework&quot;: &quot;mocha&quot;, &quot;platforms&quot;: [[&quot;Windows 7&quot;, &quot;firefox&quot;, &quot;27&quot;], [&quot;Linux&quot;, &quot;chrome&quot;, &quot;latest&quot;]]&#125;&apos;</div></pre></td></tr></table></figure>\n<p>因为这是JavaScript单元测试，我将给你一个使用node模块<a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">request</a>的例子，如果你正在用Node.js它可能更接近你最终要做的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: &#123;</div><div class=\"line\">    url: &apos;https://example.com/tests.html&apos;,</div><div class=\"line\">    framework: &apos;mocha&apos;,</div><div class=\"line\">    platforms: [</div><div class=\"line\">      [&apos;Windows 7&apos;, &apos;firefox&apos;, &apos;27&apos;],</div><div class=\"line\">      [&apos;Linux&apos;, &apos;chrome&apos;, &apos;latest&apos;]</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你注意到body中的<code>framework: &#39;mocha&#39;</code>。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。</p>\n<p>如果你没有使用上面提到的测试框架，你能可以通过设置<code>framework: &#39;custom&#39;</code>，Sauce Labs将会代替找到的全局变量<code>window.global_test_results</code>。格式化的结果被列在文档中的<a href=\"https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework\" target=\"_blank\" rel=\"external\">自定义框架</a>一节中。</p>\n<h4 id=\"让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\"><a href=\"#让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\" class=\"headerlink\" title=\"让Mocha测试结果对于Sauce Labs的webdriver客户端有用\"></a>让Mocha测试结果对于Sauce Labs的webdriver客户端有用</h4><p>尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。</p>\n<p>为你的HTML页面增加Mocha支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    mocha.run();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>做一些事情，像下面这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    var runner = mocha.run();</div><div class=\"line\">    var failedTests = [];</div><div class=\"line\"></div><div class=\"line\">    runner.on(&apos;end&apos;, function() &#123;</div><div class=\"line\">      window.mochaResults = runner.stats;</div><div class=\"line\">      window.mochaResults.reports = failedTests;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    runner.on(&apos;fail&apos;, logFailure);</div><div class=\"line\"></div><div class=\"line\">    function logFailure(test, err)&#123;</div><div class=\"line\">      var flattenTitles = function(test)&#123;</div><div class=\"line\">        var titles = [];</div><div class=\"line\">        while (test.parent.title)&#123;         </div><div class=\"line\">          titles.push(test.parent.title);</div><div class=\"line\">          test = test.parent;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return titles.reverse();</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">      failedTests.push(&#123;</div><div class=\"line\">        name: test.title,</div><div class=\"line\">        result: false,</div><div class=\"line\">        message: err.message,</div><div class=\"line\">        stack: err.stack,</div><div class=\"line\">        titles: flattenTitles(test)</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做<code>window.mochaResults</code>。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。</p>\n<p>再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个<code>window.mochaResults</code>对象，然后记录下这个结果。</p>\n<h4 id=\"确定你的测试通过还是失败\"><a href=\"#确定你的测试通过还是失败\" class=\"headerlink\" title=\"确定你的测试通过还是失败\"></a>确定你的测试通过还是失败</h4><p>StartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。</p>\n<p>它返回所有工作队列中的ID，响应看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;js tests&quot;: [</div><div class=\"line\">    &quot;9b6a2d7e6c8d4fd2afeeb0ff7e54e694&quot;,</div><div class=\"line\">    &quot;d38688ec7256497da6966f4523ddee76&quot;,</div><div class=\"line\">    &quot;14054e68ccd344c0bed77a798a9ce1e8&quot;,</div><div class=\"line\">    &quot;dbc54181f7d947458f52201ea5fcb901&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。</p>\n<p>这个想法是你要定期调用这个方法，知道所有工作都完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests/status`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: jsTests, // The response.body from the first API call.</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>响应的结果看起来像是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;completed&quot;: false,</div><div class=\"line\">   &quot;js tests&quot;: [</div><div class=\"line\">     &#123;</div><div class=\"line\">      &quot;url&quot;: &quot;https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8&quot;,</div><div class=\"line\">      &quot;platform&quot;: [</div><div class=\"line\">        &quot;Windows 10&quot;,</div><div class=\"line\">        &quot;chrome&quot;, &quot;latest&quot;</div><div class=\"line\">       ],</div><div class=\"line\">       &quot;result&quot;: &#123;</div><div class=\"line\">        &quot;passes&quot;: 29,</div><div class=\"line\">        &quot;tests&quot;: 30,</div><div class=\"line\">        &quot;end&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;suites&quot;: 7,</div><div class=\"line\">        &quot;reports&quot;: [],</div><div class=\"line\">        &quot;start&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;duration&quot;: 97,</div><div class=\"line\">        &quot;failures&quot;: 0,</div><div class=\"line\">        &quot;pending&quot;: 1</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;id&quot;: &quot;1f74a237d5ba4a47b5a42570ae1e7999&quot;,</div><div class=\"line\">      &quot;job_id&quot;: &quot;75ac4cadb85e415fae957f7811d778b8&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // ... the rest of the jobs</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一旦<code>response.body.complete</code>属性值为<code>true</code>，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。</p>\n<h3 id=\"本地访问测试\"><a href=\"#本地访问测试\" class=\"headerlink\" title=\"本地访问测试\"></a>本地访问测试</h3><p>我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。</p>\n<p>有一个问题就是如果你的测试服务启动在<code>localhost</code>。</p>\n<p>有很多解决这个问题的方案，包括<a href=\"https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy\" target=\"_blank\" rel=\"external\">Sauce Connect</a>（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。</p>\n<p>Sauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。</p>\n<p>如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。</p>\n<p>我选择的方案是<a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"external\">ngrok</a></p>\n<h4 id=\"ngrok\"><a href=\"#ngrok\" class=\"headerlink\" title=\"ngrok\"></a>ngrok</h4><p>ngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。</p>\n<p>如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。</p>\n<p>在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。</p>\n<p><code>npm install ngrok</code></p>\n<p>你可以用下面的代码以编程方式从Node中开始ngrok进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const ngrok = require(&apos;ngrok&apos;);</div><div class=\"line\"></div><div class=\"line\">ngrok.connect(port, (err, url) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(`Tests now accessible at: $&#123;url&#125;`);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。</p>\n<h2 id=\"整合碎片化\"><a href=\"#整合碎片化\" class=\"headerlink\" title=\"整合碎片化\"></a>整合碎片化</h2><p>这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。</p>\n<p>我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。</p>\n<p>一旦你了解了所有的步骤，它很简单。总结：</p>\n<p><strong> 最初的手工流程 </strong></p>\n<ol>\n<li>写一个测试然后创建一个单一的HTML页面去运行它。</li>\n<li>在本地的一个或者两个浏览器中运行这个测试，确保它能工作。</li>\n</ol>\n<p><strong> 增加自动化流程 </strong></p>\n<ol>\n<li>创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。</li>\n<li>更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。</li>\n<li>用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。</li>\n<li>调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。</li>\n<li>定时调用GetJS Unit Test Status方法知道工作完成。</li>\n<li>报告结果。</li>\n</ol>\n<h2 id=\"使测试变得更容易\"><a href=\"#使测试变得更容易\" class=\"headerlink\" title=\"使测试变得更容易\"></a>使测试变得更容易</h2><p>我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。</p>\n<p>我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。</p>\n<p>我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库<a href=\"https://github.com/philipwalton/easy-sauce\" target=\"_blank\" rel=\"external\">Easy Sauce</a>。</p>\n<h3 id=\"Easy-Sauce\"><a href=\"#Easy-Sauce\" class=\"headerlink\" title=\"Easy Sauce\"></a>Easy Sauce</h3><p><a href=\"https://github.com/philipwalton/easy-sauce\" target=\"_blank\" rel=\"external\">Easy Sauce</a>是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。</p>\n<p><code>easy-sauce</code> 命令可以设置你的HTML测试文件的路径（默认是<code>/test/</code>）、开启本地服务的端口（默认是<code>1337</code>端口）和一系列的浏览器/平台进行测试。<code>easy-sauce</code>将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。</p>\n<p>npm包使它变得更方便，<code>easy-sauce</code>将会默认在<code>package.json</code>文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。</p>\n<p>对于<code>easy sauce</code>完整的用法介绍，请查看Github<a href=\"https://github.com/philipwalton/easy-sauce\" target=\"_blank\" rel=\"external\">文档</a>。</p>\n<p>最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。</p>\n<p>如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。</p>\n<p>Happy testing!</p>\n<blockquote>\n<p>如果你能看到这里，很感谢你的耐心阅读。<br>这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。</p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>作者：Philip Walton<br>译者：Yeaseon<br>原文链接：<a href=\"https://philipwalton.com/articles/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing\">点此查看</a></p>\n</blockquote>\n<p>我们都知道在多个浏览器中测试我们的代码是多么的重要。至少在我们发布第一个项目的时候，我认为我们在网络开发社区做大部分工作还是相当不错的。<br>我们做的不够好的工作是测试代码时每一次做出的改变。<br>我个人对此感到很惭愧。我已经把“学习如何构建自动化、跨浏览器的JavaScript的单元测试”列在我的年度to-do清单中，但我每一次坐下来真正想要做的时候，我又退却了。虽然我肯定这一部分原因是因为我的懒惰，同时我认为这也是由于缺乏良好的可用信息在这个主题上。<br>有许多工具和框架（例如 Karma）宣称“要使自动化的JavaScript测试变得简单”，但以我的经验看来这些工具引入的复杂性比他们摆脱的复杂性更多。在我的工作经验中，如果你是一个专家这些工具“能工作”的很好，但对于一个初学者是很糟糕的。我想要真正了解的是这个流程是如何在引擎中工作的，以便在它出现问题的时候（总会出现问题的），我能解决它。<br>对我来说，充分了解这些是如何工作的最好方法就是尝试从头开始重新创建它。所以我决定去构建我自己的测试工具，然后把我的所学分享到社区中。<br>","more":"</p>\n<h2 id=\"手工测试流程\"><a href=\"#手工测试流程\" class=\"headerlink\" title=\"手工测试流程\"></a>手工测试流程</h2><p>在我解释自动化过程之前，我认为最重要的是确保我们都在同一页面上进行手工测试工作。</p>\n<p>毕竟，自动化是关于使用机器来关闭负载的重复部分的现有工作流程。如果你在充分理解手工过程之前尝试去开始自动化，它也不会像你理解了自动化过程一样。</p>\n<p>在手工过程中，你写了一个你的测试文件，它可能看起来像是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var assert = require(&apos;assert&apos;);</div><div class=\"line\">var SomeClass = require(&apos;../lib/some-class&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;SomeClass&apos;, function() &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, function() &#123;</div><div class=\"line\">    it(&apos;accept thing A and transforms it into thing B&apos;,function() &#123;</div><div class=\"line\">      var sc = new SomeClass();</div><div class=\"line\">      assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个例子用了<a href=\"https://mochajs.org\">Mocha</a>和Node.js <a href=\"https://nodejs.org/api/assert.html\">资源</a>模块，但是重要的不是你是用的测试库或者断言库，它可以使任意一个。</p>\n<p>在Mocha中运行Node.js，在你终端通过命令行你就能运行这个测试：</p>\n<pre><code>mocha test/some-class-test.js\n</code></pre><p>你需要一个带有<code>&lt;script&gt;</code>标签的HTML文件加载这段脚本，才能在浏览器运行这个测试，浏览器并不认识<code>require</code>声明，你需要一个像是<a href=\"http://browserify.org/\">browserify</a>或者<a href=\"https://webpack.github.io/\">webpack</a>的模块打包工具去解决这些依赖。</p>\n<pre><code>browserify test/*-test.js &gt; test/index.js\n</code></pre><p>像是browserify或是webpack的模块打包工具的好处就是它能整合你的所有测试（也包括依赖）到一个单一的文件中，这样就能很容易加载到你的测试页面。</p>\n<p>一个用Mocha写的典型测试文件看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">  &lt;title&gt;Tests&lt;title&gt;</div><div class=\"line\">  &lt;link href=&quot;../node_modules/mocha/mocha.css&quot; rel=&quot;stylesheet&quot; /&gt;</div><div class=\"line\">  &lt;script src=&quot;../node_modules/mocha/mocha.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- A container element for the visual Mocha results --&gt;</div><div class=\"line\">  &lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;!-- Mocha setup and initiation code --&gt;</div><div class=\"line\">  &lt;script&gt;</div><div class=\"line\">    mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">    window.onload = function() &#123;</div><div class=\"line\">      mocha.run();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">  &lt;!-- The script under test --&gt;</div><div class=\"line\">  &lt;script src=&quot;index.js&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>如果你不使用Node.js，那么你的起点看起来已经很像这个HTML文本了，唯一不同的是你的依赖可能需要列成一个个单独的<code>&lt;script&gt;</code>标签。</p>\n<h3 id=\"错误检测\"><a href=\"#错误检测\" class=\"headerlink\" title=\"错误检测\"></a>错误检测</h3><p>如果一个测试由于是断言不正确，你的断言库任何时间都会抛出一个错误，这个时候你的测试框架就能发现这个错误。测试框架运行在每个测试的try/catch中来捕获可能会抛出的错误，这些错误报告会显示在你的页面中或是在console中显示这些log。</p>\n<p>大多数的测试框架（像是Mocha）将会提供钩子，这样你就能在测试过程中让页面中的其他脚本访问测试结果。这是一个自动化测试过程的一个关键特征，因为为了自动化工作，自动化脚本需要能够提取测试脚本的结果。</p>\n<h3 id=\"手工方式的优点\"><a href=\"#手工方式的优点\" class=\"headerlink\" title=\"手工方式的优点\"></a>手工方式的优点</h3><p>在浏览器中手工运行测试的最大好处是，假如你的一个测试失败了你能用浏览器的开发者工具去调试它。</p>\n<p>像是这样的一个简单例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;SomeClass&apos;, () =&gt; &#123;</div><div class=\"line\">  describe(&apos;someMethod&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;accepts thing A and transforms it into thing B&apos;, () =&gt; &#123;</div><div class=\"line\">      const sc = new SomeClass();</div><div class=\"line\"></div><div class=\"line\">      debugger:</div><div class=\"line\">        assert.equal(sc.someMethod(&apos;A&apos;), &apos;B&apos;);</div><div class=\"line\">    )&#125;;</div><div class=\"line\">  )&#125;;</div><div class=\"line\">)&#125;;</div></pre></td></tr></table></figure>\n<p>现在当你重新打包并刷新浏览器打开开发者工具，你就可以通过你的代码，很容易定位到问题的根源所在。</p>\n<p>相比之下，大多数流行的自动化测试框架使这变得很困难！它们提供的方便之处是它们捆绑了你的单元测试并且为你创建一个宿主的HTML页面。</p>\n<p>在你的任何一个测试都不会失败的时候，这是很好的方式。因为当它们这样做时，就没有办法轻松地reproduce和本地调试。</p>\n<h2 id=\"自动化流程\"><a href=\"#自动化流程\" class=\"headerlink\" title=\"自动化流程\"></a>自动化流程</h2><p>手工流程有它的优点，同时也有一些缺点。打开几个浏览器去运行测试，每次你想做出改动的时候都会变得繁琐且容易出错。更不用说，我们大部分人没有安装每一个浏览器的每一个版本到我们的本地开发机器上。</p>\n<p>如果你在认真的测试你的代码，并希望确保它的每一个变化都做适当的，那么你需要自动化这个流程。</p>\n<p>无论你是多么的自觉，手动测试是太容易忘记或忽略，最终它不会充分利用你的时间。</p>\n<p>但是自动化测试同样也有它的不足。过于频繁的自动测试工具引入了一个全新的问题。轻微不同的构建，测试就会变得不同，测试失败的话面临的将是痛苦的调试。</p>\n<p>当我计划如何构建我的自动化测试系统的时候，我不想再掉进这个陷阱和失去手工测试流程的便利性。所以我决定在开始之前做一个需求列表。</p>\n<p>毕竟，一个自动化系统如果引入了新的令人头疼的麻烦和复杂性，那它就不是一个成功的自动化系统。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>我需要能够使用命令行运行测试</li>\n<li>我需要能够在本地调试失败测试</li>\n<li>我需要所有必需的依赖通过<code>npm</code>运行测试就能被安装，所以任何人查看我的代码就能很简单的运行，通过<pre><code>npm install &amp;&amp; npm test\n</code></pre></li>\n<li>我需要运行在CI机器上的测试流程和运行在我的开发机器一样简单。这样构建方式是相同的，并且无需检查新的变化就能调试错误。</li>\n<li>我需要所有的测试我（或者任意人）提交新的变化或者拉取请求都能在任何时间自动化运行。</li>\n</ul>\n<p>有了这个粗略的列表之后，下一步就是深入到在主流的云测试如何自动化，跨浏览器测试的工作。</p>\n<h3 id=\"如何进行云测试\"><a href=\"#如何进行云测试\" class=\"headerlink\" title=\"如何进行云测试\"></a>如何进行云测试</h3><p>有很多云测试的供应商，每个供应商都有自己的长处和短处。我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有<a href=\"https://saucelabs.com/opensauce/\">Sauce Labs</a>是唯一一个不需要我邮箱支持就能启动一个新的开源账户。</p>\n<p>更令我吃惊的是当我真正开始钻研Sauce Labs关于JavaScript单元测试的文档是有多么简单。由于好多测试框架都有声称让单元测试变得简单，我认为这真的很难！</p>\n<p>我前面强调了一点就是，我不想我的自动化流程和我的手工流程有什么根本上的不同。事实证明，Sauce Labs提供的自动化方法真的很像我的手工方法。</p>\n<p>这里是所涉及的步骤：<br>1.你给Sauce Labs一个你测试页面的URL以及你要运行的测试的浏览器/平台列表。<br>2.Sauce Labs使用<a href=\"http://www.seleniumhq.org/projects/webdriver/\">selenium webdriver</a>去加载你给它的每一个浏览器和平台的组合的测试页面。<br>3.WebDriver检查网页是否测试失败，并将结果存储。<br>4.Sauce Labs将有用的结果给你。</p>\n<p>这真的很简单。</p>\n<p>我错误地假设你不得不把你的JavaScript代码给Sauce Labs，并且它将会运行在它的机器上，而不是它们只是去访问你给它们的URL。这样的话看起来就像手工流程了；唯一不同的是Sauce Labs去打开所有的浏览器并为你记录下结果。</p>\n<h3 id=\"API方法\"><a href=\"#API方法\" class=\"headerlink\" title=\"API方法\"></a>API方法</h3><p>Sauce Labs有两个运行单元测试的API方法：</p>\n<ul>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-StartJSUnitTests\">StartJS Unit Tests</a></li>\n<li><a href=\"https://wiki.saucelabs.com/display/DOCS/JavaScript+Unit+Testing+Methods#JavaScriptUnitTestingMethods-GetJSUnitTestStatus\">Get JS Unit Test Status</a></li>\n</ul>\n<p>StartJS Unit Tests方法在你指定的浏览器/平台启动一个测试页面。</p>\n<p>文档给了一个使用<code>curl</code>的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://saucelabs.com/rest/v1/SAUCE_USERNAME/js-tests \\</div><div class=\"line\">   -X POST \\</div><div class=\"line\">   -u SAUCE_USERNAME:SAUCE_ACCESS_KEY \\</div><div class=\"line\">   -H &apos;Content-Type: application/json&apos; \\</div><div class=\"line\">   --data &apos;&#123;&quot;url&quot;: &quot;https://example.com/tests.html&quot;, &quot;framework&quot;: &quot;mocha&quot;, &quot;platforms&quot;: [[&quot;Windows 7&quot;, &quot;firefox&quot;, &quot;27&quot;], [&quot;Linux&quot;, &quot;chrome&quot;, &quot;latest&quot;]]&#125;&apos;</div></pre></td></tr></table></figure>\n<p>因为这是JavaScript单元测试，我将给你一个使用node模块<a href=\"https://www.npmjs.com/package/request\">request</a>的例子，如果你正在用Node.js它可能更接近你最终要做的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: &#123;</div><div class=\"line\">    url: &apos;https://example.com/tests.html&apos;,</div><div class=\"line\">    framework: &apos;mocha&apos;,</div><div class=\"line\">    platforms: [</div><div class=\"line\">      [&apos;Windows 7&apos;, &apos;firefox&apos;, &apos;27&apos;],</div><div class=\"line\">      [&apos;Linux&apos;, &apos;chrome&apos;, &apos;latest&apos;]</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你注意到body中的<code>framework: &#39;mocha&#39;</code>。Sauce Labs供应商支持许多主流的JavaScript单元测试框架，包括 Mocha，Jasmine，Qunit和YUI。“支持”意味着Sauce Labs的webdriver客户端知道去哪获取测试结果。</p>\n<p>如果你没有使用上面提到的测试框架，你能可以通过设置<code>framework: &#39;custom&#39;</code>，Sauce Labs将会代替找到的全局变量<code>window.global_test_results</code>。格式化的结果被列在文档中的<a href=\"https://wiki.saucelabs.com/display/DOCS/Reporting+JavaScript+Unit+Test+Results+to+Sauce+Labs+Using+a+Custom+Framework\">自定义框架</a>一节中。</p>\n<h4 id=\"让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\"><a href=\"#让Mocha测试结果对于Sauce-Labs的webdriver客户端有用\" class=\"headerlink\" title=\"让Mocha测试结果对于Sauce Labs的webdriver客户端有用\"></a>让Mocha测试结果对于Sauce Labs的webdriver客户端有用</h4><p>尽管你在最初的请求中告诉Sauce Labs你在使用Mocha，你仍然需要去更新你的HTML页面，去存储Sauce Labs能访问的全局变量的测试结果。</p>\n<p>为你的HTML页面增加Mocha支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    mocha.run();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>做一些事情，像下面这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  mocha.setup(&apos;bdd&apos;);</div><div class=\"line\">  window.onload = function() &#123;</div><div class=\"line\">    var runner = mocha.run();</div><div class=\"line\">    var failedTests = [];</div><div class=\"line\"></div><div class=\"line\">    runner.on(&apos;end&apos;, function() &#123;</div><div class=\"line\">      window.mochaResults = runner.stats;</div><div class=\"line\">      window.mochaResults.reports = failedTests;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    runner.on(&apos;fail&apos;, logFailure);</div><div class=\"line\"></div><div class=\"line\">    function logFailure(test, err)&#123;</div><div class=\"line\">      var flattenTitles = function(test)&#123;</div><div class=\"line\">        var titles = [];</div><div class=\"line\">        while (test.parent.title)&#123;         </div><div class=\"line\">          titles.push(test.parent.title);</div><div class=\"line\">          test = test.parent;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return titles.reverse();</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">      failedTests.push(&#123;</div><div class=\"line\">        name: test.title,</div><div class=\"line\">        result: false,</div><div class=\"line\">        message: err.message,</div><div class=\"line\">        stack: err.stack,</div><div class=\"line\">        titles: flattenTitles(test)</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>在上面的代码和默认的Mocha模板中唯一不同的是分配给测试结果的变量名，就像Sauce Labs期望的格式一样叫做<code>window.mochaResults</code>。因为这个新的代码不会影响正在浏览器中运行的手工测试，你不妨就开始使用它作为默认的Mocha模板。</p>\n<p>再次强调一点，当Sauce Labs“运行”你的测试时，它并没有做任何事，它只是单纯的访问一个页面，等到发现一个<code>window.mochaResults</code>对象，然后记录下这个结果。</p>\n<h4 id=\"确定你的测试通过还是失败\"><a href=\"#确定你的测试通过还是失败\" class=\"headerlink\" title=\"确定你的测试通过还是失败\"></a>确定你的测试通过还是失败</h4><p>StartJS Unit Tests 方法会告诉Sauce Labs去挨个在你指定的浏览器/平台运行测试，但是它不会返回测试的结果。</p>\n<p>它返回所有工作队列中的ID，响应看起来像是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;js tests&quot;: [</div><div class=\"line\">    &quot;9b6a2d7e6c8d4fd2afeeb0ff7e54e694&quot;,</div><div class=\"line\">    &quot;d38688ec7256497da6966f4523ddee76&quot;,</div><div class=\"line\">    &quot;14054e68ccd344c0bed77a798a9ce1e8&quot;,</div><div class=\"line\">    &quot;dbc54181f7d947458f52201ea5fcb901&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要确定你测试通过还是失败，你要调用GetJS Unit Status方法，它接手一个工作队列并且返回当前每个工作的工作状态。</p>\n<p>这个想法是你要定期调用这个方法，知道所有工作都完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">request(&#123;</div><div class=\"line\">  url: `https://saucelabs.com/rest/v1/$&#123;username&#125;/js-tests/status`,</div><div class=\"line\">  method: &apos;POST&apos;,</div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    username: process.env.SAUCE_USERNAME,</div><div class=\"line\">    password: process.env.SAUCE_ACCESS_KEY</div><div class=\"line\">  &#125;,</div><div class=\"line\">  json: true,</div><div class=\"line\">  body: jsTests, // The response.body from the first API call.</div><div class=\"line\">&#125;, (err, response) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(response.body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>响应的结果看起来像是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;completed&quot;: false,</div><div class=\"line\">   &quot;js tests&quot;: [</div><div class=\"line\">     &#123;</div><div class=\"line\">      &quot;url&quot;: &quot;https://saucelabs.com/jobs/75ac4cadb85e415fae957f7811d778b8&quot;,</div><div class=\"line\">      &quot;platform&quot;: [</div><div class=\"line\">        &quot;Windows 10&quot;,</div><div class=\"line\">        &quot;chrome&quot;, &quot;latest&quot;</div><div class=\"line\">       ],</div><div class=\"line\">       &quot;result&quot;: &#123;</div><div class=\"line\">        &quot;passes&quot;: 29,</div><div class=\"line\">        &quot;tests&quot;: 30,</div><div class=\"line\">        &quot;end&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;suites&quot;: 7,</div><div class=\"line\">        &quot;reports&quot;: [],</div><div class=\"line\">        &quot;start&quot;: &#123;&#125;,</div><div class=\"line\">        &quot;duration&quot;: 97,</div><div class=\"line\">        &quot;failures&quot;: 0,</div><div class=\"line\">        &quot;pending&quot;: 1</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;id&quot;: &quot;1f74a237d5ba4a47b5a42570ae1e7999&quot;,</div><div class=\"line\">      &quot;job_id&quot;: &quot;75ac4cadb85e415fae957f7811d778b8&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // ... the rest of the jobs</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一旦<code>response.body.complete</code>属性值为<code>true</code>，就表示你的测试已经运行完成，然后你就可以通过检查每个工作流程的通过还是失败。</p>\n<h3 id=\"本地访问测试\"><a href=\"#本地访问测试\" class=\"headerlink\" title=\"本地访问测试\"></a>本地访问测试</h3><p>我已经解释过Sauce Labs“运行”你的测试通过访问一个URL。当然，这意味着这个URL必须是公开在网络上可访问的链接。</p>\n<p>有一个问题就是如果你的测试服务启动在<code>localhost</code>。</p>\n<p>有很多解决这个问题的方案，包括<a href=\"https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy\">Sauce Connect</a>（官方推荐的一种），这是一个由Sauce Labs创建的代理服务器，在Sauce Labs虚拟机和本地主机之间开启一个安全连接。</p>\n<p>Sauce Labs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码。它的缺点就是十分复杂的设置与使用。</p>\n<p>如果你的代码涉及到安全性，它可能值得你去弄清楚Sauce Labs；如果不是的话，有许多相似的方案去更简单的解决这个问题。</p>\n<p>我选择的方案是<a href=\"https://ngrok.com/\">ngrok</a></p>\n<h4 id=\"ngrok\"><a href=\"#ngrok\" class=\"headerlink\" title=\"ngrok\"></a>ngrok</h4><p>ngrok是一个用于创建安全隧道连接工具。它给你一个公共的URL到web服务器运行在你的本地机器上，确切的是你需要运行测试在Sauce Labs上。</p>\n<p>如果你在虚拟机上进行开发或手动测试，你可能已经听说过ngrok，如果没有，那你应该去查阅一下了，它是极其有用的工具。</p>\n<p>在你的机器上安装ngrok像是下载二进制文件，然后添加到你的路径中一样简单；如果你将会在Node中使用ngrok，你也需要通过npm安装它。</p>\n<p><code>npm install ngrok</code></p>\n<p>你可以用下面的代码以编程方式从Node中开始ngrok进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const ngrok = require(&apos;ngrok&apos;);</div><div class=\"line\"></div><div class=\"line\">ngrok.connect(port, (err, url) =&gt; &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.error(err);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    console.log(`Tests now accessible at: $&#123;url&#125;`);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>只要你有一个公共的URL能访问你的测试文件，用Sauce Labs跨浏览器测试你的本地代码会变得十分容易。</p>\n<h2 id=\"整合碎片化\"><a href=\"#整合碎片化\" class=\"headerlink\" title=\"整合碎片化\"></a>整合碎片化</h2><p>这篇文章包含了很多主题，给人的印象是自动化的，跨浏览器的JavaScript单元测试是复杂的。但情况并非如此。</p>\n<p>我从我的角度来看这篇文章-当我试图去解决这个问题。然后回顾我之前的经验，真正复杂的是缺少解决整个流程如何工作的有效信息，和怎么样把所有的整合到一起。</p>\n<p>一旦你了解了所有的步骤，它很简单。总结：</p>\n<p><strong> 最初的手工流程 </strong></p>\n<ol>\n<li>写一个测试然后创建一个单一的HTML页面去运行它。</li>\n<li>在本地的一个或者两个浏览器中运行这个测试，确保它能工作。</li>\n</ol>\n<p><strong> 增加自动化流程 </strong></p>\n<ol>\n<li>创建一个开源的Sauce Labs账号，获得一个用户名和访问权限。</li>\n<li>更新你的测试页面源码，以便Sauce Labs能通过JavaScript全局变量读取测试结果。</li>\n<li>用ngrok给你的本地测试页面创建一个安全隧道，这样就能在互联网公开的访问了。</li>\n<li>调用StartJS Unit Tests接口方法列出你想测试的浏览器/平台。</li>\n<li>定时调用GetJS Unit Test Status方法知道工作完成。</li>\n<li>报告结果。</li>\n</ol>\n<h2 id=\"使测试变得更容易\"><a href=\"#使测试变得更容易\" class=\"headerlink\" title=\"使测试变得更容易\"></a>使测试变得更容易</h2><p>我知道这篇文章开头我谈了很多关于你不需要一个框架来做自动化，跨浏览器的JavaScript单元测试，我现在仍然坚信这个。然而，尽管每一步都很简单，你可能不想在每次都为项目编写代码。</p>\n<p>我想给我的很多老项目增加自动化测试，所以对我来说打包这些逻辑到我的模块中是很有意义的。</p>\n<p>我推荐你尝试实现一个你自己的框架，这样你就可以完全理解它是如何工作的，但如果你没有时间并且还想快速建立一个测试，我建议你使用我创建的库<a href=\"https://github.com/philipwalton/easy-sauce\">Easy Sauce</a>。</p>\n<h3 id=\"Easy-Sauce\"><a href=\"#Easy-Sauce\" class=\"headerlink\" title=\"Easy Sauce\"></a>Easy Sauce</h3><p><a href=\"https://github.com/philipwalton/easy-sauce\">Easy Sauce</a>是一个Node包和一个命令行工具，现在我为我想做跨浏览器测试的每一个JavaScript项目都使用这个包。</p>\n<p><code>easy-sauce</code> 命令可以设置你的HTML测试文件的路径（默认是<code>/test/</code>）、开启本地服务的端口（默认是<code>1337</code>端口）和一系列的浏览器/平台进行测试。<code>easy-sauce</code>将会在Sauce Lab’s selenium cloud运行你的测试，将日志打印在控制台并通过合适的状态码告知你测试是否通过。</p>\n<p>npm包使它变得更方便，<code>easy-sauce</code>将会默认在<code>package.json</code>文件中查找配置选项，所以你不必分别的存储它们。好处是用户更加明确的知道你的包支持浏览器/平台。</p>\n<p>对于<code>easy sauce</code>完整的用法介绍，请查看Github<a href=\"https://github.com/philipwalton/easy-sauce\">文档</a>。</p>\n<p>最后，我想强调的是我专门建立这个项目来解决我的需要。虽然我认为这个项目对于很多开发人员都十分有用，但我没有计划把它变成一个功能齐全的测试解决方案。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在这篇文章的开始，我写下了一系列的需求。在Easy Sauce的帮助下，我正努力的在任何项目中满足这些需求。</p>\n<p>如果你还没有为你的项目做自动化、跨浏览器的JavaScript单元测试，我鼓励你给Easy Sauce一个尝试的机会。即使你不想用Easy Sauce，你至少应该了解你自己的需求或更好地了解现有的工具。</p>\n<p>Happy testing!</p>\n<blockquote>\n<p>如果你能看到这里，很感谢你的耐心阅读。<br>这是我翻译的第一篇技术文档，自身水平有限，所以翻译总有不当与疏漏，如有发现还请您耐心评论指出。</p>\n</blockquote>"},{"title":"2016-10-23,写于1024之前...","date":"2016-10-23T14:52:50.000Z","_content":"其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。\n最近，越来越觉得不应该这样下去啦。\n就像五月天的歌词：**我知道潮落之后一定有潮起，有什么了不起**，现在“潮落”，也应该开始“潮起”了。\n\n<!--more-->\n\n### 搭建博客的目的\n\n1. 现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客\n2. 将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用**马克飞象**同步到自己的**印象笔记**中\n3. 作为一个web前端开发人员，能够将自己日常所学新技巧，可以**“捣鼓”**到自己的博客上\n4. **Just for fun!!!**\n\n```\nHello world, again !\n```\n明天**10-24**, 祝所有的程序猿“No-Bug-Day”。\n最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。\n> Night-night，Yeaseon.\n","source":"_posts/2016-10-23-写于1024之前.md","raw":"---\ntitle: '2016-10-23,写于1024之前...'\ndate: 2016-10-23 22:52:50\ntags: 随笔\n---\n其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。\n最近，越来越觉得不应该这样下去啦。\n就像五月天的歌词：**我知道潮落之后一定有潮起，有什么了不起**，现在“潮落”，也应该开始“潮起”了。\n\n<!--more-->\n\n### 搭建博客的目的\n\n1. 现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客\n2. 将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用**马克飞象**同步到自己的**印象笔记**中\n3. 作为一个web前端开发人员，能够将自己日常所学新技巧，可以**“捣鼓”**到自己的博客上\n4. **Just for fun!!!**\n\n```\nHello world, again !\n```\n明天**10-24**, 祝所有的程序猿“No-Bug-Day”。\n最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。\n> Night-night，Yeaseon.\n","slug":"2016-10-23-写于1024之前","published":1,"updated":"2016-10-25T15:57:32.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupowhxg00011y825zf5qelv","content":"<p>其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。<br>最近，越来越觉得不应该这样下去啦。<br>就像五月天的歌词：<strong>我知道潮落之后一定有潮起，有什么了不起</strong>，现在“潮落”，也应该开始“潮起”了。</p>\n<a id=\"more\"></a>\n<h3 id=\"搭建博客的目的\"><a href=\"#搭建博客的目的\" class=\"headerlink\" title=\"搭建博客的目的\"></a>搭建博客的目的</h3><ol>\n<li>现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客</li>\n<li>将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用<strong>马克飞象</strong>同步到自己的<strong>印象笔记</strong>中</li>\n<li>作为一个web前端开发人员，能够将自己日常所学新技巧，可以<strong>“捣鼓”</strong>到自己的博客上</li>\n<li><strong>Just for fun!!!</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world, again !</div></pre></td></tr></table></figure>\n<p>明天<strong>10-24</strong>, 祝所有的程序猿“No-Bug-Day”。<br>最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。</p>\n<blockquote>\n<p>Night-night，Yeaseon.</p>\n</blockquote>\n","excerpt":"<p>其实一直有打算自己搭建一个博客的，但是犹豫种种的借口以及毕业之后拖延症病发，所以迟迟没有动手去做这件事。<br>最近，越来越觉得不应该这样下去啦。<br>就像五月天的歌词：<strong>我知道潮落之后一定有潮起，有什么了不起</strong>，现在“潮落”，也应该开始“潮起”了。</p>","more":"<h3 id=\"搭建博客的目的\"><a href=\"#搭建博客的目的\" class=\"headerlink\" title=\"搭建博客的目的\"></a>搭建博客的目的</h3><ol>\n<li>现在能够写作/发帖的网站实在太多了，既然不能做到兼顾，那还不如自己精心运营一个自己的博客</li>\n<li>将自己每天的所学所得，有一个分享的“部落”。而不是向之前一样，用<strong>马克飞象</strong>同步到自己的<strong>印象笔记</strong>中</li>\n<li>作为一个web前端开发人员，能够将自己日常所学新技巧，可以<strong>“捣鼓”</strong>到自己的博客上</li>\n<li><strong>Just for fun!!!</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world, again !</div></pre></td></tr></table></figure>\n<p>明天<strong>10-24</strong>, 祝所有的程序猿“No-Bug-Day”。<br>最近，会把自己在“简书”，“博客园”上面放的文章迁移过来。</p>\n<blockquote>\n<p>Night-night，Yeaseon.</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciupowhx800001y82jm4hgsik","tag_id":"ciupowhxm00021y82soy4xgon","_id":"ciupowhxu00041y825gpzomhx"},{"post_id":"ciupowhxg00011y825zf5qelv","tag_id":"ciupowhxt00031y82u7a99q0r","_id":"ciupowhxv00051y829otum18l"}],"Tag":[{"name":"翻译","_id":"ciupowhxm00021y82soy4xgon"},{"name":"随笔","_id":"ciupowhxt00031y82u7a99q0r"}]}}